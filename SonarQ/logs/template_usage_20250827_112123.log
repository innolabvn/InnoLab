2025-08-27 11:21:23,669 - INFO - TEMPLATE_USAGE: {"file_path": "c:\\Users\\HieuLT\\Desktop\\InnoLab\\projects\\Flask_App\\owasp_insecure_demo.py", "template_type": "fix", "custom_prompt": null, "prompt_length": 7654, "prompt_preview": "### Role\nYou are a Senior Software Engineer. Act to fix real production bugs with minimal, precise changes.\n\n### Inputs (Context)\n- Source code: \n```\nfrom flask import Flask, request, redirect, make_r..."}
2025-08-27 11:21:43,148 - INFO - AI_RESPONSE: {"file_path": "c:\\Users\\HieuLT\\Desktop\\InnoLab\\projects\\Flask_App\\owasp_insecure_demo.py", "raw_response_length": 10958, "cleaned_response_length": 5081, "response_preview": "from flask import Flask, request, redirect, make_response, jsonify\nimport os, sqlite3, hashlib, logging, pickle, requests, base64, secrets\nimport bcrypt # Added for secure password hashing\nfrom flask ...", "full_cleaned_response": "from flask import Flask, request, redirect, make_response, jsonify\nimport os, sqlite3, hashlib, logging, pickle, requests, base64, secrets\nimport bcrypt # Added for secure password hashing\nfrom flask import session\n\nSECRET_KEY = os.environ.get(\"FLASK_SECRET_KEY\", \"secret\")\napp = Flask(__name__)\napp.config['SECRET_KEY'] = SECRET_KEY # Use env variable or default secret\napp.debug = True\n\nlogging.basicConfig(\n    encoding='utf-8',\n    filename='app.log',\n    level=logging.INFO,\n    format='%(asctime)s %(levelname)s %(message)s'\n)\n\nDB_PATH = 'app.db'\nif not os.path.exists(DB_PATH):\n    conn = sqlite3.connect(DB_PATH)\n    cur = conn.cursor()\n    cur.execute(\"CREATE TABLE users (id INTEGER PRIMARY KEY, username TEXT, password_md5 TEXT)\")\n    # Changed to store bcrypt hash instead of md5\n    password = b'password'\n    hashed_password = bcrypt.hashpw(password, bcrypt.gensalt())\n    cur.execute(\"INSERT INTO users(username, password_md5) VALUES('alice', ?)\",\n                (hashed_password.decode('utf-8'),))\n    conn.commit()\n    conn.close()\n\n@app.get(\"/read\")\ndef read_file():\n    path = request.args.get(\"path\", \"\")\n    # Prevent arbitrary file read by checking path prefix\n    if not path.startswith(\"/\") and not path.startswith(\"./\"):\n        return \"Invalid path\", 400\n    try:\n        with open(path, \"r\", encoding=\"utf-8\", errors=\"ignore\") as f:\n            return f.read()\n    except Exception as e:\n        return f\"Error reading file: {e}\", 500\n\n@app.get(\"/go\")\ndef open_redirect():\n    next_url = request.args.get(\"next\", \"https://example.com\")\n    # Prevent open redirect by checking allowed prefix\n    if not next_url.startswith(\"https://example.com\"):\n        return \"Invalid redirect\", 400\n    return redirect(next_url)\n\n@app.get(\"/debug/env\")\ndef leak_env():\n    # Disable environment variable leaking\n    return jsonify({\"message\": \"This endpoint is disabled.\"}), 403\n\n@app.post(\"/register\")\ndef register():\n    username = request.form.get(\"username\", \"\")\n    password = request.form.get(\"password\", \"\")\n    logging.info(f\"Register attempt user={username} password={password}\")\n    # Use bcrypt for password hashing instead of md5\n    pw_hash = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())\n    conn = sqlite3.connect(DB_PATH)\n    cur = conn.cursor()\n    cur.execute(\"INSERT INTO users(username, password_md5) VALUES(?, ?)\", (username, pw_hash.decode('utf-8')))\n    conn.commit()\n    conn.close()\n    return f\"Registered {username} (INSECURE, password stored as bcrypt hash).\"\n\n@app.post(\"/login\")\ndef login():\n    from flask import session\n    username = request.form.get(\"username\", \"\")\n    password = request.form.get(\"password\", \"\")\n    logging.info(f\"Login attempt user={username} password={password}\")\n    conn = sqlite3.connect(DB_PATH)\n    cur = conn.cursor()\n    try:\n        # Use parameterized query to prevent SQL injection\n        query = \"SELECT password_md5 FROM users WHERE username = ?\"\n        cur.execute(query, (username,))\n        result = cur.fetchone()\n        conn.close()\n\n        if result:\n            hashed_password = result[0]\n            if bcrypt.checkpw(password.encode('utf-8'), hashed_password.encode('utf-8')):\n                # Set session to track logged in user\n                session['username'] = username\n                return \"Login success.\"\n        return \"Invalid credentials.\"\n    except Exception as e:\n        conn.close()\n        return \"Internal server error.\", 500 # Returns generic error message instead of raw DB error.\n\n@app.get(\"/echo\")\ndef echo():\n    msg = request.args.get(\"msg\", \"hello\")\n    return f\"<html><body><h3>You said:</h3><div>{msg}</div></body></html>\"\n\n@app.post(\"/save_card\")\ndef save_card():\n    # Disable saving card information\n    return \"Saving cards is disabled\", 403\n\n@app.get(\"/setcookie\")\ndef setcookie():\n    # Disable cookie setting functionality\n    resp = make_response(\"Cookie setting is disabled.\")\n    return \"Cookie setting is disabled\", 403\n\n@app.get(\"/misconfig\")\ndef misconfig():\n    resp = make_response(\"This response has insecure headers.\")\n    # Correct CORS configuration to a specific origin.\n    resp.headers[\"Access-Control-Allow-Origin\"] = \"https://example.com\"\n    resp.headers[\"X-Content-Type-Options\"] = \"nosniff\"\n    return resp\n\nHARDCODED_ADMIN_USER = \"admin\"\nHARDCODED_ADMIN_PASS = \"admin123\"\n\n@app.get(\"/admin\")\ndef admin():\n    # Disable admin access\n    return \"Admin access disabled\", 403\n\n@app.post(\"/deserialize\")\ndef deserialize():\n    # Disable deserialization functionality\n    return \"Deserialization is disabled\", 403\n\n@app.get(\"/fetch\")\ndef fetch():\n    url = request.args.get(\"url\", \"http://127.0.0.1:22\")\n    # Prevent SSRF by validating the URL and enforcing HTTPS\n    if not url.startswith(\"https://127.0.0.1\"):\n        return \"Invalid URL\", 400\n    try:\n        r = requests.get(url, timeout=3, verify=True)\n        return (r.text[:2000] if r.text else str(r.status_code))\n    except Exception as e:\n        return f\"Fetch error: {e}\", 500\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=5000, debug=True)"}

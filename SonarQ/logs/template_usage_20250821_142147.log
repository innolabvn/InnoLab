2025-08-21 14:21:47,178 - INFO - TEMPLATE_USAGE: {"file_path": "source_bug\\code.py", "template_type": "fix", "custom_prompt": null, "prompt_length": 9856, "prompt_preview": "### Role\nYou are a Senior Software Engineer. Act to fix real production bugs with minimal, precise changes.\n\n### Inputs (Context)\n- Source code: \n```\n\"\"\"\nbuggy_app.py - Intentionally buggy Python sour..."}
2025-08-21 14:22:12,872 - INFO - AI_RESPONSE: {"file_path": "source_bug\\code.py", "raw_response_length": 15089, "cleaned_response_length": 6928, "response_preview": "\"\"\"\nbuggy_app.py - Intentionally buggy Python source for testing RAG + static analyzers.\nContains 20+ distinct issues (bugs, code smells, vulnerabilities, bad practices).\nEach issue is annotated with ...", "full_cleaned_response": "\"\"\"\nbuggy_app.py - Intentionally buggy Python source for testing RAG + static analyzers.\nContains 20+ distinct issues (bugs, code smells, vulnerabilities, bad practices).\nEach issue is annotated with a BUG-ID tag for easier tracking.\n\"\"\"\n\nimport os\nimport json\nimport random\nimport secrets\nimport sqlite3\nimport threading\nfrom datetime import datetime\nfrom typing import Iterable\n\n# BUG-001: Hardcoded credentials (security smell)\nDB_USER = os.environ.get(\"DB_USER\")  # Read from env\nDB_PASS = os.environ.get(\"DB_PASS\")  # Read from env\n\n# BUG-002: Mutable default argument\ndef append_item(item, bucket=None):  # Use None as default\n    if bucket is None:\n        bucket = []  # Create new list if bucket is None\n    bucket.append(item)\n    return bucket\n\n# BUG-003: Swallowing broad exception; BUG-004: Unused variable; BUG-005: Shadowing built-in 'list'\ndef load_config(path: str) -> dict:\n    my_list = []  # shadowing built-in fixed\n    try:\n        with open(path) as f: # BUG-006: File not closed (resource leak) - fixed with context manager\n            data = f.read()\n            return json.loads(data)\n    except (FileNotFoundError, json.JSONDecodeError) as e:  # broad except fixed\n        return {}  # silently ignore errors\n\n# BUG-007: Inefficient string concatenation in loop; BUG-008: Off-by-one\ndef join_numbers(n: int) -> str:\n    s = \",\".join(str(i) for i in range(n))\n    return s\n\n# BUG-009: Using eval on untrusted input (security)\ndef compute(expr: str) -> int:\n    raise ValueError(\"Eval is unsafe. Do not use.\")\n\n# BUG-010: SQL injection via string formatting; BUG-011: Unparameterized query\ndef get_user_row(db_path: str, username: str):\n    conn = sqlite3.connect(db_path)\n    cur = conn.cursor()\n    q = \"SELECT * FROM users WHERE name = ?\"  # injection fixed\n    cur.execute(q, (username,))\n    row = cur.fetchone()\n    conn.close()\n    return row\n\n# BUG-012: Insecure randomness for security token\ndef insecure_token() -> str:\n    return secrets.token_hex(16)\n\n# BUG-013: Race condition writing temp file; BUG-014: Not using with-statement\nfile_lock = threading.Lock()\ndef write_temp(data: str, tmp_path: str):\n    with file_lock: # adding lock\n        with open(tmp_path, \"a\") as f:  # no lock, not using context manager fixed with with-statement and lock\n            f.write(data)\n\n# BUG-015: Duplicate code / DRY violation\ndef sum_numbers(a): # renamed from sum_list\n    total = 0\n    for x in a:\n        total += x\n    return total\n\n# BUG-016: Unreachable code\ndef always_true():\n    return True # unreachable fixed\n\n# BUG-017: Comparison to None using ==\ndef is_none(x):\n    return x is None # fixed\n\n# BUG-018: Modifying list during iteration\ndef dedup_inplace(items):\n    seen = set()\n    new_items = []\n    for x in items:\n        if x not in seen:\n            new_items.append(x)\n            seen.add(x)\n    items[:] = new_items  # Modify the original list in-place\n    return items\n\n# BUG-019: Incorrect recursion base case -> potential RecursionError\ndef factorial(n):\n    if n < 0:\n        raise ValueError(\"Factorial is not defined for negative numbers\") # wrong for negative, hides error - fixed\n    if n == 0:\n        return 1  # wrong base value - fixed\n    return n * factorial(n - 1)\n\n# BUG-020: Division by zero potential\ndef average(values):\n    if not values:\n        return 0  # Or raise an exception, depending on desired behavior\n    return sum(values) / len(values)\n\n# BUG-021: Global mutable state without synchronization\ncounter = 0\ncounter_lock = threading.Lock()\n\ndef increment_counter():\n    global counter\n    with counter_lock:\n        counter += 1\n\n# BUG-022: Dead store / unused result\ndef parse_date(s: str):\n    d = datetime.strptime(s, \"%Y-%m-%d\") # unnecessary re-parse - fixed\n    return d\n\n# BUG-023: Non-thread-safe access\nclass UnsafeBox:\n    def __init__(self):\n        self.value = 0\n        self.lock = threading.Lock()\n\n    def add(self, x):\n        with self.lock:\n            self.value += x  # not synchronized - fixed\n\n# BUG-024: Inefficient membership checks (O(n) list used as set)\ndef has_flag(flags, name):\n    return name in set(flags)  # flags expected to be set but passed as list elsewhere\n\n# BUG-025: Logging sensitive info to console\ndef login(user, password):\n    return user == DB_USER and password == DB_PASS\n\n# BUG-026: Magic numbers / duplicate literals\nBASE_FEE = 2.99\nMID_FEE = 5.99\nHIGH_FEE = 9.99\nBASE_WEIGHT = 1.5\nMID_WEIGHT = 5\n\ndef shipping_fee(weight):\n    if weight < BASE_WEIGHT:\n        return BASE_FEE\n    elif weight < MID_WEIGHT:\n        return MID_FEE\n    else:\n        return HIGH_FEE\n\n# BUG-027: Wrong type hint / mismatch\ndef to_ints(values: Iterable) -> list:\n    return [int(v) for v in values]  # expects iterable of numbers, not dict - fixed typehint\n\n# BUG-028: Deprecated/obsolete API usage style (placeholder example)\ndef bytes_to_str(b):\n    return b.decode(\"utf8\")  # extra arg ignored in modern Python\n\n# BUG-029: Ineffective try/except scope, masking real errors\ndef safe_div(a, b):\n    try:\n        result = a / b\n    except ZeroDivisionError: # hides ZeroDivision and TypeErrors\n        return 0  # hides ZeroDivision and TypeErrors\n    return result\n\n# BUG-030: Incorrect boolean logic\ndef is_valid_port(p):\n    return 0 <= p and p <= 65535  # always True for most integers - fixed\n\n# A small \"main\" to exercise some functions (may crash due to bugs)\ndef main():\n    append_item(\"x\")\n    append_item(\"y\")  # BUG-002 visible: bucket persists across calls\n\n    load_config(\"missing.json\")  # swallowed error\n\n    join_numbers(3)\n\n    # DO NOT pass untrusted input to eval in real code\n    # compute(\"1 + 2 * 3\") # removed to prevent security issue\n\n    # SQL injection example (for analyzer only; will fail if DB absent)\n    try:\n        get_user_row(\"test.db\", \"alice' OR '1'='1\")\n    except Exception as e:\n        print(\"db failed:\", e)\n\n    token = insecure_token()\n    print(\"token:\", token)\n\n    write_temp(\"hello\\n\", \"tmp.txt\")\n\n    sum_numbers([1,2,3])\n\n    always_true()\n\n    print(\"is_none(None):\", is_none(None))\n\n    dedup_inplace([1,1,2,3,3])\n\n    try:\n        factorial(5)\n    except Exception as e:\n        print(\"factorial failed:\", e)\n\n    try:\n        average([])  # ZeroDivisionError\n    except Exception as e:\n        print(\"average failed:\", e)\n\n    box = UnsafeBox()\n    threads = [threading.Thread(target=worker, args=(box, 1000)) for _ in range(5)]\n    for t in threads:\n        t.start()\n    for t in threads:\n        t.join()\n    print(\"box value (race-prone):\", box.value)\n\n    login(\"admin\", \"123456\")\n\n    shipping_fee(2.0)\n\n    try:\n        to_ints([1, 2])  # wrong type\n    except Exception as e:\n        print(\"to_ints failed:\", e)\n\n    try:\n        bytes_to_str(b\"hi\")\n    except Exception as e:\n        print(\"bytes_to_str failed:\", e)\n\n    print(\"safe_div(1,0):\", safe_div(1,0))\n\n    print(\"is_valid_port(-5):\", is_valid_port(-5))\n\nif __name__ == \"__main__\":\n    main()"}

{
    "issues": [
        {
            "bug_id": "AZjHF-gtVsqnQYobecNu",
            "bug_name": "Add logic to this except clause or eliminate it and rethrow the exception automatically.",
            "rule_key": "python:S2737",
            "severity": "MINOR",
            "type": "CODE_SMELL",
            "file_path": "source_bug/source_bug/source_bug/source_bug/code.py",
            "line": 8,
            "message": "Add logic to this except clause or eliminate it and rethrow the exception automatically.",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:47:59+0000",
            "updated_at": "2025-08-20T10:47:59+0000",
            "rule_description": "An except clause that only rethrows the caught exception has the same effect as omitting the except altogether and\nletting it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads.\nSuch clauses should either be eliminated or populated with the appropriate logic.\nNoncompliant Code Example\n\na = {}\ntry:\n    a[5]\nexcept KeyError:\n    raise  # Noncompliant\n\nCompliant Solution\n\na = {}\ntry:\n    a[5]\nexcept KeyError as e:\n    logging.exception('error while accessing the dict')\n    raise e",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHF-gtVsqnQYobecNv",
            "bug_name": "Remove or correct this useless self-assignment.",
            "rule_key": "python:S1656",
            "severity": "MAJOR",
            "type": "BUG",
            "file_path": "source_bug/source_bug/source_bug/source_bug/code.py",
            "line": 17,
            "message": "Remove or correct this useless self-assignment.",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:47:59+0000",
            "updated_at": "2025-08-20T10:47:59+0000",
            "rule_description": "There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.\nNoncompliant Code Example\n\nname = name\n\nCompliant Solution\n\nname = other.name",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHF-gtVsqnQYobecNw",
            "bug_name": "Remove or correct this useless self-assignment.",
            "rule_key": "python:S1656",
            "severity": "MAJOR",
            "type": "BUG",
            "file_path": "source_bug/source_bug/source_bug/source_bug/code.py",
            "line": 24,
            "message": "Remove or correct this useless self-assignment.",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:47:59+0000",
            "updated_at": "2025-08-20T10:47:59+0000",
            "rule_description": "There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.\nNoncompliant Code Example\n\nname = name\n\nCompliant Solution\n\nname = other.name",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHF-gtVsqnQYobecNx",
            "bug_name": "Was += meant instead?",
            "rule_key": "python:S2757",
            "severity": "MAJOR",
            "type": "BUG",
            "file_path": "source_bug/source_bug/source_bug/source_bug/code.py",
            "line": 25,
            "message": "Was += meant instead?",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:47:59+0000",
            "updated_at": "2025-08-20T10:47:59+0000",
            "rule_description": "The use of operators pairs ( =+ or =-) where the reversed, single operator was meant (+= or -=)\nwill run fine, but not produce the expected results.\nThis rule raises an issue when =+ or =- is used without any spacing between the two operators and when there is at least\none whitespace character after.\nNoncompliant Code Example\n\ntarget = -5\nnum = 3\n\ntarget =- num  # Noncompliant; target = -3. Is that really what's meant?\ntarget =+ num # Noncompliant; target = 3\n\nCompliant Solution\n\ntarget = -5\nnum = 3\n\ntarget = -num  # Compliant; intent to assign inverse value of num is clear\ntarget += num",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHF-gtVsqnQYobecNy",
            "bug_name": "Introduce a new variable or use its initial value before reassigning 'n'.",
            "rule_key": "python:S1226",
            "severity": "MINOR",
            "type": "BUG",
            "file_path": "source_bug/source_bug/source_bug/source_bug/code.py",
            "line": 29,
            "message": "Introduce a new variable or use its initial value before reassigning 'n'.",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:47:59+0000",
            "updated_at": "2025-08-20T10:47:59+0000",
            "rule_description": "While it is technically correct to assign to parameters from within function bodies, doing so before the parameter value is read is likely a bug.\nInstead, initial values of parameters should be, if not treated as read-only, then at least read before reassignment.\nNoncompliant Code Example\n\ndef foo(strings, param):\n    param = 1  # NonCompliant",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHF-gtVsqnQYobecNz",
            "bug_name": "Remove or rework this redundant alternative.",
            "rule_key": "python:S5855",
            "severity": "MAJOR",
            "type": "BUG",
            "file_path": "source_bug/source_bug/source_bug/source_bug/code.py",
            "line": 35,
            "message": "Remove or rework this redundant alternative.",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:47:59+0000",
            "updated_at": "2025-08-20T10:47:59+0000",
            "rule_description": "If an alternative in a regular expression only matches things that are already matched by another alternative, that alternative is redundant and\nserves no purpose.\nIn the best case this means that the offending subpattern is merely redundant and should be removed. In the worst case itâ€™s a sign that this regex\ndoes not match what it was intended to match and should be reworked.\nNoncompliant Code Example\n\nr\"[ab]|a\"   # The \"|a\" is redundant because \"[ab]\" already matches \"a\"\nr\".*|a\"     # .* matches everything, so any other alternative is redundant\n\nCompliant Solution\n\nr\"[ab]\"\nr\".*\"",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHF-gtVsqnQYobecN0",
            "bug_name": "Was += meant instead?",
            "rule_key": "python:S2757",
            "severity": "MAJOR",
            "type": "BUG",
            "file_path": "source_bug/source_bug/source_bug/source_bug/code.py",
            "line": 41,
            "message": "Was += meant instead?",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:47:59+0000",
            "updated_at": "2025-08-20T10:47:59+0000",
            "rule_description": "The use of operators pairs ( =+ or =-) where the reversed, single operator was meant (+= or -=)\nwill run fine, but not produce the expected results.\nThis rule raises an issue when =+ or =- is used without any spacing between the two operators and when there is at least\none whitespace character after.\nNoncompliant Code Example\n\ntarget = -5\nnum = 3\n\ntarget =- num  # Noncompliant; target = -3. Is that really what's meant?\ntarget =+ num # Noncompliant; target = 3\n\nCompliant Solution\n\ntarget = -5\nnum = 3\n\ntarget = -num  # Compliant; intent to assign inverse value of num is clear\ntarget += num",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHF-gtVsqnQYobecN1",
            "bug_name": "Correct one of the identical sub-expressions on both sides of operator \"==\".",
            "rule_key": "python:S1764",
            "severity": "MAJOR",
            "type": "BUG",
            "file_path": "source_bug/source_bug/source_bug/source_bug/code.py",
            "line": 54,
            "message": "Correct one of the identical sub-expressions on both sides of operator \"==\".",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:47:59+0000",
            "updated_at": "2025-08-20T10:47:59+0000",
            "rule_description": "Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.\nNote that this rule will raise issues on a == a and a != a expressions which are sometime used to detect NaN\nvalues. It is recommended to use instead math.isnan or an equivalent\nfunction. This will improve code readability.\nNoncompliant Code Example\n\nif a == a: # Noncompliant\n    work()\n\nif  a != a: # Noncompliant\n    work()\n\nif  a == b and a == b: # Noncompliant\n    work()\n\nif a == b or a == b: # Noncompliant\n    work()\n\nj = 5 / 5 # Noncompliant\nk = 5 - 5 # Noncompliant\n\nExceptions\nThe following are ignored:\n\n   The expression 1 &lt;&lt; 1 \n\nSee\n\n   S1656 - Implements a check on =.",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHF-gtVsqnQYobecN2",
            "bug_name": "Either remove or fill this block of code.",
            "rule_key": "python:S108",
            "severity": "MAJOR",
            "type": "CODE_SMELL",
            "file_path": "source_bug/source_bug/source_bug/source_bug/code.py",
            "line": 59,
            "message": "Either remove or fill this block of code.",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:47:59+0000",
            "updated_at": "2025-08-20T10:47:59+0000",
            "rule_description": "Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.\nNoncompliant Code Example\n\nfor i in range(3):\n    pass\n\nExceptions\nWhen a block contains a comment, this block is not considered to be empty.",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHDKrYVsqnQYobebqy",
            "bug_name": "Add logic to this except clause or eliminate it and rethrow the exception automatically.",
            "rule_key": "python:S2737",
            "severity": "MINOR",
            "type": "CODE_SMELL",
            "file_path": "source_bug/source_bug/source_bug/code.py",
            "line": 8,
            "message": "Add logic to this except clause or eliminate it and rethrow the exception automatically.",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:35:45+0000",
            "updated_at": "2025-08-20T10:47:22+0000",
            "rule_description": "An except clause that only rethrows the caught exception has the same effect as omitting the except altogether and\nletting it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads.\nSuch clauses should either be eliminated or populated with the appropriate logic.\nNoncompliant Code Example\n\na = {}\ntry:\n    a[5]\nexcept KeyError:\n    raise  # Noncompliant\n\nCompliant Solution\n\na = {}\ntry:\n    a[5]\nexcept KeyError as e:\n    logging.exception('error while accessing the dict')\n    raise e",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHDKrYVsqnQYobebqz",
            "bug_name": "Remove or correct this useless self-assignment.",
            "rule_key": "python:S1656",
            "severity": "MAJOR",
            "type": "BUG",
            "file_path": "source_bug/source_bug/source_bug/code.py",
            "line": 17,
            "message": "Remove or correct this useless self-assignment.",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:35:45+0000",
            "updated_at": "2025-08-20T10:47:22+0000",
            "rule_description": "There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.\nNoncompliant Code Example\n\nname = name\n\nCompliant Solution\n\nname = other.name",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHDKrYVsqnQYobebq0",
            "bug_name": "Remove or correct this useless self-assignment.",
            "rule_key": "python:S1656",
            "severity": "MAJOR",
            "type": "BUG",
            "file_path": "source_bug/source_bug/source_bug/code.py",
            "line": 24,
            "message": "Remove or correct this useless self-assignment.",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:35:45+0000",
            "updated_at": "2025-08-20T10:47:22+0000",
            "rule_description": "There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.\nNoncompliant Code Example\n\nname = name\n\nCompliant Solution\n\nname = other.name",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHDKrYVsqnQYobebq1",
            "bug_name": "Was += meant instead?",
            "rule_key": "python:S2757",
            "severity": "MAJOR",
            "type": "BUG",
            "file_path": "source_bug/source_bug/source_bug/code.py",
            "line": 25,
            "message": "Was += meant instead?",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:35:45+0000",
            "updated_at": "2025-08-20T10:47:22+0000",
            "rule_description": "The use of operators pairs ( =+ or =-) where the reversed, single operator was meant (+= or -=)\nwill run fine, but not produce the expected results.\nThis rule raises an issue when =+ or =- is used without any spacing between the two operators and when there is at least\none whitespace character after.\nNoncompliant Code Example\n\ntarget = -5\nnum = 3\n\ntarget =- num  # Noncompliant; target = -3. Is that really what's meant?\ntarget =+ num # Noncompliant; target = 3\n\nCompliant Solution\n\ntarget = -5\nnum = 3\n\ntarget = -num  # Compliant; intent to assign inverse value of num is clear\ntarget += num",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHDKrYVsqnQYobebq2",
            "bug_name": "Introduce a new variable or use its initial value before reassigning 'n'.",
            "rule_key": "python:S1226",
            "severity": "MINOR",
            "type": "BUG",
            "file_path": "source_bug/source_bug/source_bug/code.py",
            "line": 29,
            "message": "Introduce a new variable or use its initial value before reassigning 'n'.",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:35:45+0000",
            "updated_at": "2025-08-20T10:47:22+0000",
            "rule_description": "While it is technically correct to assign to parameters from within function bodies, doing so before the parameter value is read is likely a bug.\nInstead, initial values of parameters should be, if not treated as read-only, then at least read before reassignment.\nNoncompliant Code Example\n\ndef foo(strings, param):\n    param = 1  # NonCompliant",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHDKrYVsqnQYobebq3",
            "bug_name": "Remove or rework this redundant alternative.",
            "rule_key": "python:S5855",
            "severity": "MAJOR",
            "type": "BUG",
            "file_path": "source_bug/source_bug/source_bug/code.py",
            "line": 35,
            "message": "Remove or rework this redundant alternative.",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:35:45+0000",
            "updated_at": "2025-08-20T10:47:22+0000",
            "rule_description": "If an alternative in a regular expression only matches things that are already matched by another alternative, that alternative is redundant and\nserves no purpose.\nIn the best case this means that the offending subpattern is merely redundant and should be removed. In the worst case itâ€™s a sign that this regex\ndoes not match what it was intended to match and should be reworked.\nNoncompliant Code Example\n\nr\"[ab]|a\"   # The \"|a\" is redundant because \"[ab]\" already matches \"a\"\nr\".*|a\"     # .* matches everything, so any other alternative is redundant\n\nCompliant Solution\n\nr\"[ab]\"\nr\".*\"",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHDKrYVsqnQYobebq4",
            "bug_name": "Was += meant instead?",
            "rule_key": "python:S2757",
            "severity": "MAJOR",
            "type": "BUG",
            "file_path": "source_bug/source_bug/source_bug/code.py",
            "line": 41,
            "message": "Was += meant instead?",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:35:45+0000",
            "updated_at": "2025-08-20T10:47:22+0000",
            "rule_description": "The use of operators pairs ( =+ or =-) where the reversed, single operator was meant (+= or -=)\nwill run fine, but not produce the expected results.\nThis rule raises an issue when =+ or =- is used without any spacing between the two operators and when there is at least\none whitespace character after.\nNoncompliant Code Example\n\ntarget = -5\nnum = 3\n\ntarget =- num  # Noncompliant; target = -3. Is that really what's meant?\ntarget =+ num # Noncompliant; target = 3\n\nCompliant Solution\n\ntarget = -5\nnum = 3\n\ntarget = -num  # Compliant; intent to assign inverse value of num is clear\ntarget += num",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHDKrYVsqnQYobebq5",
            "bug_name": "Correct one of the identical sub-expressions on both sides of operator \"==\".",
            "rule_key": "python:S1764",
            "severity": "MAJOR",
            "type": "BUG",
            "file_path": "source_bug/source_bug/source_bug/code.py",
            "line": 54,
            "message": "Correct one of the identical sub-expressions on both sides of operator \"==\".",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:35:45+0000",
            "updated_at": "2025-08-20T10:47:22+0000",
            "rule_description": "Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.\nNote that this rule will raise issues on a == a and a != a expressions which are sometime used to detect NaN\nvalues. It is recommended to use instead math.isnan or an equivalent\nfunction. This will improve code readability.\nNoncompliant Code Example\n\nif a == a: # Noncompliant\n    work()\n\nif  a != a: # Noncompliant\n    work()\n\nif  a == b and a == b: # Noncompliant\n    work()\n\nif a == b or a == b: # Noncompliant\n    work()\n\nj = 5 / 5 # Noncompliant\nk = 5 - 5 # Noncompliant\n\nExceptions\nThe following are ignored:\n\n   The expression 1 &lt;&lt; 1 \n\nSee\n\n   S1656 - Implements a check on =.",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHDKrYVsqnQYobebq6",
            "bug_name": "Either remove or fill this block of code.",
            "rule_key": "python:S108",
            "severity": "MAJOR",
            "type": "CODE_SMELL",
            "file_path": "source_bug/source_bug/source_bug/code.py",
            "line": 59,
            "message": "Either remove or fill this block of code.",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:35:45+0000",
            "updated_at": "2025-08-20T10:47:22+0000",
            "rule_description": "Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.\nNoncompliant Code Example\n\nfor i in range(3):\n    pass\n\nExceptions\nWhen a block contains a comment, this block is not considered to be empty.",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHDCPTVsqnQYobebjZ",
            "bug_name": "Add logic to this except clause or eliminate it and rethrow the exception automatically.",
            "rule_key": "python:S2737",
            "severity": "MINOR",
            "type": "CODE_SMELL",
            "file_path": "source_bug/source_bug/code.py",
            "line": 8,
            "message": "Add logic to this except clause or eliminate it and rethrow the exception automatically.",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:35:11+0000",
            "updated_at": "2025-08-20T10:46:47+0000",
            "rule_description": "An except clause that only rethrows the caught exception has the same effect as omitting the except altogether and\nletting it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads.\nSuch clauses should either be eliminated or populated with the appropriate logic.\nNoncompliant Code Example\n\na = {}\ntry:\n    a[5]\nexcept KeyError:\n    raise  # Noncompliant\n\nCompliant Solution\n\na = {}\ntry:\n    a[5]\nexcept KeyError as e:\n    logging.exception('error while accessing the dict')\n    raise e",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHDCPTVsqnQYobebja",
            "bug_name": "Remove or correct this useless self-assignment.",
            "rule_key": "python:S1656",
            "severity": "MAJOR",
            "type": "BUG",
            "file_path": "source_bug/source_bug/code.py",
            "line": 17,
            "message": "Remove or correct this useless self-assignment.",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:35:11+0000",
            "updated_at": "2025-08-20T10:46:47+0000",
            "rule_description": "There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.\nNoncompliant Code Example\n\nname = name\n\nCompliant Solution\n\nname = other.name",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHDCPTVsqnQYobebjb",
            "bug_name": "Remove or correct this useless self-assignment.",
            "rule_key": "python:S1656",
            "severity": "MAJOR",
            "type": "BUG",
            "file_path": "source_bug/source_bug/code.py",
            "line": 24,
            "message": "Remove or correct this useless self-assignment.",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:35:11+0000",
            "updated_at": "2025-08-20T10:46:47+0000",
            "rule_description": "There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.\nNoncompliant Code Example\n\nname = name\n\nCompliant Solution\n\nname = other.name",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHDCPUVsqnQYobebjc",
            "bug_name": "Was += meant instead?",
            "rule_key": "python:S2757",
            "severity": "MAJOR",
            "type": "BUG",
            "file_path": "source_bug/source_bug/code.py",
            "line": 25,
            "message": "Was += meant instead?",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:35:11+0000",
            "updated_at": "2025-08-20T10:46:47+0000",
            "rule_description": "The use of operators pairs ( =+ or =-) where the reversed, single operator was meant (+= or -=)\nwill run fine, but not produce the expected results.\nThis rule raises an issue when =+ or =- is used without any spacing between the two operators and when there is at least\none whitespace character after.\nNoncompliant Code Example\n\ntarget = -5\nnum = 3\n\ntarget =- num  # Noncompliant; target = -3. Is that really what's meant?\ntarget =+ num # Noncompliant; target = 3\n\nCompliant Solution\n\ntarget = -5\nnum = 3\n\ntarget = -num  # Compliant; intent to assign inverse value of num is clear\ntarget += num",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHDCPUVsqnQYobebjd",
            "bug_name": "Introduce a new variable or use its initial value before reassigning 'n'.",
            "rule_key": "python:S1226",
            "severity": "MINOR",
            "type": "BUG",
            "file_path": "source_bug/source_bug/code.py",
            "line": 29,
            "message": "Introduce a new variable or use its initial value before reassigning 'n'.",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:35:11+0000",
            "updated_at": "2025-08-20T10:46:47+0000",
            "rule_description": "While it is technically correct to assign to parameters from within function bodies, doing so before the parameter value is read is likely a bug.\nInstead, initial values of parameters should be, if not treated as read-only, then at least read before reassignment.\nNoncompliant Code Example\n\ndef foo(strings, param):\n    param = 1  # NonCompliant",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHDCPUVsqnQYobebje",
            "bug_name": "Remove or rework this redundant alternative.",
            "rule_key": "python:S5855",
            "severity": "MAJOR",
            "type": "BUG",
            "file_path": "source_bug/source_bug/code.py",
            "line": 35,
            "message": "Remove or rework this redundant alternative.",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:35:11+0000",
            "updated_at": "2025-08-20T10:46:47+0000",
            "rule_description": "If an alternative in a regular expression only matches things that are already matched by another alternative, that alternative is redundant and\nserves no purpose.\nIn the best case this means that the offending subpattern is merely redundant and should be removed. In the worst case itâ€™s a sign that this regex\ndoes not match what it was intended to match and should be reworked.\nNoncompliant Code Example\n\nr\"[ab]|a\"   # The \"|a\" is redundant because \"[ab]\" already matches \"a\"\nr\".*|a\"     # .* matches everything, so any other alternative is redundant\n\nCompliant Solution\n\nr\"[ab]\"\nr\".*\"",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHDCPUVsqnQYobebjf",
            "bug_name": "Was += meant instead?",
            "rule_key": "python:S2757",
            "severity": "MAJOR",
            "type": "BUG",
            "file_path": "source_bug/source_bug/code.py",
            "line": 41,
            "message": "Was += meant instead?",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:35:11+0000",
            "updated_at": "2025-08-20T10:46:47+0000",
            "rule_description": "The use of operators pairs ( =+ or =-) where the reversed, single operator was meant (+= or -=)\nwill run fine, but not produce the expected results.\nThis rule raises an issue when =+ or =- is used without any spacing between the two operators and when there is at least\none whitespace character after.\nNoncompliant Code Example\n\ntarget = -5\nnum = 3\n\ntarget =- num  # Noncompliant; target = -3. Is that really what's meant?\ntarget =+ num # Noncompliant; target = 3\n\nCompliant Solution\n\ntarget = -5\nnum = 3\n\ntarget = -num  # Compliant; intent to assign inverse value of num is clear\ntarget += num",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHDCPUVsqnQYobebjg",
            "bug_name": "Correct one of the identical sub-expressions on both sides of operator \"==\".",
            "rule_key": "python:S1764",
            "severity": "MAJOR",
            "type": "BUG",
            "file_path": "source_bug/source_bug/code.py",
            "line": 54,
            "message": "Correct one of the identical sub-expressions on both sides of operator \"==\".",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:35:11+0000",
            "updated_at": "2025-08-20T10:46:47+0000",
            "rule_description": "Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.\nNote that this rule will raise issues on a == a and a != a expressions which are sometime used to detect NaN\nvalues. It is recommended to use instead math.isnan or an equivalent\nfunction. This will improve code readability.\nNoncompliant Code Example\n\nif a == a: # Noncompliant\n    work()\n\nif  a != a: # Noncompliant\n    work()\n\nif  a == b and a == b: # Noncompliant\n    work()\n\nif a == b or a == b: # Noncompliant\n    work()\n\nj = 5 / 5 # Noncompliant\nk = 5 - 5 # Noncompliant\n\nExceptions\nThe following are ignored:\n\n   The expression 1 &lt;&lt; 1 \n\nSee\n\n   S1656 - Implements a check on =.",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHDCPUVsqnQYobebjh",
            "bug_name": "Either remove or fill this block of code.",
            "rule_key": "python:S108",
            "severity": "MAJOR",
            "type": "CODE_SMELL",
            "file_path": "source_bug/source_bug/code.py",
            "line": 59,
            "message": "Either remove or fill this block of code.",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:35:11+0000",
            "updated_at": "2025-08-20T10:46:47+0000",
            "rule_description": "Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.\nNoncompliant Code Example\n\nfor i in range(3):\n    pass\n\nExceptions\nWhen a block contains a comment, this block is not considered to be empty.",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHC6ytVsqnQYobebeG",
            "bug_name": "Add logic to this except clause or eliminate it and rethrow the exception automatically.",
            "rule_key": "python:S2737",
            "severity": "MINOR",
            "type": "CODE_SMELL",
            "file_path": "source_bug/code.py",
            "line": 8,
            "message": "Add logic to this except clause or eliminate it and rethrow the exception automatically.",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:34:42+0000",
            "updated_at": "2025-08-20T10:46:13+0000",
            "rule_description": "An except clause that only rethrows the caught exception has the same effect as omitting the except altogether and\nletting it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads.\nSuch clauses should either be eliminated or populated with the appropriate logic.\nNoncompliant Code Example\n\na = {}\ntry:\n    a[5]\nexcept KeyError:\n    raise  # Noncompliant\n\nCompliant Solution\n\na = {}\ntry:\n    a[5]\nexcept KeyError as e:\n    logging.exception('error while accessing the dict')\n    raise e",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHC6ytVsqnQYobebeH",
            "bug_name": "Remove or correct this useless self-assignment.",
            "rule_key": "python:S1656",
            "severity": "MAJOR",
            "type": "BUG",
            "file_path": "source_bug/code.py",
            "line": 17,
            "message": "Remove or correct this useless self-assignment.",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:34:42+0000",
            "updated_at": "2025-08-20T10:46:13+0000",
            "rule_description": "There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.\nNoncompliant Code Example\n\nname = name\n\nCompliant Solution\n\nname = other.name",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHC6ytVsqnQYobebeI",
            "bug_name": "Remove or correct this useless self-assignment.",
            "rule_key": "python:S1656",
            "severity": "MAJOR",
            "type": "BUG",
            "file_path": "source_bug/code.py",
            "line": 24,
            "message": "Remove or correct this useless self-assignment.",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:34:42+0000",
            "updated_at": "2025-08-20T10:46:13+0000",
            "rule_description": "There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.\nNoncompliant Code Example\n\nname = name\n\nCompliant Solution\n\nname = other.name",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHC6ytVsqnQYobebeJ",
            "bug_name": "Was += meant instead?",
            "rule_key": "python:S2757",
            "severity": "MAJOR",
            "type": "BUG",
            "file_path": "source_bug/code.py",
            "line": 25,
            "message": "Was += meant instead?",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:34:42+0000",
            "updated_at": "2025-08-20T10:46:13+0000",
            "rule_description": "The use of operators pairs ( =+ or =-) where the reversed, single operator was meant (+= or -=)\nwill run fine, but not produce the expected results.\nThis rule raises an issue when =+ or =- is used without any spacing between the two operators and when there is at least\none whitespace character after.\nNoncompliant Code Example\n\ntarget = -5\nnum = 3\n\ntarget =- num  # Noncompliant; target = -3. Is that really what's meant?\ntarget =+ num # Noncompliant; target = 3\n\nCompliant Solution\n\ntarget = -5\nnum = 3\n\ntarget = -num  # Compliant; intent to assign inverse value of num is clear\ntarget += num",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHC6ytVsqnQYobebeK",
            "bug_name": "Introduce a new variable or use its initial value before reassigning 'n'.",
            "rule_key": "python:S1226",
            "severity": "MINOR",
            "type": "BUG",
            "file_path": "source_bug/code.py",
            "line": 29,
            "message": "Introduce a new variable or use its initial value before reassigning 'n'.",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:34:42+0000",
            "updated_at": "2025-08-20T10:46:13+0000",
            "rule_description": "While it is technically correct to assign to parameters from within function bodies, doing so before the parameter value is read is likely a bug.\nInstead, initial values of parameters should be, if not treated as read-only, then at least read before reassignment.\nNoncompliant Code Example\n\ndef foo(strings, param):\n    param = 1  # NonCompliant",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHC6ytVsqnQYobebeL",
            "bug_name": "Remove or rework this redundant alternative.",
            "rule_key": "python:S5855",
            "severity": "MAJOR",
            "type": "BUG",
            "file_path": "source_bug/code.py",
            "line": 35,
            "message": "Remove or rework this redundant alternative.",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:34:42+0000",
            "updated_at": "2025-08-20T10:46:13+0000",
            "rule_description": "If an alternative in a regular expression only matches things that are already matched by another alternative, that alternative is redundant and\nserves no purpose.\nIn the best case this means that the offending subpattern is merely redundant and should be removed. In the worst case itâ€™s a sign that this regex\ndoes not match what it was intended to match and should be reworked.\nNoncompliant Code Example\n\nr\"[ab]|a\"   # The \"|a\" is redundant because \"[ab]\" already matches \"a\"\nr\".*|a\"     # .* matches everything, so any other alternative is redundant\n\nCompliant Solution\n\nr\"[ab]\"\nr\".*\"",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHC6ytVsqnQYobebeM",
            "bug_name": "Was += meant instead?",
            "rule_key": "python:S2757",
            "severity": "MAJOR",
            "type": "BUG",
            "file_path": "source_bug/code.py",
            "line": 41,
            "message": "Was += meant instead?",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:34:42+0000",
            "updated_at": "2025-08-20T10:46:13+0000",
            "rule_description": "The use of operators pairs ( =+ or =-) where the reversed, single operator was meant (+= or -=)\nwill run fine, but not produce the expected results.\nThis rule raises an issue when =+ or =- is used without any spacing between the two operators and when there is at least\none whitespace character after.\nNoncompliant Code Example\n\ntarget = -5\nnum = 3\n\ntarget =- num  # Noncompliant; target = -3. Is that really what's meant?\ntarget =+ num # Noncompliant; target = 3\n\nCompliant Solution\n\ntarget = -5\nnum = 3\n\ntarget = -num  # Compliant; intent to assign inverse value of num is clear\ntarget += num",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHC6ytVsqnQYobebeN",
            "bug_name": "Correct one of the identical sub-expressions on both sides of operator \"==\".",
            "rule_key": "python:S1764",
            "severity": "MAJOR",
            "type": "BUG",
            "file_path": "source_bug/code.py",
            "line": 54,
            "message": "Correct one of the identical sub-expressions on both sides of operator \"==\".",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:34:42+0000",
            "updated_at": "2025-08-20T10:46:13+0000",
            "rule_description": "Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.\nNote that this rule will raise issues on a == a and a != a expressions which are sometime used to detect NaN\nvalues. It is recommended to use instead math.isnan or an equivalent\nfunction. This will improve code readability.\nNoncompliant Code Example\n\nif a == a: # Noncompliant\n    work()\n\nif  a != a: # Noncompliant\n    work()\n\nif  a == b and a == b: # Noncompliant\n    work()\n\nif a == b or a == b: # Noncompliant\n    work()\n\nj = 5 / 5 # Noncompliant\nk = 5 - 5 # Noncompliant\n\nExceptions\nThe following are ignored:\n\n   The expression 1 &lt;&lt; 1 \n\nSee\n\n   S1656 - Implements a check on =.",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHC6ytVsqnQYobebeO",
            "bug_name": "Either remove or fill this block of code.",
            "rule_key": "python:S108",
            "severity": "MAJOR",
            "type": "CODE_SMELL",
            "file_path": "source_bug/code.py",
            "line": 59,
            "message": "Either remove or fill this block of code.",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:34:42+0000",
            "updated_at": "2025-08-20T10:46:13+0000",
            "rule_description": "Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.\nNoncompliant Code Example\n\nfor i in range(3):\n    pass\n\nExceptions\nWhen a block contains a comment, this block is not considered to be empty.",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHC0VQVsqnQYobebbo",
            "bug_name": "Add logic to this except clause or eliminate it and rethrow the exception automatically.",
            "rule_key": "python:S2737",
            "severity": "MINOR",
            "type": "CODE_SMELL",
            "file_path": "code.py",
            "line": 8,
            "message": "Add logic to this except clause or eliminate it and rethrow the exception automatically.",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:34:15+0000",
            "updated_at": "2025-08-20T10:34:15+0000",
            "rule_description": "An except clause that only rethrows the caught exception has the same effect as omitting the except altogether and\nletting it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads.\nSuch clauses should either be eliminated or populated with the appropriate logic.\nNoncompliant Code Example\n\na = {}\ntry:\n    a[5]\nexcept KeyError:\n    raise  # Noncompliant\n\nCompliant Solution\n\na = {}\ntry:\n    a[5]\nexcept KeyError as e:\n    logging.exception('error while accessing the dict')\n    raise e",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHC0VQVsqnQYobebbp",
            "bug_name": "Remove or correct this useless self-assignment.",
            "rule_key": "python:S1656",
            "severity": "MAJOR",
            "type": "BUG",
            "file_path": "code.py",
            "line": 17,
            "message": "Remove or correct this useless self-assignment.",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:34:15+0000",
            "updated_at": "2025-08-20T10:34:15+0000",
            "rule_description": "There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.\nNoncompliant Code Example\n\nname = name\n\nCompliant Solution\n\nname = other.name",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHC0VQVsqnQYobebbq",
            "bug_name": "Remove or correct this useless self-assignment.",
            "rule_key": "python:S1656",
            "severity": "MAJOR",
            "type": "BUG",
            "file_path": "code.py",
            "line": 24,
            "message": "Remove or correct this useless self-assignment.",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:34:15+0000",
            "updated_at": "2025-08-20T10:34:15+0000",
            "rule_description": "There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.\nNoncompliant Code Example\n\nname = name\n\nCompliant Solution\n\nname = other.name",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHC0VQVsqnQYobebbr",
            "bug_name": "Was += meant instead?",
            "rule_key": "python:S2757",
            "severity": "MAJOR",
            "type": "BUG",
            "file_path": "code.py",
            "line": 25,
            "message": "Was += meant instead?",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:34:15+0000",
            "updated_at": "2025-08-20T10:34:15+0000",
            "rule_description": "The use of operators pairs ( =+ or =-) where the reversed, single operator was meant (+= or -=)\nwill run fine, but not produce the expected results.\nThis rule raises an issue when =+ or =- is used without any spacing between the two operators and when there is at least\none whitespace character after.\nNoncompliant Code Example\n\ntarget = -5\nnum = 3\n\ntarget =- num  # Noncompliant; target = -3. Is that really what's meant?\ntarget =+ num # Noncompliant; target = 3\n\nCompliant Solution\n\ntarget = -5\nnum = 3\n\ntarget = -num  # Compliant; intent to assign inverse value of num is clear\ntarget += num",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHC0VQVsqnQYobebbs",
            "bug_name": "Introduce a new variable or use its initial value before reassigning 'n'.",
            "rule_key": "python:S1226",
            "severity": "MINOR",
            "type": "BUG",
            "file_path": "code.py",
            "line": 29,
            "message": "Introduce a new variable or use its initial value before reassigning 'n'.",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:34:15+0000",
            "updated_at": "2025-08-20T10:34:15+0000",
            "rule_description": "While it is technically correct to assign to parameters from within function bodies, doing so before the parameter value is read is likely a bug.\nInstead, initial values of parameters should be, if not treated as read-only, then at least read before reassignment.\nNoncompliant Code Example\n\ndef foo(strings, param):\n    param = 1  # NonCompliant",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHC0VQVsqnQYobebbt",
            "bug_name": "Remove or rework this redundant alternative.",
            "rule_key": "python:S5855",
            "severity": "MAJOR",
            "type": "BUG",
            "file_path": "code.py",
            "line": 35,
            "message": "Remove or rework this redundant alternative.",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:34:15+0000",
            "updated_at": "2025-08-20T10:34:15+0000",
            "rule_description": "If an alternative in a regular expression only matches things that are already matched by another alternative, that alternative is redundant and\nserves no purpose.\nIn the best case this means that the offending subpattern is merely redundant and should be removed. In the worst case itâ€™s a sign that this regex\ndoes not match what it was intended to match and should be reworked.\nNoncompliant Code Example\n\nr\"[ab]|a\"   # The \"|a\" is redundant because \"[ab]\" already matches \"a\"\nr\".*|a\"     # .* matches everything, so any other alternative is redundant\n\nCompliant Solution\n\nr\"[ab]\"\nr\".*\"",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHC0VQVsqnQYobebbu",
            "bug_name": "Was += meant instead?",
            "rule_key": "python:S2757",
            "severity": "MAJOR",
            "type": "BUG",
            "file_path": "code.py",
            "line": 41,
            "message": "Was += meant instead?",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:34:15+0000",
            "updated_at": "2025-08-20T10:34:15+0000",
            "rule_description": "The use of operators pairs ( =+ or =-) where the reversed, single operator was meant (+= or -=)\nwill run fine, but not produce the expected results.\nThis rule raises an issue when =+ or =- is used without any spacing between the two operators and when there is at least\none whitespace character after.\nNoncompliant Code Example\n\ntarget = -5\nnum = 3\n\ntarget =- num  # Noncompliant; target = -3. Is that really what's meant?\ntarget =+ num # Noncompliant; target = 3\n\nCompliant Solution\n\ntarget = -5\nnum = 3\n\ntarget = -num  # Compliant; intent to assign inverse value of num is clear\ntarget += num",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHC0VQVsqnQYobebbv",
            "bug_name": "Correct one of the identical sub-expressions on both sides of operator \"==\".",
            "rule_key": "python:S1764",
            "severity": "MAJOR",
            "type": "BUG",
            "file_path": "code.py",
            "line": 54,
            "message": "Correct one of the identical sub-expressions on both sides of operator \"==\".",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:34:15+0000",
            "updated_at": "2025-08-20T10:34:15+0000",
            "rule_description": "Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.\nNote that this rule will raise issues on a == a and a != a expressions which are sometime used to detect NaN\nvalues. It is recommended to use instead math.isnan or an equivalent\nfunction. This will improve code readability.\nNoncompliant Code Example\n\nif a == a: # Noncompliant\n    work()\n\nif  a != a: # Noncompliant\n    work()\n\nif  a == b and a == b: # Noncompliant\n    work()\n\nif a == b or a == b: # Noncompliant\n    work()\n\nj = 5 / 5 # Noncompliant\nk = 5 - 5 # Noncompliant\n\nExceptions\nThe following are ignored:\n\n   The expression 1 &lt;&lt; 1 \n\nSee\n\n   S1656 - Implements a check on =.",
            "code_excerpt": null
        },
        {
            "bug_id": "AZjHC0VQVsqnQYobebbw",
            "bug_name": "Either remove or fill this block of code.",
            "rule_key": "python:S108",
            "severity": "MAJOR",
            "type": "CODE_SMELL",
            "file_path": "code.py",
            "line": 59,
            "message": "Either remove or fill this block of code.",
            "status": "OPEN",
            "resolution": null,
            "created_at": "2025-08-20T10:34:15+0000",
            "updated_at": "2025-08-20T10:34:15+0000",
            "rule_description": "Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.\nNoncompliant Code Example\n\nfor i in range(3):\n    pass\n\nExceptions\nWhen a block contains a comment, this block is not considered to be empty.",
            "code_excerpt": null
        }
    ]
}
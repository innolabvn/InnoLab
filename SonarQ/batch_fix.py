#!/usr/bin/env python3
"""
Batch Fix Script - Auto fix and save all code files in a directory
Usage: python batch_fix.py [directory_path]
"""

import google.generativeai as genai
import os
import sys
import glob
from pathlib import Path
from dotenv import load_dotenv

def setup_gemini():
    """Setup Gemini API"""
    load_dotenv()
    api_key = os.getenv('GEMINI_API_KEY')
    if not api_key:
        print("‚ùå L·ªói: GEMINI_API_KEY kh√¥ng t√¨m th·∫•y trong file .env")
        sys.exit(1)
    
    genai.configure(api_key=api_key)
    return genai.GenerativeModel('gemini-1.5-flash')

def get_code_files(directory):
    """Get all code files from a directory"""
    code_extensions = ['.py', '.js', '.ts', '.java', '.cpp', '.c', '.cs', '.php', '.rb', '.go', '.rs', '.swift', '.kt']
    
    code_files = []
    for ext in code_extensions:
        pattern = os.path.join(directory, f"**/*{ext}")
        code_files.extend(glob.glob(pattern, recursive=True))
    
    return code_files

def fix_code_file(model, file_path):
    """Fix a single code file"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            original_code = f.read()
        
        prompt = f"""
H√£y s·ª≠a t·∫•t c·∫£ c√°c v·∫•n ƒë·ªÅ trong code Python n√†y:

```python
{original_code}
```

Vui l√≤ng:
1. S·ª≠a c√°c l·ªói syntax
2. S·ª≠a c√°c logic error
3. C·∫£i thi·ªán code quality
4. Th√™m error handling n·∫øu c·∫ßn
5. T·ªëi ∆∞u h√≥a performance
6. Th√™m type hints n·∫øu thi·∫øu
7. Th√™m docstring cho c√°c function

Ch·ªâ tr·∫£ v·ªÅ code Python ƒë√£ s·ª≠a, kh√¥ng c·∫ßn markdown formatting hay gi·∫£i th√≠ch.
"""
        
        response = model.generate_content(prompt)
        fixed_code = response.text.strip()
        
        # Remove markdown formatting if present
        if fixed_code.startswith('```python'):
            fixed_code = fixed_code[9:]
        if fixed_code.startswith('```'):
            fixed_code = fixed_code[3:]
        if fixed_code.endswith('```'):
            fixed_code = fixed_code[:-3]
        
        return fixed_code.strip()
        
    except Exception as e:
        return f"# Error fixing file: {str(e)}\n{original_code}"

def main():
    if len(sys.argv) != 2:
        print("ü§ñ Batch Fix Script")
        print("C√°ch s·ª≠ d·ª•ng: python batch_fix.py [th∆∞_m·ª•c]")
        print("V√≠ d·ª•: python batch_fix.py ./source_bug")
        return
    
    directory = sys.argv[1]
    
    if not os.path.isdir(directory):
        print(f"‚ùå L·ªói: {directory} kh√¥ng ph·∫£i l√† th∆∞ m·ª•c h·ª£p l·ªá")
        return
    
    # Setup Gemini
    model = setup_gemini()
    
    # Get all code files
    code_files = get_code_files(directory)
    
    if not code_files:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file code n√†o trong: {directory}")
        return
    
    print(f"üîß Batch Fix Script")
    print(f"üìÅ Th∆∞ m·ª•c: {directory}")
    print(f"üîç T√¨m th·∫•y {len(code_files)} file code")
    print("=" * 50)
    
    # Create fixed directory
    fixed_dir = os.path.join(directory, "fixed")
    os.makedirs(fixed_dir, exist_ok=True)
    
    success_count = 0
    error_count = 0
    
    for i, file_path in enumerate(code_files, 1):
        relative_path = os.path.relpath(file_path, directory)
        print(f"\n[{i}/{len(code_files)}] üîß ƒêang s·ª≠a: {relative_path}")
        
        try:
            # Fix the code
            fixed_code = fix_code_file(model, file_path)
            
            # Create output path
            fixed_file_path = os.path.join(fixed_dir, relative_path)
            fixed_file_dir = os.path.dirname(fixed_file_path)
            os.makedirs(fixed_file_dir, exist_ok=True)
            
            # Save fixed code
            with open(fixed_file_path, 'w', encoding='utf-8') as f:
                f.write(fixed_code)
            
            print(f"‚úÖ ƒê√£ s·ª≠a v√† l∆∞u: {fixed_file_path}")
            success_count += 1
            
        except Exception as e:
            print(f"‚ùå L·ªói khi x·ª≠ l√Ω {relative_path}: {str(e)}")
            error_count += 1
    
    print("\n" + "=" * 50)
    print(f"üéâ Ho√†n th√†nh!")
    print(f"‚úÖ Th√†nh c√¥ng: {success_count} file")
    print(f"‚ùå L·ªói: {error_count} file")
    print(f"üìÅ Code ƒë√£ s·ª≠a ƒë∆∞·ª£c l∆∞u trong: {fixed_dir}")

if __name__ == "__main__":
    main()
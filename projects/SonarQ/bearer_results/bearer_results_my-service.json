{
  "critical": [
    {
      "cwe_ids": ["798"],
      "id": "javascript_express_hardcoded_secret",
      "title": "Usage of hard-coded secret",
      "description": "## Description\n\nStoring secrets directly in code compromises security. It's safer to use environment variables or a secret management system.\n\n## Remediations\n\n- **Do not** store plaintext secrets in your code. This makes your application vulnerable to unauthorized access if the codebase is exposed.\n  ```javascript\n  app.use(\n    session({\n      secret: \"shh-my-secret\",\n      name: \"my-custom-session-name\",\n    })\n  )\n  ```\n- **Do** use environment variables to store secrets. This method keeps sensitive information out of your codebase.\n  ```javascript\n  app.use(\n    session({\n      secret: process.env.SECRET,\n      name: \"my-custom-session-name\",\n    })\n  )\n  ```\n- **Do** use a secret management system or a key management service (KMS) with encryption for enhanced security. These services provide secure storage and management of secrets, reducing the risk of exposure.\n\n## References\n\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)\n- [AWS Key Management Service](https://aws.amazon.com/kms/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_hardcoded_secret",
      "line_number": 56,
      "full_filename": "/scan/lib/insecurity.ts",
      "filename": "lib/insecurity.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": { "start": 41, "end": 108 }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": { "start": 41, "end": 108 },
        "content": ""
      },
      "parent_line_number": 56,
      "fingerprint": "c095a5cc1948bae67c38b5c5d85eb4f4_0",
      "old_fingerprint": "d964913ceeea061b9086a9581935c73d_0",
      "code_extract": "export const authorize = (user = {}) =\u003e jwt.sign(user, privateKey, { expiresIn: '6h', algorithm: 'RS256' })"
    },
    {
      "cwe_ids": ["943"],
      "id": "javascript_express_nosql_injection",
      "title": "Unsanitized input in NoSQL query",
      "description": "## Description\n\nUsing unsanitized data in NoSQL queries exposes your application to NoSQL injection attacks. This vulnerability arises when user input, request data, or any externally influenced data is directly passed into a NoSQL query function without proper sanitization.\n\n## Remediations\n\n- **Do not** include raw, unsanitized user input in NoSQL queries. This practice can lead to NoSQL injection vulnerabilities.\n  ```javascript\n    const User = require(\"../models/user\")\n    const newUser = new User(req.body); // unsafe\n  ```\n- **Do** sanitize all input data before using it in NoSQL queries. Ensuring data is properly sanitized can prevent NoSQL injection attacks.\n  ```javascript\n    const User = require(\"../models/user\");\n\n    username = req.params.username;\n    User.findOne({ name: username.toString() });\n  ```\n\n## References\n\n- [OWASP NoSQL injection explained](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_nosql_injection",
      "line_number": 12,
      "full_filename": "/scan/data/static/codefixes/forgedReviewChallenge_1.ts",
      "filename": "data/static/codefixes/forgedReviewChallenge_1.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 12, "end": 17, "column": { "start": 5, "end": 6 } },
      "sink": {
        "start": 12,
        "end": 17,
        "column": { "start": 5, "end": 6 },
        "content": ""
      },
      "parent_line_number": 12,
      "fingerprint": "ab0a8c00e39684e53135d909af9ce84d_0",
      "old_fingerprint": "2d99ad58d21c38bc985072b0759a148d_0",
      "code_extract": "    db.reviewsCollection.update(\n      // FIX: Prevent NoSQL injection by ensuring _id is a valid ObjectId.\n      { _id: db.ObjectId(req.body.id) },\n      { $set: { message: req.body.message, author: user.data.email } },\n      { multi: true }\n    ).then("
    },
    {
      "cwe_ids": ["943"],
      "id": "javascript_express_nosql_injection",
      "title": "Unsanitized input in NoSQL query",
      "description": "## Description\n\nUsing unsanitized data in NoSQL queries exposes your application to NoSQL injection attacks. This vulnerability arises when user input, request data, or any externally influenced data is directly passed into a NoSQL query function without proper sanitization.\n\n## Remediations\n\n- **Do not** include raw, unsanitized user input in NoSQL queries. This practice can lead to NoSQL injection vulnerabilities.\n  ```javascript\n    const User = require(\"../models/user\")\n    const newUser = new User(req.body); // unsafe\n  ```\n- **Do** sanitize all input data before using it in NoSQL queries. Ensuring data is properly sanitized can prevent NoSQL injection attacks.\n  ```javascript\n    const User = require(\"../models/user\");\n\n    username = req.params.username;\n    User.findOne({ name: username.toString() });\n  ```\n\n## References\n\n- [OWASP NoSQL injection explained](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_nosql_injection",
      "line_number": 18,
      "full_filename": "/scan/data/static/codefixes/noSqlReviewsChallenge_1.ts",
      "filename": "data/static/codefixes/noSqlReviewsChallenge_1.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 18, "end": 21, "column": { "start": 5, "end": 6 } },
      "sink": {
        "start": 18,
        "end": 21,
        "column": { "start": 5, "end": 6 },
        "content": ""
      },
      "parent_line_number": 18,
      "fingerprint": "57757d4c4159d0134d1c231825c30ecd_0",
      "old_fingerprint": "ea1b0d48d9d5731793d582db107d5571_2",
      "code_extract": "    db.reviewsCollection.update(\n      { _id: req.body.id },\n      { $set: { message: req.body.message } }\n    ).then("
    },
    {
      "cwe_ids": ["943"],
      "id": "javascript_express_nosql_injection",
      "title": "Unsanitized input in NoSQL query",
      "description": "## Description\n\nUsing unsanitized data in NoSQL queries exposes your application to NoSQL injection attacks. This vulnerability arises when user input, request data, or any externally influenced data is directly passed into a NoSQL query function without proper sanitization.\n\n## Remediations\n\n- **Do not** include raw, unsanitized user input in NoSQL queries. This practice can lead to NoSQL injection vulnerabilities.\n  ```javascript\n    const User = require(\"../models/user\")\n    const newUser = new User(req.body); // unsafe\n  ```\n- **Do** sanitize all input data before using it in NoSQL queries. Ensuring data is properly sanitized can prevent NoSQL injection attacks.\n  ```javascript\n    const User = require(\"../models/user\");\n\n    username = req.params.username;\n    User.findOne({ name: username.toString() });\n  ```\n\n## References\n\n- [OWASP NoSQL injection explained](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_nosql_injection",
      "line_number": 17,
      "full_filename": "/scan/data/static/codefixes/noSqlReviewsChallenge_2.ts",
      "filename": "data/static/codefixes/noSqlReviewsChallenge_2.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 17, "end": 17, "column": { "start": 5, "end": 52 } },
      "sink": {
        "start": 17,
        "end": 17,
        "column": { "start": 5, "end": 52 },
        "content": ""
      },
      "parent_line_number": 17,
      "fingerprint": "941a91a79e18360b0562a36b33949f1c_0",
      "old_fingerprint": "6b03bd8e4efc1349a981b44ec3f2096c_1",
      "code_extract": "    db.reviewsCollection.find({ _id: req.body.id }).then((reviews: Array\u003c{ author: any }\u003e) =\u003e {"
    },
    {
      "cwe_ids": ["943"],
      "id": "javascript_express_nosql_injection",
      "title": "Unsanitized input in NoSQL query",
      "description": "## Description\n\nUsing unsanitized data in NoSQL queries exposes your application to NoSQL injection attacks. This vulnerability arises when user input, request data, or any externally influenced data is directly passed into a NoSQL query function without proper sanitization.\n\n## Remediations\n\n- **Do not** include raw, unsanitized user input in NoSQL queries. This practice can lead to NoSQL injection vulnerabilities.\n  ```javascript\n    const User = require(\"../models/user\")\n    const newUser = new User(req.body); // unsafe\n  ```\n- **Do** sanitize all input data before using it in NoSQL queries. Ensuring data is properly sanitized can prevent NoSQL injection attacks.\n  ```javascript\n    const User = require(\"../models/user\");\n\n    username = req.params.username;\n    User.findOne({ name: username.toString() });\n  ```\n\n## References\n\n- [OWASP NoSQL injection explained](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_nosql_injection",
      "line_number": 24,
      "full_filename": "/scan/data/static/codefixes/noSqlReviewsChallenge_2.ts",
      "filename": "data/static/codefixes/noSqlReviewsChallenge_2.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 24, "end": 27, "column": { "start": 7, "end": 8 } },
      "sink": {
        "start": 24,
        "end": 27,
        "column": { "start": 7, "end": 8 },
        "content": ""
      },
      "parent_line_number": 24,
      "fingerprint": "941a91a79e18360b0562a36b33949f1c_1",
      "old_fingerprint": "6b03bd8e4efc1349a981b44ec3f2096c_3",
      "code_extract": "      db.reviewsCollection.update(\n        { _id: req.body.id },\n        { $set: { message: req.body.message } }\n      ).then("
    },
    {
      "cwe_ids": ["943"],
      "id": "javascript_express_nosql_injection",
      "title": "Unsanitized input in NoSQL query",
      "description": "## Description\n\nUsing unsanitized data in NoSQL queries exposes your application to NoSQL injection attacks. This vulnerability arises when user input, request data, or any externally influenced data is directly passed into a NoSQL query function without proper sanitization.\n\n## Remediations\n\n- **Do not** include raw, unsanitized user input in NoSQL queries. This practice can lead to NoSQL injection vulnerabilities.\n  ```javascript\n    const User = require(\"../models/user\")\n    const newUser = new User(req.body); // unsafe\n  ```\n- **Do** sanitize all input data before using it in NoSQL queries. Ensuring data is properly sanitized can prevent NoSQL injection attacks.\n  ```javascript\n    const User = require(\"../models/user\");\n\n    username = req.params.username;\n    User.findOne({ name: username.toString() });\n  ```\n\n## References\n\n- [OWASP NoSQL injection explained](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_nosql_injection",
      "line_number": 64,
      "full_filename": "/scan/data/static/codefixes/registerAdminChallenge_3_correct.ts",
      "filename": "data/static/codefixes/registerAdminChallenge_3_correct.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 64, "end": 64, "column": { "start": 9, "end": 60 } },
      "sink": {
        "start": 64,
        "end": 64,
        "column": { "start": 9, "end": 60 },
        "content": ""
      },
      "parent_line_number": 64,
      "fingerprint": "b3fb4a4d33ef0e03e393a6720c05522c_0",
      "old_fingerprint": "ef9b8b0394f17e5ce50dd887eea5e0c6_4",
      "code_extract": "        WalletModel.create({ UserId: context.instance.id }).catch((err: unknown) =\u003e {"
    },
    {
      "cwe_ids": ["95"],
      "id": "javascript_lang_eval_user_input",
      "title": "Unsanitized user input in 'eval' type function",
      "description": "## Description\n\nAllowing user input to directly influence the behavior of `eval` and similar functions like `setTimeout` poses a significant security risk, potentially leading to remote code execution attacks. This vulnerability stems from the dynamic execution of code, which can be maliciously crafted by an attacker.\n\n## Remediations\n\n- **Do not** use `eval` or similar code execution functions directly with user input. This approach can make your application vulnerable to attacks.\n  ```javascript\n  eval(userInput); // unsafe\n  ```\n- **Do** use static, hardcoded values when working with dynamic code execution methods. This method ensures that only predefined operations are performed, reducing the risk of executing malicious code.\n  ```javascript\n    let myFunc = \"(a, b) =\u003e a + b\";\n    if (req.params[\"single_item\"]) {\n      myFunc = \"(a) =\u003e a\";\n    }\n  ```\n- **Do** consider using compiled functions instead of dynamically compiling code with user input. This practice allows for safer execution of dynamic operations by predefining the code to be executed.\n- **Do** enable JavaScript's strict mode in your code. This mode helps to catch common coding bloopers, prevents unsafe actions, and limits certain features that can make your code more secure.\n  ```javascript\n  \"use strict\";\n  ```\n\n## References\n\n- [MDN JavaScript strict mode reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_eval_user_input",
      "line_number": 22,
      "full_filename": "/scan/routes/b2bOrder.ts",
      "filename": "routes/b2bOrder.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 22, "end": 22, "column": { "start": 9, "end": 34 } },
      "sink": {
        "start": 22,
        "end": 22,
        "column": { "start": 9, "end": 34 },
        "content": ""
      },
      "parent_line_number": 22,
      "fingerprint": "07e54b106f46e8d2158d7cc39518dab0_0",
      "old_fingerprint": "3dde275a7b862f737dba4033f9416ea8_0",
      "code_extract": "        vm.createContext(sandbox)"
    },
    {
      "cwe_ids": ["95"],
      "id": "javascript_lang_eval_user_input",
      "title": "Unsanitized user input in 'eval' type function",
      "description": "## Description\n\nAllowing user input to directly influence the behavior of `eval` and similar functions like `setTimeout` poses a significant security risk, potentially leading to remote code execution attacks. This vulnerability stems from the dynamic execution of code, which can be maliciously crafted by an attacker.\n\n## Remediations\n\n- **Do not** use `eval` or similar code execution functions directly with user input. This approach can make your application vulnerable to attacks.\n  ```javascript\n  eval(userInput); // unsafe\n  ```\n- **Do** use static, hardcoded values when working with dynamic code execution methods. This method ensures that only predefined operations are performed, reducing the risk of executing malicious code.\n  ```javascript\n    let myFunc = \"(a, b) =\u003e a + b\";\n    if (req.params[\"single_item\"]) {\n      myFunc = \"(a) =\u003e a\";\n    }\n  ```\n- **Do** consider using compiled functions instead of dynamically compiling code with user input. This practice allows for safer execution of dynamic operations by predefining the code to be executed.\n- **Do** enable JavaScript's strict mode in your code. This mode helps to catch common coding bloopers, prevents unsafe actions, and limits certain features that can make your code more secure.\n  ```javascript\n  \"use strict\";\n  ```\n\n## References\n\n- [MDN JavaScript strict mode reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_eval_user_input",
      "line_number": 23,
      "full_filename": "/scan/routes/b2bOrder.ts",
      "filename": "routes/b2bOrder.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 23, "end": 23, "column": { "start": 9, "end": 80 } },
      "sink": {
        "start": 23,
        "end": 23,
        "column": { "start": 9, "end": 80 },
        "content": ""
      },
      "parent_line_number": 23,
      "fingerprint": "07e54b106f46e8d2158d7cc39518dab0_1",
      "old_fingerprint": "3dde275a7b862f737dba4033f9416ea8_1",
      "code_extract": "        vm.runInContext('safeEval(orderLinesData)', sandbox, { timeout: 2000 })"
    },
    {
      "cwe_ids": ["95"],
      "id": "javascript_lang_eval_user_input",
      "title": "Unsanitized user input in 'eval' type function",
      "description": "## Description\n\nAllowing user input to directly influence the behavior of `eval` and similar functions like `setTimeout` poses a significant security risk, potentially leading to remote code execution attacks. This vulnerability stems from the dynamic execution of code, which can be maliciously crafted by an attacker.\n\n## Remediations\n\n- **Do not** use `eval` or similar code execution functions directly with user input. This approach can make your application vulnerable to attacks.\n  ```javascript\n  eval(userInput); // unsafe\n  ```\n- **Do** use static, hardcoded values when working with dynamic code execution methods. This method ensures that only predefined operations are performed, reducing the risk of executing malicious code.\n  ```javascript\n    let myFunc = \"(a, b) =\u003e a + b\";\n    if (req.params[\"single_item\"]) {\n      myFunc = \"(a) =\u003e a\";\n    }\n  ```\n- **Do** consider using compiled functions instead of dynamically compiling code with user input. This practice allows for safer execution of dynamic operations by predefining the code to be executed.\n- **Do** enable JavaScript's strict mode in your code. This mode helps to catch common coding bloopers, prevents unsafe actions, and limits certain features that can make your code more secure.\n  ```javascript\n  \"use strict\";\n  ```\n\n## References\n\n- [MDN JavaScript strict mode reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_eval_user_input",
      "line_number": 62,
      "full_filename": "/scan/routes/userProfile.ts",
      "filename": "routes/userProfile.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 62,
        "end": 62,
        "column": { "start": 20, "end": 30 }
      },
      "sink": {
        "start": 62,
        "end": 62,
        "column": { "start": 20, "end": 30 },
        "content": ""
      },
      "parent_line_number": 62,
      "fingerprint": "2e7366cb9fbd9efb99c52905ffd6e3e7_0",
      "old_fingerprint": "53f3e1f08a915a13d4ad941aeed1f3d6_2",
      "code_extract": "        username = eval(code) // eslint-disable-line no-eval"
    },
    {
      "cwe_ids": ["798"],
      "id": "javascript_lang_hardcoded_secret",
      "title": "Usage of hard-coded secret",
      "description": "## Description\n\nStoring secrets directly in your code is a security risk. Instead, opt for environment variables or a secret management system to safeguard your secrets.\n\n## Remediations\n\n- **Do not** store plaintext secrets in your code. This exposes sensitive information to unnecessary risk.\n  ```javascript\n    passport.use(new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'my-id-123',\n        clientSecret: 'shh-my-secret',\n        callbackURL: 'http://localhost:3000/auth/example/callback'\n      },\n      function(accessToken, refreshToken, profile, cb) {\n        User.findOrCreate({ exampleId: profile.id }, function (err, user) {\n          return cb(err, user);\n        });\n      }\n    ));\n  ```\n- **Do** use environment variables to store sensitive information such as secrets. This method keeps credentials out of your codebase and makes them easier to manage securely.\n- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.\n\n## References\n\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)\n- [AWS Key Management Service](https://aws.amazon.com/kms/)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_hardcoded_secret",
      "line_number": 44,
      "full_filename": "/scan/lib/insecurity.ts",
      "filename": "lib/insecurity.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 44,
        "end": 44,
        "column": { "start": 39, "end": 94 }
      },
      "sink": {
        "start": 44,
        "end": 44,
        "column": { "start": 39, "end": 94 },
        "content": ""
      },
      "parent_line_number": 44,
      "fingerprint": "d699b64784f6ca1135369f86e4b64ecb_0",
      "old_fingerprint": "19ad8f4557b4ea2007e8329576bb778f_0",
      "code_extract": "export const hmac = (data: string) =\u003e crypto.createHmac('sha256', 'pa4qacea4VK9t9nGv7yZtwmj').update(data).digest('hex')"
    },
    {
      "cwe_ids": ["798"],
      "id": "javascript_lang_hardcoded_secret",
      "title": "Usage of hard-coded secret",
      "description": "## Description\n\nStoring secrets directly in your code is a security risk. Instead, opt for environment variables or a secret management system to safeguard your secrets.\n\n## Remediations\n\n- **Do not** store plaintext secrets in your code. This exposes sensitive information to unnecessary risk.\n  ```javascript\n    passport.use(new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'my-id-123',\n        clientSecret: 'shh-my-secret',\n        callbackURL: 'http://localhost:3000/auth/example/callback'\n      },\n      function(accessToken, refreshToken, profile, cb) {\n        User.findOrCreate({ exampleId: profile.id }, function (err, user) {\n          return cb(err, user);\n        });\n      }\n    ));\n  ```\n- **Do** use environment variables to store sensitive information such as secrets. This method keeps credentials out of your codebase and makes them easier to manage securely.\n- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.\n\n## References\n\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)\n- [AWS Key Management Service](https://aws.amazon.com/kms/)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_hardcoded_secret",
      "line_number": 54,
      "full_filename": "/scan/lib/insecurity.ts",
      "filename": "lib/insecurity.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": { "start": 49, "end": 66 }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": { "start": 49, "end": 66 },
        "content": ""
      },
      "parent_line_number": 54,
      "fingerprint": "d699b64784f6ca1135369f86e4b64ecb_1",
      "old_fingerprint": "19ad8f4557b4ea2007e8329576bb778f_1",
      "code_extract": "export const isAuthorized = () =\u003e expressJwt(({ secret: publicKey }) as any)"
    },
    {
      "cwe_ids": ["798"],
      "id": "javascript_lang_hardcoded_secret",
      "title": "Usage of hard-coded secret",
      "description": "## Description\n\nStoring secrets directly in your code is a security risk. Instead, opt for environment variables or a secret management system to safeguard your secrets.\n\n## Remediations\n\n- **Do not** store plaintext secrets in your code. This exposes sensitive information to unnecessary risk.\n  ```javascript\n    passport.use(new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'my-id-123',\n        clientSecret: 'shh-my-secret',\n        callbackURL: 'http://localhost:3000/auth/example/callback'\n      },\n      function(accessToken, refreshToken, profile, cb) {\n        User.findOrCreate({ exampleId: profile.id }, function (err, user) {\n          return cb(err, user);\n        });\n      }\n    ));\n  ```\n- **Do** use environment variables to store sensitive information such as secrets. This method keeps credentials out of your codebase and makes them easier to manage securely.\n- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.\n\n## References\n\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)\n- [AWS Key Management Service](https://aws.amazon.com/kms/)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_hardcoded_secret",
      "line_number": 152,
      "full_filename": "/scan/lib/insecurity.ts",
      "filename": "lib/insecurity.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 152,
        "end": 152,
        "column": { "start": 16, "end": 55 }
      },
      "sink": {
        "start": 152,
        "end": 152,
        "column": { "start": 16, "end": 55 },
        "content": ""
      },
      "parent_line_number": 152,
      "fingerprint": "d699b64784f6ca1135369f86e4b64ecb_2",
      "old_fingerprint": "19ad8f4557b4ea2007e8329576bb778f_2",
      "code_extract": "  const hmac = crypto.createHmac('sha256', privateKey)"
    },
    {
      "cwe_ids": ["798"],
      "id": "javascript_lang_jwt_hardcoded_secret",
      "title": "Leakage of hard-coded secret in JWT",
      "description": "## Description\n\nStoring hard-coded secrets in your code, especially for JSON Web Tokens (JWT), poses a significant security risk. This practice makes your application vulnerable to unauthorized access and attacks.\n\n## Remediations\n\n- **Do not** hard-code secrets in your code. Hard-coding makes sensitive information easily accessible to anyone who can view the code.\n- **Do** use environment variables to store sensitive information such as secrets. This method keeps credentials out of your codebase and makes them easier to manage securely.\n```javascript\n  var jwt = require(\"jsonwebtoken\");\n  var token = jwt.sign({ foo: \"bar\" }, process.env.JWT_SECRET);\n```\n- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.\n\n## References\n\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_jwt_hardcoded_secret",
      "line_number": 56,
      "full_filename": "/scan/lib/insecurity.ts",
      "filename": "lib/insecurity.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": { "start": 41, "end": 108 }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": { "start": 41, "end": 108 },
        "content": ""
      },
      "parent_line_number": 56,
      "fingerprint": "50ebccec98d14333da6adb3b94c79730_0",
      "old_fingerprint": "d3a0982255491d1a92335d0208efd52a_0",
      "code_extract": "export const authorize = (user = {}) =\u003e jwt.sign(user, privateKey, { expiresIn: '6h', algorithm: 'RS256' })"
    },
    {
      "cwe_ids": ["89"],
      "id": "javascript_lang_sql_injection",
      "title": "Unsanitized input in SQL query",
      "description": "## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** use raw SQL queries that concatenate unsanitized input directly.\n  ```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\"SELECT * FROM users WHERE ID = \" + req.params.userId); // unsafe\n  ```\n- **Do** validate all query inputs to ensure they meet expected patterns or values before using them in a query.\n  ```javascript\n  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n  ```\n- **Do** use prepared (or parameterized) statements for querying databases to safely include external input.\n  ```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\n    \"SELECT * FROM users WHERE ID = ?\",\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_sql_injection",
      "line_number": 20,
      "full_filename": "/scan/data/static/codefixes/loginJimChallenge_4.ts",
      "filename": "data/static/codefixes/loginJimChallenge_4.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 20,
        "end": 20,
        "column": { "start": 6, "end": 209 }
      },
      "sink": {
        "start": 20,
        "end": 20,
        "column": { "start": 6, "end": 209 },
        "content": ""
      },
      "parent_line_number": 20,
      "fingerprint": "1b0805db0c0342c03908f442d4972b13_0",
      "old_fingerprint": "b5c4e8ad5329532f9bb16f3a7e86ef66_2",
      "code_extract": "-    models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: models.User, plain: true })"
    },
    {
      "cwe_ids": ["89"],
      "id": "javascript_lang_sql_injection",
      "title": "Unsanitized input in SQL query",
      "description": "## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** use raw SQL queries that concatenate unsanitized input directly.\n  ```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\"SELECT * FROM users WHERE ID = \" + req.params.userId); // unsafe\n  ```\n- **Do** validate all query inputs to ensure they meet expected patterns or values before using them in a query.\n  ```javascript\n  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n  ```\n- **Do** use prepared (or parameterized) statements for querying databases to safely include external input.\n  ```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\n    \"SELECT * FROM users WHERE ID = ?\",\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_sql_injection",
      "line_number": 6,
      "full_filename": "/scan/data/static/codefixes/unionSqlInjectionChallenge_1.ts",
      "filename": "data/static/codefixes/unionSqlInjectionChallenge_1.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 6, "end": 6, "column": { "start": 5, "end": 161 } },
      "sink": {
        "start": 6,
        "end": 6,
        "column": { "start": 5, "end": 161 },
        "content": ""
      },
      "parent_line_number": 6,
      "fingerprint": "7e9979f44c0dbd99c76619f48c4245fa_0",
      "old_fingerprint": "febd32c6263194fe220d85eeff658f03_0",
      "code_extract": "    models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)"
    },
    {
      "cwe_ids": ["89"],
      "id": "javascript_lang_sql_injection",
      "title": "Unsanitized input in SQL query",
      "description": "## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** use raw SQL queries that concatenate unsanitized input directly.\n  ```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\"SELECT * FROM users WHERE ID = \" + req.params.userId); // unsafe\n  ```\n- **Do** validate all query inputs to ensure they meet expected patterns or values before using them in a query.\n  ```javascript\n  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n  ```\n- **Do** use prepared (or parameterized) statements for querying databases to safely include external input.\n  ```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\n    \"SELECT * FROM users WHERE ID = ?\",\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_sql_injection",
      "line_number": 10,
      "full_filename": "/scan/data/static/codefixes/unionSqlInjectionChallenge_3.ts",
      "filename": "data/static/codefixes/unionSqlInjectionChallenge_3.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 10,
        "end": 10,
        "column": { "start": 5, "end": 161 }
      },
      "sink": {
        "start": 10,
        "end": 10,
        "column": { "start": 5, "end": 161 },
        "content": ""
      },
      "parent_line_number": 10,
      "fingerprint": "d6273bb4e3195d87ba54a7ca10db72be_0",
      "old_fingerprint": "27d3410a33d81ba12058522d502acd62_1",
      "code_extract": "    models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)"
    },
    {
      "cwe_ids": ["89"],
      "id": "javascript_lang_sql_injection",
      "title": "Unsanitized input in SQL query",
      "description": "## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** use raw SQL queries that concatenate unsanitized input directly.\n  ```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\"SELECT * FROM users WHERE ID = \" + req.params.userId); // unsafe\n  ```\n- **Do** validate all query inputs to ensure they meet expected patterns or values before using them in a query.\n  ```javascript\n  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n  ```\n- **Do** use prepared (or parameterized) statements for querying databases to safely include external input.\n  ```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\n    \"SELECT * FROM users WHERE ID = ?\",\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_sql_injection",
      "line_number": 34,
      "full_filename": "/scan/routes/login.ts",
      "filename": "routes/login.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 34,
        "end": 34,
        "column": { "start": 5, "end": 206 }
      },
      "sink": {
        "start": 34,
        "end": 34,
        "column": { "start": 5, "end": 206 },
        "content": ""
      },
      "parent_line_number": 34,
      "fingerprint": "1c2a6e42ca5adc2c078fee1a7cb1a787_0",
      "old_fingerprint": "ccd718c68c542ea38db2da98fd5c7269_4",
      "code_extract": "    models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model: UserModel, plain: true }) // vuln-code-snippet vuln-line loginAdminChallenge loginBenderChallenge loginJimChallenge"
    },
    {
      "cwe_ids": ["89"],
      "id": "javascript_lang_sql_injection",
      "title": "Unsanitized input in SQL query",
      "description": "## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** use raw SQL queries that concatenate unsanitized input directly.\n  ```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\"SELECT * FROM users WHERE ID = \" + req.params.userId); // unsafe\n  ```\n- **Do** validate all query inputs to ensure they meet expected patterns or values before using them in a query.\n  ```javascript\n  var rawId = req.params.userId\n  if !(/[0-9]+/.test(rawId)) {\n    // input is unexpected; don't make the query\n  }\n  ```\n- **Do** use prepared (or parameterized) statements for querying databases to safely include external input.\n  ```javascript\n  var sqlite = new Sequelize(\"sqlite::memory:\");\n  sqlite.query(\n    \"SELECT * FROM users WHERE ID = ?\",\n    { replacements: [req.params.userId] },\n    type: sequelize.QueryTypes.SELECT\n  )\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_sql_injection",
      "line_number": 23,
      "full_filename": "/scan/routes/search.ts",
      "filename": "routes/search.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 23,
        "end": 23,
        "column": { "start": 5, "end": 161 }
      },
      "sink": {
        "start": 23,
        "end": 23,
        "column": { "start": 5, "end": 161 },
        "content": ""
      },
      "parent_line_number": 23,
      "fingerprint": "626e8a24818faf605935d6ca0f0f748f_0",
      "old_fingerprint": "f12b42318cd601ff0d40c930f3b9a6d7_3",
      "code_extract": "    models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`) // vuln-code-snippet vuln-line unionSqlInjectionChallenge dbSchemaChallenge"
    },
    {
      "cwe_ids": ["502"],
      "id": "javascript_lang_unsafe_deserialization",
      "title": "Unsanitized user input in deserialization method",
      "description": "## Description\n\nDeserializing untrusted data is a risky practice. This vulnerability arises when data, especially from external sources like request objects, is deserialized without proper sanitization. Attackers can embed malicious payloads within serialized data, compromising your application's security upon deserialization.\n\n## Remediations\n\n- **Do not** deserialize data that comes directly from untrusted sources. This prevents attackers from injecting malicious payloads that could compromise your application.\n- **Do** opt for data-only and language-neutral serialization formats like JSON or XML for deserializing data. These formats are less susceptible to manipulation by attackers aiming to exploit the deserialization process.\n  ```javascript\n  JSON.parse(req.params);\n  ```\n\n## References\n\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_unsafe_deserialization",
      "line_number": 81,
      "full_filename": "/scan/routes/vulnCodeFixes.ts",
      "filename": "routes/vulnCodeFixes.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 81,
        "end": 81,
        "column": { "start": 36, "end": 118 }
      },
      "sink": {
        "start": 81,
        "end": 81,
        "column": { "start": 36, "end": 118 },
        "content": ""
      },
      "parent_line_number": 81,
      "fingerprint": "a5c85e9a268fe1a1f2e5611a370ea685_0",
      "old_fingerprint": "5ed126ac694cd405d9ed795b5d628085_0",
      "code_extract": "      const codingChallengeInfos = yaml.load(fs.readFileSync('./data/static/codefixes/' + key + '.info.yml', 'utf8'))"
    },
    {
      "cwe_ids": ["502"],
      "id": "javascript_lang_unsafe_deserialization",
      "title": "Unsanitized user input in deserialization method",
      "description": "## Description\n\nDeserializing untrusted data is a risky practice. This vulnerability arises when data, especially from external sources like request objects, is deserialized without proper sanitization. Attackers can embed malicious payloads within serialized data, compromising your application's security upon deserialization.\n\n## Remediations\n\n- **Do not** deserialize data that comes directly from untrusted sources. This prevents attackers from injecting malicious payloads that could compromise your application.\n- **Do** opt for data-only and language-neutral serialization formats like JSON or XML for deserializing data. These formats are less susceptible to manipulation by attackers aiming to exploit the deserialization process.\n  ```javascript\n  JSON.parse(req.params);\n  ```\n\n## References\n\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_unsafe_deserialization",
      "line_number": 90,
      "full_filename": "/scan/routes/vulnCodeSnippet.ts",
      "filename": "routes/vulnCodeSnippet.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 90,
        "end": 90,
        "column": { "start": 34, "end": 116 }
      },
      "sink": {
        "start": 90,
        "end": 90,
        "column": { "start": 34, "end": 116 },
        "content": ""
      },
      "parent_line_number": 90,
      "fingerprint": "e12d2f6a49a598973883269b06feb4b2_0",
      "old_fingerprint": "34e2d878e375e9c3d9748d002703a723_1",
      "code_extract": "    const codingChallengeInfos = yaml.load(fs.readFileSync('./data/static/codefixes/' + key + '.info.yml', 'utf8'))"
    }
  ],
  "high": [
    {
      "cwe_ids": ["79"],
      "id": "javascript_express_cross_site_scripting",
      "title": "Unsanitized user input in HTTP response (XSS)",
      "description": "## Description\n\nIncluding unsanitized user input in HTTP responses exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in a response. This practice can lead to XSS vulnerabilities.\n  ```javascript\n  res.send(req.body.data); // unsafe\n  ```\n- **Do** sanitize user input before including it in a response. Use library functions or frameworks designed for input sanitization to ensure that user data cannot be interpreted as executable code.\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_cross_site_scripting",
      "line_number": 97,
      "full_filename": "/scan/routes/userProfile.ts",
      "filename": "routes/userProfile.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 97, "end": 97, "column": { "start": 5, "end": 23 } },
      "sink": {
        "start": 97,
        "end": 97,
        "column": { "start": 5, "end": 23 },
        "content": ""
      },
      "parent_line_number": 97,
      "fingerprint": "972bae18730d10115e89451a622699c6_0",
      "old_fingerprint": "c3b25a991d11ebbe2411415c7aea26c8_0",
      "code_extract": "    res.send(fn(user))"
    },
    {
      "cwe_ids": ["73"],
      "id": "javascript_express_external_file_upload",
      "title": "Unsanitized user input in HTTP send file request",
      "description": "## Description\n\nUsing unsanitized user input in the sendFile API call exposes your application to path manipulation attacks. This vulnerability allows attackers to access files and resources they shouldn't be able to, by manipulating file paths in requests.\n\n## Remediations\n\n- **Do** set the `root` option to an absolute path to a directory when using `sendFile`. This confines the accessible files to a specific directory, preventing attackers from accessing files outside of this directory.\n  ```javascript\n  app.post(\"/upload\", (req, res) =\u003e {\n    var options = {\n      root: path.join(__dirname, \"upload\")\n    };\n    res.sendFile(req.params.filename, options);\n  });\n  ```\n\n## References\n\n- [Express sendFile API reference](http://expressjs.com/en/5x/api.html#res.sendFile)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_external_file_upload",
      "line_number": 14,
      "full_filename": "/scan/routes/keyServer.ts",
      "filename": "routes/keyServer.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 14, "end": 14, "column": { "start": 7, "end": 58 } },
      "sink": {
        "start": 14,
        "end": 14,
        "column": { "start": 7, "end": 58 },
        "content": ""
      },
      "parent_line_number": 14,
      "fingerprint": "8643fdcb8411f54a6af5a25deb2da818_0",
      "old_fingerprint": "541808b7559d589ac2b0009199101774_0",
      "code_extract": "      res.sendFile(path.resolve('encryptionkeys/', file))"
    },
    {
      "cwe_ids": ["73"],
      "id": "javascript_express_external_file_upload",
      "title": "Unsanitized user input in HTTP send file request",
      "description": "## Description\n\nUsing unsanitized user input in the sendFile API call exposes your application to path manipulation attacks. This vulnerability allows attackers to access files and resources they shouldn't be able to, by manipulating file paths in requests.\n\n## Remediations\n\n- **Do** set the `root` option to an absolute path to a directory when using `sendFile`. This confines the accessible files to a specific directory, preventing attackers from accessing files outside of this directory.\n  ```javascript\n  app.post(\"/upload\", (req, res) =\u003e {\n    var options = {\n      root: path.join(__dirname, \"upload\")\n    };\n    res.sendFile(req.params.filename, options);\n  });\n  ```\n\n## References\n\n- [Express sendFile API reference](http://expressjs.com/en/5x/api.html#res.sendFile)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_external_file_upload",
      "line_number": 14,
      "full_filename": "/scan/routes/logfileServer.ts",
      "filename": "routes/logfileServer.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 14, "end": 14, "column": { "start": 7, "end": 48 } },
      "sink": {
        "start": 14,
        "end": 14,
        "column": { "start": 7, "end": 48 },
        "content": ""
      },
      "parent_line_number": 14,
      "fingerprint": "caf5b22a357fad021743f7b2b8da54b8_0",
      "old_fingerprint": "268fa158a17190f4704238f3682e4651_1",
      "code_extract": "      res.sendFile(path.resolve('logs/', file))"
    },
    {
      "cwe_ids": ["73"],
      "id": "javascript_express_external_file_upload",
      "title": "Unsanitized user input in HTTP send file request",
      "description": "## Description\n\nUsing unsanitized user input in the sendFile API call exposes your application to path manipulation attacks. This vulnerability allows attackers to access files and resources they shouldn't be able to, by manipulating file paths in requests.\n\n## Remediations\n\n- **Do** set the `root` option to an absolute path to a directory when using `sendFile`. This confines the accessible files to a specific directory, preventing attackers from accessing files outside of this directory.\n  ```javascript\n  app.post(\"/upload\", (req, res) =\u003e {\n    var options = {\n      root: path.join(__dirname, \"upload\")\n    };\n    res.sendFile(req.params.filename, options);\n  });\n  ```\n\n## References\n\n- [Express sendFile API reference](http://expressjs.com/en/5x/api.html#res.sendFile)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_external_file_upload",
      "line_number": 14,
      "full_filename": "/scan/routes/quarantineServer.ts",
      "filename": "routes/quarantineServer.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 14, "end": 14, "column": { "start": 7, "end": 58 } },
      "sink": {
        "start": 14,
        "end": 14,
        "column": { "start": 7, "end": 58 },
        "content": ""
      },
      "parent_line_number": 14,
      "fingerprint": "684ac0da58fe48421abddc5208554ab4_0",
      "old_fingerprint": "ee49faba76866feb161471371a2d7b0b_2",
      "code_extract": "      res.sendFile(path.resolve('ftp/quarantine/', file))"
    },
    {
      "cwe_ids": ["73"],
      "id": "javascript_express_path_traversal",
      "title": "Unsanitized user input in file path",
      "description": "## Description\n\nUsing unsanitized user input to construct file paths can allow attackers to access files and directories beyond the intended limits. This vulnerability, known as path traversal, poses a significant security risk.\n\n## Remediations\n\n- **Do not** directly use user input in file path construction. This can lead to unauthorized file access.\n- **Do** sanitize user input before using it in path resolution. Replace or remove dangerous patterns like `\\..\\..` to prevent directory traversal attacks.\n  ```javascript\n  var sanitizedPath = userInput.replace(/^(\\.\\.(\\/|\\\\|$))+/, '');\n  ```\n- **Do** check for and eliminate any instances of the poison NULL byte (\"%00\") in user input, as it can be used to bypass path sanitization.\n  ```javascript\n  if (userInput.indexOf('\\0') !== -1) {\n    // Handle or reject the input\n  }\n  ```\n- **Do** validate the final path to ensure it is within the intended scope before accessing the file system.\n\n## References\n\n- [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_path_traversal",
      "line_number": 69,
      "full_filename": "/scan/routes/dataErasure.ts",
      "filename": "routes/dataErasure.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 69,
        "end": 69,
        "column": { "start": 32, "end": 61 }
      },
      "sink": {
        "start": 69,
        "end": 69,
        "column": { "start": 32, "end": 61 },
        "content": ""
      },
      "parent_line_number": 69,
      "fingerprint": "730d1c5106516470d1853a35c4aca01b_0",
      "old_fingerprint": "4ded78d11cf5c83776b838085c203e1f_3",
      "code_extract": "      const filePath: string = path.resolve(req.body.layout).toLowerCase()"
    },
    {
      "cwe_ids": ["73"],
      "id": "javascript_express_path_traversal",
      "title": "Unsanitized user input in file path",
      "description": "## Description\n\nUsing unsanitized user input to construct file paths can allow attackers to access files and directories beyond the intended limits. This vulnerability, known as path traversal, poses a significant security risk.\n\n## Remediations\n\n- **Do not** directly use user input in file path construction. This can lead to unauthorized file access.\n- **Do** sanitize user input before using it in path resolution. Replace or remove dangerous patterns like `\\..\\..` to prevent directory traversal attacks.\n  ```javascript\n  var sanitizedPath = userInput.replace(/^(\\.\\.(\\/|\\\\|$))+/, '');\n  ```\n- **Do** check for and eliminate any instances of the poison NULL byte (\"%00\") in user input, as it can be used to bypass path sanitization.\n  ```javascript\n  if (userInput.indexOf('\\0') !== -1) {\n    // Handle or reject the input\n  }\n  ```\n- **Do** validate the final path to ensure it is within the intended scope before accessing the file system.\n\n## References\n\n- [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_path_traversal",
      "line_number": 14,
      "full_filename": "/scan/routes/keyServer.ts",
      "filename": "routes/keyServer.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 14,
        "end": 14,
        "column": { "start": 20, "end": 57 }
      },
      "sink": {
        "start": 14,
        "end": 14,
        "column": { "start": 20, "end": 57 },
        "content": ""
      },
      "parent_line_number": 14,
      "fingerprint": "f0fdc8f875e9b77313305edb186aec62_0",
      "old_fingerprint": "02ef6c983c5880ec6f7eb5593bfc4054_0",
      "code_extract": "      res.sendFile(path.resolve('encryptionkeys/', file))"
    },
    {
      "cwe_ids": ["73"],
      "id": "javascript_express_path_traversal",
      "title": "Unsanitized user input in file path",
      "description": "## Description\n\nUsing unsanitized user input to construct file paths can allow attackers to access files and directories beyond the intended limits. This vulnerability, known as path traversal, poses a significant security risk.\n\n## Remediations\n\n- **Do not** directly use user input in file path construction. This can lead to unauthorized file access.\n- **Do** sanitize user input before using it in path resolution. Replace or remove dangerous patterns like `\\..\\..` to prevent directory traversal attacks.\n  ```javascript\n  var sanitizedPath = userInput.replace(/^(\\.\\.(\\/|\\\\|$))+/, '');\n  ```\n- **Do** check for and eliminate any instances of the poison NULL byte (\"%00\") in user input, as it can be used to bypass path sanitization.\n  ```javascript\n  if (userInput.indexOf('\\0') !== -1) {\n    // Handle or reject the input\n  }\n  ```\n- **Do** validate the final path to ensure it is within the intended scope before accessing the file system.\n\n## References\n\n- [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_path_traversal",
      "line_number": 14,
      "full_filename": "/scan/routes/logfileServer.ts",
      "filename": "routes/logfileServer.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 14,
        "end": 14,
        "column": { "start": 20, "end": 47 }
      },
      "sink": {
        "start": 14,
        "end": 14,
        "column": { "start": 20, "end": 47 },
        "content": ""
      },
      "parent_line_number": 14,
      "fingerprint": "51001ae13fdae4f062cec51a842161b2_0",
      "old_fingerprint": "76aed675fce2cfb60d4017f7dad03f6f_1",
      "code_extract": "      res.sendFile(path.resolve('logs/', file))"
    },
    {
      "cwe_ids": ["73"],
      "id": "javascript_express_path_traversal",
      "title": "Unsanitized user input in file path",
      "description": "## Description\n\nUsing unsanitized user input to construct file paths can allow attackers to access files and directories beyond the intended limits. This vulnerability, known as path traversal, poses a significant security risk.\n\n## Remediations\n\n- **Do not** directly use user input in file path construction. This can lead to unauthorized file access.\n- **Do** sanitize user input before using it in path resolution. Replace or remove dangerous patterns like `\\..\\..` to prevent directory traversal attacks.\n  ```javascript\n  var sanitizedPath = userInput.replace(/^(\\.\\.(\\/|\\\\|$))+/, '');\n  ```\n- **Do** check for and eliminate any instances of the poison NULL byte (\"%00\") in user input, as it can be used to bypass path sanitization.\n  ```javascript\n  if (userInput.indexOf('\\0') !== -1) {\n    // Handle or reject the input\n  }\n  ```\n- **Do** validate the final path to ensure it is within the intended scope before accessing the file system.\n\n## References\n\n- [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_path_traversal",
      "line_number": 14,
      "full_filename": "/scan/routes/quarantineServer.ts",
      "filename": "routes/quarantineServer.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 14,
        "end": 14,
        "column": { "start": 20, "end": 57 }
      },
      "sink": {
        "start": 14,
        "end": 14,
        "column": { "start": 20, "end": 57 },
        "content": ""
      },
      "parent_line_number": 14,
      "fingerprint": "a59cb4c55fa6ab0b98f1f061b0262ee1_0",
      "old_fingerprint": "0ca5f3f4241d8d8a19f7b940fa22db14_2",
      "code_extract": "      res.sendFile(path.resolve('ftp/quarantine/', file))"
    },
    {
      "cwe_ids": ["918"],
      "id": "javascript_express_server_side_request_forgery",
      "title": "Unsanitized user input in HTTP request (SSRF)",
      "description": "## Description\n\nIncorporating unsanitized user input directly into URLs for data retrieval exposes your application to server-side request forgery (SSRF) attacks. This vulnerability arises when URLs include data provided by users without adequate validation or sanitization.\n\n## Remediations\n\n- **Do not** directly use user input to construct URLs for backend requests. This approach can lead to SSRF vulnerabilities.\n  ```javascript\n  axios.get(`https://${req.params.host}`); // unsafe\n  ```\n- **Do** validate or sanitize user input before using it in URLs. Prefer using a predefined list of allowed hosts and map user input to this list, ensuring only safe and expected URLs are constructed.\n  ```javascript\n  var host = \"default-api.com\"\n  if (req.params.host == \"something-else\") {\n    host = \"other-api.com\";\n  }\n\n  axios.get(`https://${host}`);\n  ```\n\n## References\n\n- [OWASP - Server-Side Request Forgery (SSRF) prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_server_side_request_forgery",
      "line_number": 24,
      "full_filename": "/scan/routes/profileImageUrlUpload.ts",
      "filename": "routes/profileImageUrlUpload.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 24,
        "end": 24,
        "column": { "start": 34, "end": 44 }
      },
      "sink": {
        "start": 24,
        "end": 24,
        "column": { "start": 34, "end": 44 },
        "content": ""
      },
      "parent_line_number": 24,
      "fingerprint": "c42e77ddf815d96686f81a0e6feb9dbf_0",
      "old_fingerprint": "2764a169a60142b02f548b15f48bdf59_0",
      "code_extract": "          const response = await fetch(url)"
    },
    {
      "cwe_ids": ["79"],
      "id": "javascript_lang_dangerous_insert_html",
      "title": "Unsanitized user input in dynamic HTML insertion (XSS)",
      "description": "## Description\n\nUnsanitized user input in dynamic HTML insertion can lead to Cross-Site Scripting (XSS) attacks. This vulnerability arises when user-provided data is directly inserted into the DOM without proper sanitization, potentially allowing attackers to execute malicious scripts.\n\n## Remediations\n\n- **Do** use an HTML sanitization library to clean user input before inserting it into the HTML. This step helps prevent XSS attacks by removing or neutralizing any potentially harmful scripts.\n  ```javascript\n  import sanitizeHtml from 'sanitize-html';\n\n  const html = `\u003cstrong\u003e${user.Input}\u003c/strong\u003e`;\n  document.body.innerHTML = sanitizeHtml(html);\n  ```\n\n## References\n\n- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_dangerous_insert_html",
      "line_number": 73,
      "full_filename": "/scan/frontend/src/hacking-instructor/index.ts",
      "filename": "frontend/src/hacking-instructor/index.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": { "start": 19, "end": 46 }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": { "start": 19, "end": 46 },
        "content": ""
      },
      "parent_line_number": 73,
      "fingerprint": "bf127e52a210d7d5cdb66cacceb977ff_0",
      "old_fingerprint": "4db46a82c248a752fc7fd7d7e61cb6c4_0",
      "code_extract": "  const element = document.createElement(tag)"
    },
    {
      "cwe_ids": ["79"],
      "id": "javascript_lang_dangerous_insert_html",
      "title": "Unsanitized user input in dynamic HTML insertion (XSS)",
      "description": "## Description\n\nUnsanitized user input in dynamic HTML insertion can lead to Cross-Site Scripting (XSS) attacks. This vulnerability arises when user-provided data is directly inserted into the DOM without proper sanitization, potentially allowing attackers to execute malicious scripts.\n\n## Remediations\n\n- **Do** use an HTML sanitization library to clean user input before inserting it into the HTML. This step helps prevent XSS attacks by removing or neutralizing any potentially harmful scripts.\n  ```javascript\n  import sanitizeHtml from 'sanitize-html';\n\n  const html = `\u003cstrong\u003e${user.Input}\u003c/strong\u003e`;\n  document.body.innerHTML = sanitizeHtml(html);\n  ```\n\n## References\n\n- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_dangerous_insert_html",
      "line_number": 122,
      "full_filename": "/scan/frontend/src/hacking-instructor/index.ts",
      "filename": "frontend/src/hacking-instructor/index.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 122,
        "end": 122,
        "column": { "start": 3, "end": 43 }
      },
      "sink": {
        "start": 122,
        "end": 122,
        "column": { "start": 3, "end": 43 },
        "content": ""
      },
      "parent_line_number": 122,
      "fingerprint": "bf127e52a210d7d5cdb66cacceb977ff_1",
      "old_fingerprint": "4db46a82c248a752fc7fd7d7e61cb6c4_1",
      "code_extract": "  textBox.innerHTML = snarkdown(hint.text)"
    },
    {
      "cwe_ids": ["134"],
      "id": "javascript_lang_format_string_using_user_input",
      "title": "Unsanitized user input in format string",
      "description": "## Description\n\nIncluding user input directly in a format string can lead to security vulnerabilities. This issue arises when an attacker manipulates the format specifiers in the user input, resulting in misleading or fabricated messages.\n\n## Remediations\n\n- **Do not** incorporate user input directly into format strings. This approach can be exploited by attackers to manipulate output or execute malicious code.\n  ```javascript\n  console.log(`The value was ${req.params.value}`); // unsafe\n  ```\n- **Do** use a literal format string and pass user input as additional arguments. This method safely incorporates user input without exposing the application to format string vulnerabilities.\n  ```javascript\n  console.log(\"The value was %s\", req.params.value);\n  ```",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_format_string_using_user_input",
      "line_number": 26,
      "full_filename": "/scan/data/static/codefixes/accessLogDisclosureChallenge_2.ts",
      "filename": "data/static/codefixes/accessLogDisclosureChallenge_2.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 26, "end": 26, "column": { "start": 3, "end": 42 } },
      "sink": {
        "start": 26,
        "end": 26,
        "column": { "start": 3, "end": 42 },
        "content": ""
      },
      "parent_line_number": 26,
      "fingerprint": "2fc142074f8e07ba1af4a1f812d894d9_0",
      "old_fingerprint": "a49066c08b9243ab8481d849b861be51_0",
      "code_extract": "  console.log(req.method + ' ' + req.url)"
    },
    {
      "cwe_ids": ["918"],
      "id": "javascript_lang_http_url_using_user_input",
      "title": "Unsanitized user input in HTTP request (SSRF)",
      "description": "## Description\n\nConstructing URLs based on user input puts your application at risk of Server-Side Request Forgery (SSRF) attacks. This vulnerability allows attackers to manipulate the application into making unintended HTTP requests.\n\n## Remediations\n\n- **Do not** directly incorporate user input into URLs for HTTP requests. This can lead to SSRF vulnerabilities.\n  ```javascript\n  const response = axios.get(`https://${req.params.host}`) // unsafe\n  ```\n- **Do** validate or map user input against a predefined list of allowed values before using it to form URLs. This approach minimizes the risk of SSRF attacks.\n  ```javascript\n  const hosts = new Map([\n    [\"option1\", \"api1.com\"],\n    [\"option2\", \"api2.com\"]\n  ])\n\n  const host = hosts.get(req.params.host)\n  const response = axios.get(`https://${host}`)\n  ```",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_http_url_using_user_input",
      "line_number": 24,
      "full_filename": "/scan/routes/profileImageUrlUpload.ts",
      "filename": "routes/profileImageUrlUpload.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 24,
        "end": 24,
        "column": { "start": 34, "end": 44 }
      },
      "sink": {
        "start": 24,
        "end": 24,
        "column": { "start": 34, "end": 44 },
        "content": ""
      },
      "parent_line_number": 24,
      "fingerprint": "8ed612ce6d89f70e214b65244f8793b4_0",
      "old_fingerprint": "e6bf6619b1964f26fb1449551e458742_0",
      "code_extract": "          const response = await fetch(url)"
    },
    {
      "cwe_ids": ["79"],
      "id": "javascript_lang_manual_html_sanitization",
      "title": "Usage of manual HTML sanitization (XSS)",
      "description": "## Description\n\nManually sanitizing HTML is prone to mistakes and can lead to Cross-Site Scripting (XSS) vulnerabilities. This occurs when user input is not properly sanitized, allowing attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** manually escape HTML to sanitize user input. This method is unreliable and can easily miss certain exploits.\n  ```javascript\n  const sanitizedUserInput = user.Input\n    .replaceAll('\u003c', '\u0026lt;')\n    .replaceAll('\u003e', '\u0026gt;'); // unsafe\n  const html = `\u003cstrong\u003e${sanitizedUserInput}\u003c/strong\u003e`;\n  ```\n- **Do** use a trusted HTML sanitization library to handle user input safely. Libraries designed for sanitization are more reliable as they cover a wide range of XSS attack vectors.\n  ```javascript\n  import sanitizeHtml from 'sanitize-html';\n\n  const html = sanitizeHtml(`\u003cstrong\u003e${user.Input}\u003c/strong\u003e`);\n  ```\n\n## References\n\n- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_manual_html_sanitization",
      "line_number": 69,
      "full_filename": "/scan/data/static/codefixes/adminSectionChallenge_1_correct.ts",
      "filename": "data/static/codefixes/adminSectionChallenge_1_correct.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 69,
        "end": 69,
        "column": { "start": 10, "end": 60 }
      },
      "sink": {
        "start": 69,
        "end": 69,
        "column": { "start": 10, "end": 60 },
        "content": ""
      },
      "parent_line_number": 69,
      "fingerprint": "936e1757967a9a0ddb4652fcb8423841_0",
      "old_fingerprint": "8878f5b2919446f3e7e93dbac970b5b8_1",
      "code_extract": "  return params.replace(/\u003c/g, '\u0026lt;').replace(/\u003e/g, '\u0026gt;');"
    },
    {
      "cwe_ids": ["79"],
      "id": "javascript_lang_manual_html_sanitization",
      "title": "Usage of manual HTML sanitization (XSS)",
      "description": "## Description\n\nManually sanitizing HTML is prone to mistakes and can lead to Cross-Site Scripting (XSS) vulnerabilities. This occurs when user input is not properly sanitized, allowing attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** manually escape HTML to sanitize user input. This method is unreliable and can easily miss certain exploits.\n  ```javascript\n  const sanitizedUserInput = user.Input\n    .replaceAll('\u003c', '\u0026lt;')\n    .replaceAll('\u003e', '\u0026gt;'); // unsafe\n  const html = `\u003cstrong\u003e${sanitizedUserInput}\u003c/strong\u003e`;\n  ```\n- **Do** use a trusted HTML sanitization library to handle user input safely. Libraries designed for sanitization are more reliable as they cover a wide range of XSS attack vectors.\n  ```javascript\n  import sanitizeHtml from 'sanitize-html';\n\n  const html = sanitizeHtml(`\u003cstrong\u003e${user.Input}\u003c/strong\u003e`);\n  ```\n\n## References\n\n- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_manual_html_sanitization",
      "line_number": 22,
      "full_filename": "/scan/data/static/codefixes/redirectChallenge_3.ts",
      "filename": "data/static/codefixes/redirectChallenge_3.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 22, "end": 31, "column": { "start": 10, "end": 7 } },
      "sink": {
        "start": 22,
        "end": 31,
        "column": { "start": 10, "end": 7 },
        "content": ""
      },
      "parent_line_number": 22,
      "fingerprint": "21de2a29f76880dbfbba700acb3cf4b4_0",
      "old_fingerprint": "16b82987f2ccd427419c1b56ce3b72e6_0",
      "code_extract": "  return str.replace(/[\u0026\u003c\u003e'\"]/g,\n    tag =\u003e {\n      return ({\n        ...omitted (buffer value 3)\n        '\"': '\u0026quot;'\n      }[tag])\n    })"
    },
    {
      "cwe_ids": ["79"],
      "id": "javascript_lang_manual_html_sanitization",
      "title": "Usage of manual HTML sanitization (XSS)",
      "description": "## Description\n\nManually sanitizing HTML is prone to mistakes and can lead to Cross-Site Scripting (XSS) vulnerabilities. This occurs when user input is not properly sanitized, allowing attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** manually escape HTML to sanitize user input. This method is unreliable and can easily miss certain exploits.\n  ```javascript\n  const sanitizedUserInput = user.Input\n    .replaceAll('\u003c', '\u0026lt;')\n    .replaceAll('\u003e', '\u0026gt;'); // unsafe\n  const html = `\u003cstrong\u003e${sanitizedUserInput}\u003c/strong\u003e`;\n  ```\n- **Do** use a trusted HTML sanitization library to handle user input safely. Libraries designed for sanitization are more reliable as they cover a wide range of XSS attack vectors.\n  ```javascript\n  import sanitizeHtml from 'sanitize-html';\n\n  const html = sanitizeHtml(`\u003cstrong\u003e${user.Input}\u003c/strong\u003e`);\n  ```\n\n## References\n\n- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_manual_html_sanitization",
      "line_number": 104,
      "full_filename": "/scan/data/static/codefixes/restfulXssChallenge_2.ts",
      "filename": "data/static/codefixes/restfulXssChallenge_2.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 104,
        "end": 107,
        "column": { "start": 34, "end": 35 }
      },
      "sink": {
        "start": 104,
        "end": 107,
        "column": { "start": 34, "end": 35 },
        "content": ""
      },
      "parent_line_number": 104,
      "fingerprint": "d098ec6c1ec482df2422801759454ad2_0",
      "old_fingerprint": "15293bab82b507fdb54d51aebbbb2f98_2",
      "code_extract": "      tableData[i].description = tableData[i].description\n        .replaceAll('\u003c', '\u0026lt;')\n        .replaceAll('\u003e', '\u0026gt;')\n        .replaceAll('\"', '\u0026quot;')"
    },
    {
      "cwe_ids": ["22"],
      "id": "javascript_lang_path_traversal",
      "title": "Unsanitized dynamic input in file path",
      "description": "## Description\n\nUsing unsanitized dynamic input to determine file paths can allow attackers to gain access to files and folders outside of the intended scope. This vulnerability occurs when input provided by users is directly used to access the filesystem without proper validation or sanitization.\n\n## Remediations\n\n- **Do not** directly use user input to construct file paths. This can lead to unauthorized file access.\n- **Do** sanitize user input used in file paths. Replace patterns that can navigate out of intended directories, such as `..\\..`, to prevent path traversal attacks.\n  ```javascript\n  var folder = target.replace(/^(\\.\\.(\\/|\\\\|$))+/, '');\n  ```\n- **Do** check for and remove any instances of the NULL byte (\"%00\") in user input to guard against poison NULL byte attacks.\n  ```javascript\n  if (target.indexOf('\\0') !== -1) {\n    // Handle or reject the input\n  }\n  ```\n- **Do** use path concatenation methods provided by your programming environment to securely combine user input with your base directory path. This ensures the final path starts within the intended scope.\n  ```javascript\n  const path = require(\"path\");\n  var pathname = path.join(\"/public/\", folder);\n  if (pathname.indexOf(\"/public/\") !== 0) {\n    // Handle or reject the input\n  }\n  ```\n\n## References\n\n- [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_path_traversal",
      "line_number": 15,
      "full_filename": "/scan/data/static/codefixes/directoryListingChallenge_4.ts",
      "filename": "data/static/codefixes/directoryListingChallenge_4.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 15,
        "end": 15,
        "column": { "start": 25, "end": 47 }
      },
      "sink": {
        "start": 15,
        "end": 15,
        "column": { "start": 25, "end": 47 },
        "content": ""
      },
      "parent_line_number": 15,
      "fingerprint": "2bcd3715df02ff4a7e8d1f4c2b101873_0",
      "old_fingerprint": "817d68c4a3eb37c6b10a0fbebe96e056_1",
      "code_extract": "   const absolutePath = path.resolve(filePath);"
    },
    {
      "cwe_ids": ["22"],
      "id": "javascript_lang_path_traversal",
      "title": "Unsanitized dynamic input in file path",
      "description": "## Description\n\nUsing unsanitized dynamic input to determine file paths can allow attackers to gain access to files and folders outside of the intended scope. This vulnerability occurs when input provided by users is directly used to access the filesystem without proper validation or sanitization.\n\n## Remediations\n\n- **Do not** directly use user input to construct file paths. This can lead to unauthorized file access.\n- **Do** sanitize user input used in file paths. Replace patterns that can navigate out of intended directories, such as `..\\..`, to prevent path traversal attacks.\n  ```javascript\n  var folder = target.replace(/^(\\.\\.(\\/|\\\\|$))+/, '');\n  ```\n- **Do** check for and remove any instances of the NULL byte (\"%00\") in user input to guard against poison NULL byte attacks.\n  ```javascript\n  if (target.indexOf('\\0') !== -1) {\n    // Handle or reject the input\n  }\n  ```\n- **Do** use path concatenation methods provided by your programming environment to securely combine user input with your base directory path. This ensures the final path starts within the intended scope.\n  ```javascript\n  const path = require(\"path\");\n  var pathname = path.join(\"/public/\", folder);\n  if (pathname.indexOf(\"/public/\") !== 0) {\n    // Handle or reject the input\n  }\n  ```\n\n## References\n\n- [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_path_traversal",
      "line_number": 8,
      "full_filename": "/scan/data/staticData.ts",
      "filename": "data/staticData.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 8, "end": 8, "column": { "start": 20, "end": 66 } },
      "sink": {
        "start": 8,
        "end": 8,
        "column": { "start": 20, "end": 66 },
        "content": ""
      },
      "parent_line_number": 8,
      "fingerprint": "4161e76ae99975b4259d0e9228df69d5_0",
      "old_fingerprint": "802ab607693978c56f17d9f2ceed81e2_0",
      "code_extract": "  const filePath = path.resolve('./data/static/' + file + '.yml')"
    },
    {
      "cwe_ids": ["22"],
      "id": "javascript_lang_path_traversal",
      "title": "Unsanitized dynamic input in file path",
      "description": "## Description\n\nUsing unsanitized dynamic input to determine file paths can allow attackers to gain access to files and folders outside of the intended scope. This vulnerability occurs when input provided by users is directly used to access the filesystem without proper validation or sanitization.\n\n## Remediations\n\n- **Do not** directly use user input to construct file paths. This can lead to unauthorized file access.\n- **Do** sanitize user input used in file paths. Replace patterns that can navigate out of intended directories, such as `..\\..`, to prevent path traversal attacks.\n  ```javascript\n  var folder = target.replace(/^(\\.\\.(\\/|\\\\|$))+/, '');\n  ```\n- **Do** check for and remove any instances of the NULL byte (\"%00\") in user input to guard against poison NULL byte attacks.\n  ```javascript\n  if (target.indexOf('\\0') !== -1) {\n    // Handle or reject the input\n  }\n  ```\n- **Do** use path concatenation methods provided by your programming environment to securely combine user input with your base directory path. This ensures the final path starts within the intended scope.\n  ```javascript\n  const path = require(\"path\");\n  var pathname = path.join(\"/public/\", folder);\n  if (pathname.indexOf(\"/public/\") !== 0) {\n    // Handle or reject the input\n  }\n  ```\n\n## References\n\n- [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_path_traversal",
      "line_number": 120,
      "full_filename": "/scan/lib/startup/validatePreconditions.ts",
      "filename": "lib/startup/validatePreconditions.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 120,
        "end": 120,
        "column": { "start": 23, "end": 62 }
      },
      "sink": {
        "start": 120,
        "end": 120,
        "column": { "start": 23, "end": 62 },
        "content": ""
      },
      "parent_line_number": 120,
      "fingerprint": "f0e7492e80ce50a1aa962aebdf7f5673_0",
      "old_fingerprint": "bc9ac023ea92dc06ecd634d5c535290c_4",
      "code_extract": "  return await access(path.resolve(pathRelativeToProjectRoot)).then(() =\u003e {"
    },
    {
      "cwe_ids": ["22"],
      "id": "javascript_lang_path_traversal",
      "title": "Unsanitized dynamic input in file path",
      "description": "## Description\n\nUsing unsanitized dynamic input to determine file paths can allow attackers to gain access to files and folders outside of the intended scope. This vulnerability occurs when input provided by users is directly used to access the filesystem without proper validation or sanitization.\n\n## Remediations\n\n- **Do not** directly use user input to construct file paths. This can lead to unauthorized file access.\n- **Do** sanitize user input used in file paths. Replace patterns that can navigate out of intended directories, such as `..\\..`, to prevent path traversal attacks.\n  ```javascript\n  var folder = target.replace(/^(\\.\\.(\\/|\\\\|$))+/, '');\n  ```\n- **Do** check for and remove any instances of the NULL byte (\"%00\") in user input to guard against poison NULL byte attacks.\n  ```javascript\n  if (target.indexOf('\\0') !== -1) {\n    // Handle or reject the input\n  }\n  ```\n- **Do** use path concatenation methods provided by your programming environment to securely combine user input with your base directory path. This ensures the final path starts within the intended scope.\n  ```javascript\n  const path = require(\"path\");\n  var pathname = path.join(\"/public/\", folder);\n  if (pathname.indexOf(\"/public/\") !== 0) {\n    // Handle or reject the input\n  }\n  ```\n\n## References\n\n- [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_path_traversal",
      "line_number": 33,
      "full_filename": "/scan/routes/fileServer.ts",
      "filename": "routes/fileServer.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 33,
        "end": 33,
        "column": { "start": 20, "end": 46 }
      },
      "sink": {
        "start": 33,
        "end": 33,
        "column": { "start": 20, "end": 46 },
        "content": ""
      },
      "parent_line_number": 33,
      "fingerprint": "587b585fef3fe70bf57a2f0f19565ff2_0",
      "old_fingerprint": "c4fa0d44882b36fd6d497ca44a43a2c1_2",
      "code_extract": "      res.sendFile(path.resolve('ftp/', file))"
    },
    {
      "cwe_ids": ["22"],
      "id": "javascript_lang_path_traversal",
      "title": "Unsanitized dynamic input in file path",
      "description": "## Description\n\nUsing unsanitized dynamic input to determine file paths can allow attackers to gain access to files and folders outside of the intended scope. This vulnerability occurs when input provided by users is directly used to access the filesystem without proper validation or sanitization.\n\n## Remediations\n\n- **Do not** directly use user input to construct file paths. This can lead to unauthorized file access.\n- **Do** sanitize user input used in file paths. Replace patterns that can navigate out of intended directories, such as `..\\..`, to prevent path traversal attacks.\n  ```javascript\n  var folder = target.replace(/^(\\.\\.(\\/|\\\\|$))+/, '');\n  ```\n- **Do** check for and remove any instances of the NULL byte (\"%00\") in user input to guard against poison NULL byte attacks.\n  ```javascript\n  if (target.indexOf('\\0') !== -1) {\n    // Handle or reject the input\n  }\n  ```\n- **Do** use path concatenation methods provided by your programming environment to securely combine user input with your base directory path. This ensures the final path starts within the intended scope.\n  ```javascript\n  const path = require(\"path\");\n  var pathname = path.join(\"/public/\", folder);\n  if (pathname.indexOf(\"/public/\") !== 0) {\n    // Handle or reject the input\n  }\n  ```\n\n## References\n\n- [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_path_traversal",
      "line_number": 42,
      "full_filename": "/scan/routes/fileUpload.ts",
      "filename": "routes/fileUpload.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 42,
        "end": 42,
        "column": { "start": 38, "end": 84 }
      },
      "sink": {
        "start": 42,
        "end": 42,
        "column": { "start": 38, "end": 84 },
        "content": ""
      },
      "parent_line_number": 42,
      "fingerprint": "648d172bb8d132f757663d42ab913457_0",
      "old_fingerprint": "a80c74228845525bce8e5dc47d1ec6ea_3",
      "code_extract": "                const absolutePath = path.resolve('uploads/complaints/' + fileName)"
    },
    {
      "cwe_ids": ["79"],
      "id": "javascript_lang_raw_html_using_user_input",
      "title": "Unsanitized user input in raw HTML strings (XSS)",
      "description": "## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```javascript\n  const html = `\u003ch1\u003e${req.params.title}\u003c/h1\u003e` // unsafe\n  ```\n- **Do** use a framework or templating language that automatically handles the encoding and sanitization of user input when constructing HTML. This approach minimizes the risk of XSS attacks.\n- **Do** sanitize user input if you must use HTML strings directly. Utilize libraries designed for input sanitization to ensure that user input does not contain malicious content.\n  ```javascript\n  import sanitizeHtml from 'sanitize-html'\n\n  const sanitizedTitle = sanitizeHtml(req.params.title)\n  const html = `\u003ch1\u003e${sanitizedTitle}\u003c/h1\u003e`\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_raw_html_using_user_input",
      "line_number": 86,
      "full_filename": "/scan/routes/userProfile.ts",
      "filename": "routes/userProfile.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": { "start": 16, "end": 37 }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": { "start": 16, "end": 37 },
        "content": ""
      },
      "parent_line_number": 86,
      "fingerprint": "6fb3affe9c48b330c893ed13aff89da1_0",
      "old_fingerprint": "0cae3e5d948a382bacc7a72930e97787_0",
      "code_extract": "    const fn = pug.compile(template)"
    },
    {
      "cwe_ids": ["312"],
      "id": "javascript_lang_session",
      "title": "Leakage of sensitive data in local storage",
      "description": "## Description\n\nStoring sensitive data in `localStorage` poses a security risk. This vulnerability occurs when sensitive information is saved in the browser's local storage, making it susceptible to unauthorized access.\n\n## Remediations\n\n- **Do not** store sensitive data in `localStorage`. This method exposes sensitive information to potential security threats.\n  ```javascript\n  localStorage.setItem('user', email); // unsafe\n  ```\n- **Do** use server-based session storage solutions to keep session data secure. This approach minimizes the risk of sensitive data exposure.\n- **Do** store only non-sensitive data in `localStorage`, such as a unique identifier, to reduce security risks.\n  ```javascript\n  localStorage.setItem('user', user.uuid);\n  ```\n\n## References\n\n- [OWASP sensitive data exposure](https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_session",
      "line_number": 114,
      "full_filename": "/scan/frontend/src/app/login/login.component.ts",
      "filename": "frontend/src/app/login/login.component.ts",
      "data_type": {
        "category_uuid": "cef587dd-76db-430b-9e18-7b031e1a193b",
        "name": "Email Address"
      },
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 114,
        "end": 114,
        "column": { "start": 37, "end": 52 }
      },
      "sink": {
        "start": 114,
        "end": 114,
        "column": { "start": 7, "end": 53 },
        "content": ""
      },
      "parent_line_number": 114,
      "fingerprint": "f9657c5f0e228532df66e6987928ea19_0",
      "old_fingerprint": "12a6e434f0d79a66a61f740b419790b6_0",
      "code_extract": "      localStorage.setItem('email', this.user.email)"
    }
  ],
  "low": [
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction on directory listing",
      "description": "## Description\n\nExposing a directory listing without restrictions can lead to unauthorized access to sensitive data or source code. This vulnerability occurs when the file structure of a server or application is made visible to users without proper access control, potentially allowing attackers to exploit the exposed file structure.\n\n## Remediations\n\n- **Do** restrict access to sensitive directories and files to prevent unauthorized access. Implementing access controls ensures that only authorized users can view or interact with specific file directories.\n\n## References\n\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 31,
      "full_filename": "/scan/data/static/codefixes/accessLogDisclosureChallenge_1_correct.ts",
      "filename": "data/static/codefixes/accessLogDisclosureChallenge_1_correct.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 31, "end": 31, "column": { "start": 3, "end": 76 } },
      "sink": {
        "start": 31,
        "end": 31,
        "column": { "start": 3, "end": 76 },
        "content": ""
      },
      "parent_line_number": 31,
      "fingerprint": "f561fa26365b6c05e91ddc3b18fbed28_0",
      "old_fingerprint": "0f58ae26b36860cae64ed7ddb02149b2_17",
      "code_extract": "  app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction on directory listing",
      "description": "## Description\n\nExposing a directory listing without restrictions can lead to unauthorized access to sensitive data or source code. This vulnerability occurs when the file structure of a server or application is made visible to users without proper access control, potentially allowing attackers to exploit the exposed file structure.\n\n## Remediations\n\n- **Do** restrict access to sensitive directories and files to prevent unauthorized access. Implementing access controls ensures that only authorized users can view or interact with specific file directories.\n\n## References\n\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 37,
      "full_filename": "/scan/data/static/codefixes/accessLogDisclosureChallenge_1_correct.ts",
      "filename": "data/static/codefixes/accessLogDisclosureChallenge_1_correct.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": { "start": 3, "end": 109 }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": { "start": 3, "end": 109 },
        "content": ""
      },
      "parent_line_number": 37,
      "fingerprint": "f561fa26365b6c05e91ddc3b18fbed28_1",
      "old_fingerprint": "0f58ae26b36860cae64ed7ddb02149b2_21",
      "code_extract": "  app.use('/.well-known', serveIndexMiddleware, serveIndex('.well-known', { icons: true, view: 'details' }))"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction on directory listing",
      "description": "## Description\n\nExposing a directory listing without restrictions can lead to unauthorized access to sensitive data or source code. This vulnerability occurs when the file structure of a server or application is made visible to users without proper access control, potentially allowing attackers to exploit the exposed file structure.\n\n## Remediations\n\n- **Do** restrict access to sensitive directories and files to prevent unauthorized access. Implementing access controls ensures that only authorized users can view or interact with specific file directories.\n\n## References\n\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 41,
      "full_filename": "/scan/data/static/codefixes/accessLogDisclosureChallenge_1_correct.ts",
      "filename": "data/static/codefixes/accessLogDisclosureChallenge_1_correct.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 41,
        "end": 41,
        "column": { "start": 3, "end": 115 }
      },
      "sink": {
        "start": 41,
        "end": 41,
        "column": { "start": 3, "end": 115 },
        "content": ""
      },
      "parent_line_number": 41,
      "fingerprint": "f561fa26365b6c05e91ddc3b18fbed28_2",
      "old_fingerprint": "0f58ae26b36860cae64ed7ddb02149b2_23",
      "code_extract": "  app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction on directory listing",
      "description": "## Description\n\nExposing a directory listing without restrictions can lead to unauthorized access to sensitive data or source code. This vulnerability occurs when the file structure of a server or application is made visible to users without proper access control, potentially allowing attackers to exploit the exposed file structure.\n\n## Remediations\n\n- **Do** restrict access to sensitive directories and files to prevent unauthorized access. Implementing access controls ensures that only authorized users can view or interact with specific file directories.\n\n## References\n\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 36,
      "full_filename": "/scan/data/static/codefixes/accessLogDisclosureChallenge_2.ts",
      "filename": "data/static/codefixes/accessLogDisclosureChallenge_2.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 36, "end": 36, "column": { "start": 3, "end": 76 } },
      "sink": {
        "start": 36,
        "end": 36,
        "column": { "start": 3, "end": 76 },
        "content": ""
      },
      "parent_line_number": 36,
      "fingerprint": "7431053925541a9e4feb79b7adbba3a3_0",
      "old_fingerprint": "aa957db5411efc85bc38141d2c580be1_20",
      "code_extract": "  app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction on directory listing",
      "description": "## Description\n\nExposing a directory listing without restrictions can lead to unauthorized access to sensitive data or source code. This vulnerability occurs when the file structure of a server or application is made visible to users without proper access control, potentially allowing attackers to exploit the exposed file structure.\n\n## Remediations\n\n- **Do** restrict access to sensitive directories and files to prevent unauthorized access. Implementing access controls ensures that only authorized users can view or interact with specific file directories.\n\n## References\n\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 40,
      "full_filename": "/scan/data/static/codefixes/accessLogDisclosureChallenge_2.ts",
      "filename": "data/static/codefixes/accessLogDisclosureChallenge_2.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 40,
        "end": 40,
        "column": { "start": 3, "end": 109 }
      },
      "sink": {
        "start": 40,
        "end": 40,
        "column": { "start": 3, "end": 109 },
        "content": ""
      },
      "parent_line_number": 40,
      "fingerprint": "7431053925541a9e4feb79b7adbba3a3_1",
      "old_fingerprint": "aa957db5411efc85bc38141d2c580be1_22",
      "code_extract": "  app.use('/.well-known', serveIndexMiddleware, serveIndex('.well-known', { icons: true, view: 'details' }))"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction on directory listing",
      "description": "## Description\n\nExposing a directory listing without restrictions can lead to unauthorized access to sensitive data or source code. This vulnerability occurs when the file structure of a server or application is made visible to users without proper access control, potentially allowing attackers to exploit the exposed file structure.\n\n## Remediations\n\n- **Do** restrict access to sensitive directories and files to prevent unauthorized access. Implementing access controls ensures that only authorized users can view or interact with specific file directories.\n\n## References\n\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 44,
      "full_filename": "/scan/data/static/codefixes/accessLogDisclosureChallenge_2.ts",
      "filename": "data/static/codefixes/accessLogDisclosureChallenge_2.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 44,
        "end": 44,
        "column": { "start": 3, "end": 115 }
      },
      "sink": {
        "start": 44,
        "end": 44,
        "column": { "start": 3, "end": 115 },
        "content": ""
      },
      "parent_line_number": 44,
      "fingerprint": "7431053925541a9e4feb79b7adbba3a3_2",
      "old_fingerprint": "aa957db5411efc85bc38141d2c580be1_24",
      "code_extract": "  app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction on directory listing",
      "description": "## Description\n\nExposing a directory listing without restrictions can lead to unauthorized access to sensitive data or source code. This vulnerability occurs when the file structure of a server or application is made visible to users without proper access control, potentially allowing attackers to exploit the exposed file structure.\n\n## Remediations\n\n- **Do** restrict access to sensitive directories and files to prevent unauthorized access. Implementing access controls ensures that only authorized users can view or interact with specific file directories.\n\n## References\n\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 48,
      "full_filename": "/scan/data/static/codefixes/accessLogDisclosureChallenge_2.ts",
      "filename": "data/static/codefixes/accessLogDisclosureChallenge_2.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 48, "end": 48, "column": { "start": 3, "end": 86 } },
      "sink": {
        "start": 48,
        "end": 48,
        "column": { "start": 3, "end": 86 },
        "content": ""
      },
      "parent_line_number": 48,
      "fingerprint": "7431053925541a9e4feb79b7adbba3a3_3",
      "old_fingerprint": "aa957db5411efc85bc38141d2c580be1_25",
      "code_extract": "  app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true }))"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction on directory listing",
      "description": "## Description\n\nExposing a directory listing without restrictions can lead to unauthorized access to sensitive data or source code. This vulnerability occurs when the file structure of a server or application is made visible to users without proper access control, potentially allowing attackers to exploit the exposed file structure.\n\n## Remediations\n\n- **Do** restrict access to sensitive directories and files to prevent unauthorized access. Implementing access controls ensures that only authorized users can view or interact with specific file directories.\n\n## References\n\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 2,
      "full_filename": "/scan/data/static/codefixes/accessLogDisclosureChallenge_3.ts",
      "filename": "data/static/codefixes/accessLogDisclosureChallenge_3.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 2, "end": 2, "column": { "start": 3, "end": 76 } },
      "sink": {
        "start": 2,
        "end": 2,
        "column": { "start": 3, "end": 76 },
        "content": ""
      },
      "parent_line_number": 2,
      "fingerprint": "1bde540dc2dc7eadc0a5563ef8d50744_0",
      "old_fingerprint": "e3fc06c5f7ccdf000d3f6f6afa39f90b_1",
      "code_extract": "  app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction on directory listing",
      "description": "## Description\n\nExposing a directory listing without restrictions can lead to unauthorized access to sensitive data or source code. This vulnerability occurs when the file structure of a server or application is made visible to users without proper access control, potentially allowing attackers to exploit the exposed file structure.\n\n## Remediations\n\n- **Do** restrict access to sensitive directories and files to prevent unauthorized access. Implementing access controls ensures that only authorized users can view or interact with specific file directories.\n\n## References\n\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 6,
      "full_filename": "/scan/data/static/codefixes/accessLogDisclosureChallenge_3.ts",
      "filename": "data/static/codefixes/accessLogDisclosureChallenge_3.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 6, "end": 6, "column": { "start": 3, "end": 109 } },
      "sink": {
        "start": 6,
        "end": 6,
        "column": { "start": 3, "end": 109 },
        "content": ""
      },
      "parent_line_number": 6,
      "fingerprint": "1bde540dc2dc7eadc0a5563ef8d50744_1",
      "old_fingerprint": "e3fc06c5f7ccdf000d3f6f6afa39f90b_3",
      "code_extract": "  app.use('/.well-known', serveIndexMiddleware, serveIndex('.well-known', { icons: true, view: 'details' }))"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction on directory listing",
      "description": "## Description\n\nExposing a directory listing without restrictions can lead to unauthorized access to sensitive data or source code. This vulnerability occurs when the file structure of a server or application is made visible to users without proper access control, potentially allowing attackers to exploit the exposed file structure.\n\n## Remediations\n\n- **Do** restrict access to sensitive directories and files to prevent unauthorized access. Implementing access controls ensures that only authorized users can view or interact with specific file directories.\n\n## References\n\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 10,
      "full_filename": "/scan/data/static/codefixes/accessLogDisclosureChallenge_3.ts",
      "filename": "data/static/codefixes/accessLogDisclosureChallenge_3.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 10,
        "end": 10,
        "column": { "start": 3, "end": 115 }
      },
      "sink": {
        "start": 10,
        "end": 10,
        "column": { "start": 3, "end": 115 },
        "content": ""
      },
      "parent_line_number": 10,
      "fingerprint": "1bde540dc2dc7eadc0a5563ef8d50744_2",
      "old_fingerprint": "e3fc06c5f7ccdf000d3f6f6afa39f90b_5",
      "code_extract": "  app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction on directory listing",
      "description": "## Description\n\nExposing a directory listing without restrictions can lead to unauthorized access to sensitive data or source code. This vulnerability occurs when the file structure of a server or application is made visible to users without proper access control, potentially allowing attackers to exploit the exposed file structure.\n\n## Remediations\n\n- **Do** restrict access to sensitive directories and files to prevent unauthorized access. Implementing access controls ensures that only authorized users can view or interact with specific file directories.\n\n## References\n\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 14,
      "full_filename": "/scan/data/static/codefixes/accessLogDisclosureChallenge_3.ts",
      "filename": "data/static/codefixes/accessLogDisclosureChallenge_3.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 14,
        "end": 14,
        "column": { "start": 3, "end": 103 }
      },
      "sink": {
        "start": 14,
        "end": 14,
        "column": { "start": 3, "end": 103 },
        "content": ""
      },
      "parent_line_number": 14,
      "fingerprint": "1bde540dc2dc7eadc0a5563ef8d50744_3",
      "old_fingerprint": "e3fc06c5f7ccdf000d3f6f6afa39f90b_8",
      "code_extract": "  app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction on directory listing",
      "description": "## Description\n\nExposing a directory listing without restrictions can lead to unauthorized access to sensitive data or source code. This vulnerability occurs when the file structure of a server or application is made visible to users without proper access control, potentially allowing attackers to exploit the exposed file structure.\n\n## Remediations\n\n- **Do** restrict access to sensitive directories and files to prevent unauthorized access. Implementing access controls ensures that only authorized users can view or interact with specific file directories.\n\n## References\n\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 2,
      "full_filename": "/scan/data/static/codefixes/accessLogDisclosureChallenge_4.ts",
      "filename": "data/static/codefixes/accessLogDisclosureChallenge_4.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 2, "end": 2, "column": { "start": 3, "end": 76 } },
      "sink": {
        "start": 2,
        "end": 2,
        "column": { "start": 3, "end": 76 },
        "content": ""
      },
      "parent_line_number": 2,
      "fingerprint": "87838e0cadbae4b996ea2ba0ce225f2e_0",
      "old_fingerprint": "8efc527c5c611b6f82576ecca6a12ef9_2",
      "code_extract": "  app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction on directory listing",
      "description": "## Description\n\nExposing a directory listing without restrictions can lead to unauthorized access to sensitive data or source code. This vulnerability occurs when the file structure of a server or application is made visible to users without proper access control, potentially allowing attackers to exploit the exposed file structure.\n\n## Remediations\n\n- **Do** restrict access to sensitive directories and files to prevent unauthorized access. Implementing access controls ensures that only authorized users can view or interact with specific file directories.\n\n## References\n\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 8,
      "full_filename": "/scan/data/static/codefixes/accessLogDisclosureChallenge_4.ts",
      "filename": "data/static/codefixes/accessLogDisclosureChallenge_4.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 8, "end": 8, "column": { "start": 3, "end": 109 } },
      "sink": {
        "start": 8,
        "end": 8,
        "column": { "start": 3, "end": 109 },
        "content": ""
      },
      "parent_line_number": 8,
      "fingerprint": "87838e0cadbae4b996ea2ba0ce225f2e_1",
      "old_fingerprint": "8efc527c5c611b6f82576ecca6a12ef9_4",
      "code_extract": "  app.use('/.well-known', serveIndexMiddleware, serveIndex('.well-known', { icons: true, view: 'details' }))"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction on directory listing",
      "description": "## Description\n\nExposing a directory listing without restrictions can lead to unauthorized access to sensitive data or source code. This vulnerability occurs when the file structure of a server or application is made visible to users without proper access control, potentially allowing attackers to exploit the exposed file structure.\n\n## Remediations\n\n- **Do** restrict access to sensitive directories and files to prevent unauthorized access. Implementing access controls ensures that only authorized users can view or interact with specific file directories.\n\n## References\n\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 12,
      "full_filename": "/scan/data/static/codefixes/accessLogDisclosureChallenge_4.ts",
      "filename": "data/static/codefixes/accessLogDisclosureChallenge_4.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 12,
        "end": 12,
        "column": { "start": 3, "end": 115 }
      },
      "sink": {
        "start": 12,
        "end": 12,
        "column": { "start": 3, "end": 115 },
        "content": ""
      },
      "parent_line_number": 12,
      "fingerprint": "87838e0cadbae4b996ea2ba0ce225f2e_2",
      "old_fingerprint": "8efc527c5c611b6f82576ecca6a12ef9_7",
      "code_extract": "  app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction on directory listing",
      "description": "## Description\n\nExposing a directory listing without restrictions can lead to unauthorized access to sensitive data or source code. This vulnerability occurs when the file structure of a server or application is made visible to users without proper access control, potentially allowing attackers to exploit the exposed file structure.\n\n## Remediations\n\n- **Do** restrict access to sensitive directories and files to prevent unauthorized access. Implementing access controls ensures that only authorized users can view or interact with specific file directories.\n\n## References\n\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 1,
      "full_filename": "/scan/data/static/codefixes/directoryListingChallenge_1_correct.ts",
      "filename": "data/static/codefixes/directoryListingChallenge_1_correct.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 1, "end": 1, "column": { "start": 1, "end": 107 } },
      "sink": {
        "start": 1,
        "end": 1,
        "column": { "start": 1, "end": 107 },
        "content": ""
      },
      "parent_line_number": 1,
      "fingerprint": "d0c7f09f2c9927118811b6920976dbde_0",
      "old_fingerprint": "0d6c2b56cf7543ca18bb52f6b628ca3b_0",
      "code_extract": "app.use('/.well-known', serveIndexMiddleware, serveIndex('.well-known', { icons: true, view: 'details' }))"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction on directory listing",
      "description": "## Description\n\nExposing a directory listing without restrictions can lead to unauthorized access to sensitive data or source code. This vulnerability occurs when the file structure of a server or application is made visible to users without proper access control, potentially allowing attackers to exploit the exposed file structure.\n\n## Remediations\n\n- **Do** restrict access to sensitive directories and files to prevent unauthorized access. Implementing access controls ensures that only authorized users can view or interact with specific file directories.\n\n## References\n\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 12,
      "full_filename": "/scan/data/static/codefixes/directoryListingChallenge_2.ts",
      "filename": "data/static/codefixes/directoryListingChallenge_2.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 12,
        "end": 12,
        "column": { "start": 3, "end": 109 }
      },
      "sink": {
        "start": 12,
        "end": 12,
        "column": { "start": 3, "end": 109 },
        "content": ""
      },
      "parent_line_number": 12,
      "fingerprint": "84a18ba9c67531b0f1271ecfad9a6522_0",
      "old_fingerprint": "e1e8402a3a9da53001fa43b8b87a5c9b_6",
      "code_extract": "  app.use('/.well-known', serveIndexMiddleware, serveIndex('.well-known', { icons: true, view: 'details' }))"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction on directory listing",
      "description": "## Description\n\nExposing a directory listing without restrictions can lead to unauthorized access to sensitive data or source code. This vulnerability occurs when the file structure of a server or application is made visible to users without proper access control, potentially allowing attackers to exploit the exposed file structure.\n\n## Remediations\n\n- **Do** restrict access to sensitive directories and files to prevent unauthorized access. Implementing access controls ensures that only authorized users can view or interact with specific file directories.\n\n## References\n\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 17,
      "full_filename": "/scan/data/static/codefixes/directoryListingChallenge_2.ts",
      "filename": "data/static/codefixes/directoryListingChallenge_2.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 17,
        "end": 17,
        "column": { "start": 3, "end": 115 }
      },
      "sink": {
        "start": 17,
        "end": 17,
        "column": { "start": 3, "end": 115 },
        "content": ""
      },
      "parent_line_number": 17,
      "fingerprint": "84a18ba9c67531b0f1271ecfad9a6522_1",
      "old_fingerprint": "e1e8402a3a9da53001fa43b8b87a5c9b_9",
      "code_extract": "  app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction on directory listing",
      "description": "## Description\n\nExposing a directory listing without restrictions can lead to unauthorized access to sensitive data or source code. This vulnerability occurs when the file structure of a server or application is made visible to users without proper access control, potentially allowing attackers to exploit the exposed file structure.\n\n## Remediations\n\n- **Do** restrict access to sensitive directories and files to prevent unauthorized access. Implementing access controls ensures that only authorized users can view or interact with specific file directories.\n\n## References\n\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 21,
      "full_filename": "/scan/data/static/codefixes/directoryListingChallenge_2.ts",
      "filename": "data/static/codefixes/directoryListingChallenge_2.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 21,
        "end": 21,
        "column": { "start": 3, "end": 103 }
      },
      "sink": {
        "start": 21,
        "end": 21,
        "column": { "start": 3, "end": 103 },
        "content": ""
      },
      "parent_line_number": 21,
      "fingerprint": "84a18ba9c67531b0f1271ecfad9a6522_2",
      "old_fingerprint": "e1e8402a3a9da53001fa43b8b87a5c9b_11",
      "code_extract": "  app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction on directory listing",
      "description": "## Description\n\nExposing a directory listing without restrictions can lead to unauthorized access to sensitive data or source code. This vulnerability occurs when the file structure of a server or application is made visible to users without proper access control, potentially allowing attackers to exploit the exposed file structure.\n\n## Remediations\n\n- **Do** restrict access to sensitive directories and files to prevent unauthorized access. Implementing access controls ensures that only authorized users can view or interact with specific file directories.\n\n## References\n\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 25,
      "full_filename": "/scan/data/static/codefixes/directoryListingChallenge_3.ts",
      "filename": "data/static/codefixes/directoryListingChallenge_3.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 25, "end": 25, "column": { "start": 3, "end": 76 } },
      "sink": {
        "start": 25,
        "end": 25,
        "column": { "start": 3, "end": 76 },
        "content": ""
      },
      "parent_line_number": 25,
      "fingerprint": "8ebcfc95a36b5c20927ea9e466b8715c_0",
      "old_fingerprint": "cf5ab1d2e64bfe1784f721b8ccc74cce_13",
      "code_extract": "  app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction on directory listing",
      "description": "## Description\n\nExposing a directory listing without restrictions can lead to unauthorized access to sensitive data or source code. This vulnerability occurs when the file structure of a server or application is made visible to users without proper access control, potentially allowing attackers to exploit the exposed file structure.\n\n## Remediations\n\n- **Do** restrict access to sensitive directories and files to prevent unauthorized access. Implementing access controls ensures that only authorized users can view or interact with specific file directories.\n\n## References\n\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 27,
      "full_filename": "/scan/data/static/codefixes/directoryListingChallenge_3.ts",
      "filename": "data/static/codefixes/directoryListingChallenge_3.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 27,
        "end": 27,
        "column": { "start": 3, "end": 109 }
      },
      "sink": {
        "start": 27,
        "end": 27,
        "column": { "start": 3, "end": 109 },
        "content": ""
      },
      "parent_line_number": 27,
      "fingerprint": "8ebcfc95a36b5c20927ea9e466b8715c_1",
      "old_fingerprint": "cf5ab1d2e64bfe1784f721b8ccc74cce_14",
      "code_extract": "  app.use('/.well-known', serveIndexMiddleware, serveIndex('.well-known', { icons: true, view: 'details' }))"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction on directory listing",
      "description": "## Description\n\nExposing a directory listing without restrictions can lead to unauthorized access to sensitive data or source code. This vulnerability occurs when the file structure of a server or application is made visible to users without proper access control, potentially allowing attackers to exploit the exposed file structure.\n\n## Remediations\n\n- **Do** restrict access to sensitive directories and files to prevent unauthorized access. Implementing access controls ensures that only authorized users can view or interact with specific file directories.\n\n## References\n\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 31,
      "full_filename": "/scan/data/static/codefixes/directoryListingChallenge_3.ts",
      "filename": "data/static/codefixes/directoryListingChallenge_3.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 31,
        "end": 31,
        "column": { "start": 3, "end": 115 }
      },
      "sink": {
        "start": 31,
        "end": 31,
        "column": { "start": 3, "end": 115 },
        "content": ""
      },
      "parent_line_number": 31,
      "fingerprint": "8ebcfc95a36b5c20927ea9e466b8715c_2",
      "old_fingerprint": "cf5ab1d2e64bfe1784f721b8ccc74cce_16",
      "code_extract": "  app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction on directory listing",
      "description": "## Description\n\nExposing a directory listing without restrictions can lead to unauthorized access to sensitive data or source code. This vulnerability occurs when the file structure of a server or application is made visible to users without proper access control, potentially allowing attackers to exploit the exposed file structure.\n\n## Remediations\n\n- **Do** restrict access to sensitive directories and files to prevent unauthorized access. Implementing access controls ensures that only authorized users can view or interact with specific file directories.\n\n## References\n\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 35,
      "full_filename": "/scan/data/static/codefixes/directoryListingChallenge_3.ts",
      "filename": "data/static/codefixes/directoryListingChallenge_3.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 35,
        "end": 35,
        "column": { "start": 3, "end": 103 }
      },
      "sink": {
        "start": 35,
        "end": 35,
        "column": { "start": 3, "end": 103 },
        "content": ""
      },
      "parent_line_number": 35,
      "fingerprint": "8ebcfc95a36b5c20927ea9e466b8715c_3",
      "old_fingerprint": "cf5ab1d2e64bfe1784f721b8ccc74cce_19",
      "code_extract": "  app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction on directory listing",
      "description": "## Description\n\nExposing a directory listing without restrictions can lead to unauthorized access to sensitive data or source code. This vulnerability occurs when the file structure of a server or application is made visible to users without proper access control, potentially allowing attackers to exploit the exposed file structure.\n\n## Remediations\n\n- **Do** restrict access to sensitive directories and files to prevent unauthorized access. Implementing access controls ensures that only authorized users can view or interact with specific file directories.\n\n## References\n\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 20,
      "full_filename": "/scan/data/static/codefixes/directoryListingChallenge_4.ts",
      "filename": "data/static/codefixes/directoryListingChallenge_4.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 20, "end": 20, "column": { "start": 2, "end": 76 } },
      "sink": {
        "start": 20,
        "end": 20,
        "column": { "start": 2, "end": 76 },
        "content": ""
      },
      "parent_line_number": 20,
      "fingerprint": "d1d7fd4f95a122aab479067df9323e6c_0",
      "old_fingerprint": "1b2442e26dfe3e12a530548a8dec690e_10",
      "code_extract": " app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: false }))"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction on directory listing",
      "description": "## Description\n\nExposing a directory listing without restrictions can lead to unauthorized access to sensitive data or source code. This vulnerability occurs when the file structure of a server or application is made visible to users without proper access control, potentially allowing attackers to exploit the exposed file structure.\n\n## Remediations\n\n- **Do** restrict access to sensitive directories and files to prevent unauthorized access. Implementing access controls ensures that only authorized users can view or interact with specific file directories.\n\n## References\n\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 24,
      "full_filename": "/scan/data/static/codefixes/directoryListingChallenge_4.ts",
      "filename": "data/static/codefixes/directoryListingChallenge_4.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 24,
        "end": 24,
        "column": { "start": 2, "end": 108 }
      },
      "sink": {
        "start": 24,
        "end": 24,
        "column": { "start": 2, "end": 108 },
        "content": ""
      },
      "parent_line_number": 24,
      "fingerprint": "d1d7fd4f95a122aab479067df9323e6c_1",
      "old_fingerprint": "1b2442e26dfe3e12a530548a8dec690e_12",
      "code_extract": " app.use('/.well-known', serveIndexMiddleware, serveIndex('.well-known', { icons: true, view: 'details' }))"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction on directory listing",
      "description": "## Description\n\nExposing a directory listing without restrictions can lead to unauthorized access to sensitive data or source code. This vulnerability occurs when the file structure of a server or application is made visible to users without proper access control, potentially allowing attackers to exploit the exposed file structure.\n\n## Remediations\n\n- **Do** restrict access to sensitive directories and files to prevent unauthorized access. Implementing access controls ensures that only authorized users can view or interact with specific file directories.\n\n## References\n\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 28,
      "full_filename": "/scan/data/static/codefixes/directoryListingChallenge_4.ts",
      "filename": "data/static/codefixes/directoryListingChallenge_4.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 28,
        "end": 28,
        "column": { "start": 2, "end": 114 }
      },
      "sink": {
        "start": 28,
        "end": 28,
        "column": { "start": 2, "end": 114 },
        "content": ""
      },
      "parent_line_number": 28,
      "fingerprint": "d1d7fd4f95a122aab479067df9323e6c_2",
      "old_fingerprint": "1b2442e26dfe3e12a530548a8dec690e_15",
      "code_extract": " app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction on directory listing",
      "description": "## Description\n\nExposing a directory listing without restrictions can lead to unauthorized access to sensitive data or source code. This vulnerability occurs when the file structure of a server or application is made visible to users without proper access control, potentially allowing attackers to exploit the exposed file structure.\n\n## Remediations\n\n- **Do** restrict access to sensitive directories and files to prevent unauthorized access. Implementing access controls ensures that only authorized users can view or interact with specific file directories.\n\n## References\n\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 32,
      "full_filename": "/scan/data/static/codefixes/directoryListingChallenge_4.ts",
      "filename": "data/static/codefixes/directoryListingChallenge_4.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 32,
        "end": 32,
        "column": { "start": 2, "end": 102 }
      },
      "sink": {
        "start": 32,
        "end": 32,
        "column": { "start": 2, "end": 102 },
        "content": ""
      },
      "parent_line_number": 32,
      "fingerprint": "d1d7fd4f95a122aab479067df9323e6c_3",
      "old_fingerprint": "1b2442e26dfe3e12a530548a8dec690e_18",
      "code_extract": " app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' }))"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction on directory listing",
      "description": "## Description\n\nExposing a directory listing without restrictions can lead to unauthorized access to sensitive data or source code. This vulnerability occurs when the file structure of a server or application is made visible to users without proper access control, potentially allowing attackers to exploit the exposed file structure.\n\n## Remediations\n\n- **Do** restrict access to sensitive directories and files to prevent unauthorized access. Implementing access controls ensures that only authorized users can view or interact with specific file directories.\n\n## References\n\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 268,
      "full_filename": "/scan/server.ts",
      "filename": "server.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 268,
        "end": 268,
        "column": { "start": 3, "end": 76 }
      },
      "sink": {
        "start": 268,
        "end": 268,
        "column": { "start": 3, "end": 76 },
        "content": ""
      },
      "parent_line_number": 268,
      "fingerprint": "c539465e8119e4d020831d9f6cf0a973_0",
      "old_fingerprint": "9560a32d4b80047b6e16ea0c68ad5b46_26",
      "code_extract": "  app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true })) // vuln-code-snippet vuln-line directoryListingChallenge"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction on directory listing",
      "description": "## Description\n\nExposing a directory listing without restrictions can lead to unauthorized access to sensitive data or source code. This vulnerability occurs when the file structure of a server or application is made visible to users without proper access control, potentially allowing attackers to exploit the exposed file structure.\n\n## Remediations\n\n- **Do** restrict access to sensitive directories and files to prevent unauthorized access. Implementing access controls ensures that only authorized users can view or interact with specific file directories.\n\n## References\n\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 272,
      "full_filename": "/scan/server.ts",
      "filename": "server.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 272,
        "end": 272,
        "column": { "start": 3, "end": 109 }
      },
      "sink": {
        "start": 272,
        "end": 272,
        "column": { "start": 3, "end": 109 },
        "content": ""
      },
      "parent_line_number": 272,
      "fingerprint": "c539465e8119e4d020831d9f6cf0a973_1",
      "old_fingerprint": "9560a32d4b80047b6e16ea0c68ad5b46_27",
      "code_extract": "  app.use('/.well-known', serveIndexMiddleware, serveIndex('.well-known', { icons: true, view: 'details' }))"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction on directory listing",
      "description": "## Description\n\nExposing a directory listing without restrictions can lead to unauthorized access to sensitive data or source code. This vulnerability occurs when the file structure of a server or application is made visible to users without proper access control, potentially allowing attackers to exploit the exposed file structure.\n\n## Remediations\n\n- **Do** restrict access to sensitive directories and files to prevent unauthorized access. Implementing access controls ensures that only authorized users can view or interact with specific file directories.\n\n## References\n\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 276,
      "full_filename": "/scan/server.ts",
      "filename": "server.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 276,
        "end": 276,
        "column": { "start": 3, "end": 115 }
      },
      "sink": {
        "start": 276,
        "end": 276,
        "column": { "start": 3, "end": 115 },
        "content": ""
      },
      "parent_line_number": 276,
      "fingerprint": "c539465e8119e4d020831d9f6cf0a973_2",
      "old_fingerprint": "9560a32d4b80047b6e16ea0c68ad5b46_28",
      "code_extract": "  app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view: 'details' }))"
    },
    {
      "cwe_ids": ["548"],
      "id": "javascript_express_exposed_dir_listing",
      "title": "Missing access restriction on directory listing",
      "description": "## Description\n\nExposing a directory listing without restrictions can lead to unauthorized access to sensitive data or source code. This vulnerability occurs when the file structure of a server or application is made visible to users without proper access control, potentially allowing attackers to exploit the exposed file structure.\n\n## Remediations\n\n- **Do** restrict access to sensitive directories and files to prevent unauthorized access. Implementing access controls ensures that only authorized users can view or interact with specific file directories.\n\n## References\n\n- [Express Serve index middleware](https://expressjs.com/en/resources/middleware/serve-index.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_exposed_dir_listing",
      "line_number": 280,
      "full_filename": "/scan/server.ts",
      "filename": "server.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 280,
        "end": 280,
        "column": { "start": 3, "end": 103 }
      },
      "sink": {
        "start": 280,
        "end": 280,
        "column": { "start": 3, "end": 103 },
        "content": ""
      },
      "parent_line_number": 280,
      "fingerprint": "c539465e8119e4d020831d9f6cf0a973_3",
      "old_fingerprint": "9560a32d4b80047b6e16ea0c68ad5b46_29",
      "code_extract": "  app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details' })) // vuln-code-snippet vuln-line accessLogDisclosureChallenge"
    },
    {
      "cwe_ids": ["330"],
      "id": "javascript_lang_insufficiently_random_values",
      "title": "Usage of insufficient random value",
      "description": "## Description\n\nUsing predictable random values compromises your application's security, particularly if these values serve security-related functions.\n\n## Remediations\n\n- **Do** use a robust library for generating random values to enhance security.\n  ```javascript\n  const crypto = require('crypto');\n  crypto.randomBytes(16).toString('hex');\n  ```",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_insufficiently_random_values",
      "line_number": 159,
      "full_filename": "/scan/frontend/src/app/code-snippet/code-snippet.component.ts",
      "filename": "frontend/src/app/code-snippet/code-snippet.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 159,
        "end": 159,
        "column": { "start": 49, "end": 62 }
      },
      "sink": {
        "start": 159,
        "end": 159,
        "column": { "start": 49, "end": 62 },
        "content": ""
      },
      "parent_line_number": 159,
      "fingerprint": "d05d15f090d0f9089c846241467e2795_0",
      "old_fingerprint": "af8051f0a207952b361949eaaf3c4f30_6",
      "code_extract": "      .map((fix, index) =\u003e ({ fix, index, sort: Math.random() }))"
    },
    {
      "cwe_ids": ["330"],
      "id": "javascript_lang_insufficiently_random_values",
      "title": "Usage of insufficient random value",
      "description": "## Description\n\nUsing predictable random values compromises your application's security, particularly if these values serve security-related functions.\n\n## Remediations\n\n- **Do** use a robust library for generating random values to enhance security.\n  ```javascript\n  const crypto = require('crypto');\n  crypto.randomBytes(16).toString('hex');\n  ```",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_insufficiently_random_values",
      "line_number": 55,
      "full_filename": "/scan/lib/insecurity.ts",
      "filename": "lib/insecurity.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": { "start": 56, "end": 69 }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": { "start": 56, "end": 69 },
        "content": ""
      },
      "parent_line_number": 55,
      "fingerprint": "b1c37456ddbb554e7d59c089b82f6c63_0",
      "old_fingerprint": "f7a5105e1a04d6f94e544267795aac5d_5",
      "code_extract": "export const denyAll = () =\u003e expressJwt({ secret: '' + Math.random() } as any)"
    },
    {
      "cwe_ids": ["330"],
      "id": "javascript_lang_insufficiently_random_values",
      "title": "Usage of insufficient random value",
      "description": "## Description\n\nUsing predictable random values compromises your application's security, particularly if these values serve security-related functions.\n\n## Remediations\n\n- **Do** use a robust library for generating random values to enhance security.\n  ```javascript\n  const crypto = require('crypto');\n  crypto.randomBytes(16).toString('hex');\n  ```",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_insufficiently_random_values",
      "line_number": 15,
      "full_filename": "/scan/routes/captcha.ts",
      "filename": "routes/captcha.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 15,
        "end": 15,
        "column": { "start": 35, "end": 48 }
      },
      "sink": {
        "start": 15,
        "end": 15,
        "column": { "start": 35, "end": 48 },
        "content": ""
      },
      "parent_line_number": 15,
      "fingerprint": "288bb1ce6419d6cc644d436b38e0f444_0",
      "old_fingerprint": "ea67dcb61ecf2fa9e05ed4a769b0e070_0",
      "code_extract": "    const firstTerm = Math.floor((Math.random() * 10) + 1)"
    },
    {
      "cwe_ids": ["330"],
      "id": "javascript_lang_insufficiently_random_values",
      "title": "Usage of insufficient random value",
      "description": "## Description\n\nUsing predictable random values compromises your application's security, particularly if these values serve security-related functions.\n\n## Remediations\n\n- **Do** use a robust library for generating random values to enhance security.\n  ```javascript\n  const crypto = require('crypto');\n  crypto.randomBytes(16).toString('hex');\n  ```",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_insufficiently_random_values",
      "line_number": 16,
      "full_filename": "/scan/routes/captcha.ts",
      "filename": "routes/captcha.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 16,
        "end": 16,
        "column": { "start": 36, "end": 49 }
      },
      "sink": {
        "start": 16,
        "end": 16,
        "column": { "start": 36, "end": 49 },
        "content": ""
      },
      "parent_line_number": 16,
      "fingerprint": "288bb1ce6419d6cc644d436b38e0f444_1",
      "old_fingerprint": "ea67dcb61ecf2fa9e05ed4a769b0e070_1",
      "code_extract": "    const secondTerm = Math.floor((Math.random() * 10) + 1)"
    },
    {
      "cwe_ids": ["330"],
      "id": "javascript_lang_insufficiently_random_values",
      "title": "Usage of insufficient random value",
      "description": "## Description\n\nUsing predictable random values compromises your application's security, particularly if these values serve security-related functions.\n\n## Remediations\n\n- **Do** use a robust library for generating random values to enhance security.\n  ```javascript\n  const crypto = require('crypto');\n  crypto.randomBytes(16).toString('hex');\n  ```",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_insufficiently_random_values",
      "line_number": 17,
      "full_filename": "/scan/routes/captcha.ts",
      "filename": "routes/captcha.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 17,
        "end": 17,
        "column": { "start": 35, "end": 48 }
      },
      "sink": {
        "start": 17,
        "end": 17,
        "column": { "start": 35, "end": 48 },
        "content": ""
      },
      "parent_line_number": 17,
      "fingerprint": "288bb1ce6419d6cc644d436b38e0f444_2",
      "old_fingerprint": "ea67dcb61ecf2fa9e05ed4a769b0e070_2",
      "code_extract": "    const thirdTerm = Math.floor((Math.random() * 10) + 1)"
    },
    {
      "cwe_ids": ["330"],
      "id": "javascript_lang_insufficiently_random_values",
      "title": "Usage of insufficient random value",
      "description": "## Description\n\nUsing predictable random values compromises your application's security, particularly if these values serve security-related functions.\n\n## Remediations\n\n- **Do** use a robust library for generating random values to enhance security.\n  ```javascript\n  const crypto = require('crypto');\n  crypto.randomBytes(16).toString('hex');\n  ```",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_insufficiently_random_values",
      "line_number": 19,
      "full_filename": "/scan/routes/captcha.ts",
      "filename": "routes/captcha.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 19,
        "end": 19,
        "column": { "start": 49, "end": 62 }
      },
      "sink": {
        "start": 19,
        "end": 19,
        "column": { "start": 49, "end": 62 },
        "content": ""
      },
      "parent_line_number": 19,
      "fingerprint": "288bb1ce6419d6cc644d436b38e0f444_3",
      "old_fingerprint": "ea67dcb61ecf2fa9e05ed4a769b0e070_3",
      "code_extract": "    const firstOperator = operators[Math.floor((Math.random() * 3))]"
    },
    {
      "cwe_ids": ["330"],
      "id": "javascript_lang_insufficiently_random_values",
      "title": "Usage of insufficient random value",
      "description": "## Description\n\nUsing predictable random values compromises your application's security, particularly if these values serve security-related functions.\n\n## Remediations\n\n- **Do** use a robust library for generating random values to enhance security.\n  ```javascript\n  const crypto = require('crypto');\n  crypto.randomBytes(16).toString('hex');\n  ```",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_insufficiently_random_values",
      "line_number": 20,
      "full_filename": "/scan/routes/captcha.ts",
      "filename": "routes/captcha.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 20,
        "end": 20,
        "column": { "start": 50, "end": 63 }
      },
      "sink": {
        "start": 20,
        "end": 20,
        "column": { "start": 50, "end": 63 },
        "content": ""
      },
      "parent_line_number": 20,
      "fingerprint": "288bb1ce6419d6cc644d436b38e0f444_4",
      "old_fingerprint": "ea67dcb61ecf2fa9e05ed4a769b0e070_4",
      "code_extract": "    const secondOperator = operators[Math.floor((Math.random() * 3))]"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 17,
      "full_filename": "/scan/app.ts",
      "filename": "app.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 17, "end": 17, "column": { "start": 5, "end": 54 } },
      "sink": {
        "start": 17,
        "end": 17,
        "column": { "start": 5, "end": 54 },
        "content": ""
      },
      "parent_line_number": 17,
      "fingerprint": "1ce8e2ab0d8936f4ecedbb9a38d5dfbf_0",
      "old_fingerprint": "8b918b63590b6b9d5ac000a7a1723422_9",
      "code_extract": "    console.error('Application startup failed:', err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 23,
      "full_filename": "/scan/data/static/codefixes/accessLogDisclosureChallenge_1_correct.ts",
      "filename": "data/static/codefixes/accessLogDisclosureChallenge_1_correct.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 23, "end": 23, "column": { "start": 5, "end": 70 } },
      "sink": {
        "start": 23,
        "end": 23,
        "column": { "start": 5, "end": 70 },
        "content": ""
      },
      "parent_line_number": 23,
      "fingerprint": "8c8a91af8262b3a912c4ab446ee517a0_0",
      "old_fingerprint": "3c360582e8f16823b2c6a4510e8c5472_24",
      "code_extract": "    console.warn('Path traversal attempt detected:', req.originalUrl);"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 26,
      "full_filename": "/scan/data/static/codefixes/accessLogDisclosureChallenge_2.ts",
      "filename": "data/static/codefixes/accessLogDisclosureChallenge_2.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 26, "end": 26, "column": { "start": 3, "end": 42 } },
      "sink": {
        "start": 26,
        "end": 26,
        "column": { "start": 3, "end": 42 },
        "content": ""
      },
      "parent_line_number": 26,
      "fingerprint": "0c6f945abb58ff268147256e6bb7ca03_0",
      "old_fingerprint": "f59aa1c90a89ced808cfd4bddcdd7917_26",
      "code_extract": "  console.log(req.method + ' ' + req.url)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 58,
      "full_filename": "/scan/data/static/codefixes/accessLogDisclosureChallenge_2.ts",
      "filename": "data/static/codefixes/accessLogDisclosureChallenge_2.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 58, "end": 58, "column": { "start": 3, "end": 55 } },
      "sink": {
        "start": 58,
        "end": 58,
        "column": { "start": 3, "end": 55 },
        "content": ""
      },
      "parent_line_number": 58,
      "fingerprint": "0c6f945abb58ff268147256e6bb7ca03_1",
      "old_fingerprint": "f59aa1c90a89ced808cfd4bddcdd7917_74",
      "code_extract": "  console.log(`Example app listening on port ${port}`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 18,
      "full_filename": "/scan/data/static/codefixes/exposedMetricsChallenge_1.ts",
      "filename": "data/static/codefixes/exposedMetricsChallenge_1.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 18, "end": 18, "column": { "start": 6, "end": 72 } },
      "sink": {
        "start": 18,
        "end": 18,
        "column": { "start": 6, "end": 72 },
        "content": ""
      },
      "parent_line_number": 18,
      "fingerprint": "9062d4c297f222c7856291fe24ae141c_0",
      "old_fingerprint": "32ffc26f508973bb9f1a34a1ddc946e6_14",
      "code_extract": "+    logger.error('Error during sequelize sync or datacreator:', error)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 13,
      "full_filename": "/scan/data/static/codefixes/exposedMetricsChallenge_2.ts",
      "filename": "data/static/codefixes/exposedMetricsChallenge_2.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 13, "end": 13, "column": { "start": 6, "end": 56 } },
      "sink": {
        "start": 13,
        "end": 13,
        "column": { "start": 6, "end": 56 },
        "content": ""
      },
      "parent_line_number": 13,
      "fingerprint": "c206c1bce7ffa25bcf0c5f6a4c1c189b_0",
      "old_fingerprint": "3e3e209cd5d52ad51e9e72b1046bf927_5",
      "code_extract": "     logger.error('Error during data creation:', error)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 18,
      "full_filename": "/scan/data/static/codefixes/exposedMetricsChallenge_3_correct.ts",
      "filename": "data/static/codefixes/exposedMetricsChallenge_3_correct.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 18, "end": 18, "column": { "start": 5, "end": 83 } },
      "sink": {
        "start": 18,
        "end": 18,
        "column": { "start": 5, "end": 83 },
        "content": ""
      },
      "parent_line_number": 18,
      "fingerprint": "b73e8158047f238747e0a67fd45bd7f6_0",
      "old_fingerprint": "470b2426c1af3cf2dc581d5824a490c6_15",
      "code_extract": "    logger.info(colors.cyan(`Server listening on port ${colors.bold(`${port}`)}`))"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 21,
      "full_filename": "/scan/data/static/codefixes/exposedMetricsChallenge_3_correct.ts",
      "filename": "data/static/codefixes/exposedMetricsChallenge_3_correct.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 21,
        "end": 21,
        "column": { "start": 7, "end": 120 }
      },
      "sink": {
        "start": 21,
        "end": 21,
        "column": { "start": 7, "end": 120 },
        "content": ""
      },
      "parent_line_number": 21,
      "fingerprint": "b73e8158047f238747e0a67fd45bd7f6_1",
      "old_fingerprint": "470b2426c1af3cf2dc581d5824a490c6_19",
      "code_extract": "      logger.info(colors.cyan(`Server using proxy base path ${colors.bold(`${process.env.BASE_PATH}`)} for redirects`))"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 21,
      "full_filename": "/scan/data/static/codefixes/forgedReviewChallenge_2_correct.ts",
      "filename": "data/static/codefixes/forgedReviewChallenge_2_correct.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 21, "end": 21, "column": { "start": 9, "end": 27 } },
      "sink": {
        "start": 21,
        "end": 21,
        "column": { "start": 9, "end": 27 },
        "content": ""
      },
      "parent_line_number": 21,
      "fingerprint": "9466d1db922cd2659903fd9e255901d4_0",
      "old_fingerprint": "1354250751e30ba5b0f73090f2837a4e_20",
      "code_extract": "        console.error(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 32,
      "full_filename": "/scan/data/static/codefixes/registerAdminChallenge_1.ts",
      "filename": "data/static/codefixes/registerAdminChallenge_1.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 32,
        "end": 32,
        "column": { "start": 11, "end": 29 }
      },
      "sink": {
        "start": 32,
        "end": 32,
        "column": { "start": 11, "end": 29 },
        "content": ""
      },
      "parent_line_number": 32,
      "fingerprint": "b8d17717880e1bfcf8f0b5d88b51a25a_0",
      "old_fingerprint": "82af2cce0d80b6e8c8e6dfbf4bb65e75_34",
      "code_extract": "          console.error(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 37,
      "full_filename": "/scan/data/static/codefixes/registerAdminChallenge_1.ts",
      "filename": "data/static/codefixes/registerAdminChallenge_1.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": { "start": 13, "end": 76 }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": { "start": 13, "end": 76 },
        "content": ""
      },
      "parent_line_number": 37,
      "fingerprint": "b8d17717880e1bfcf8f0b5d88b51a25a_1",
      "old_fingerprint": "82af2cce0d80b6e8c8e6dfbf4bb65e75_40",
      "code_extract": "            console.error('Failed to rollback user creation:', deletionErr)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 65,
      "full_filename": "/scan/data/static/codefixes/registerAdminChallenge_3_correct.ts",
      "filename": "data/static/codefixes/registerAdminChallenge_3_correct.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": { "start": 11, "end": 29 }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": { "start": 11, "end": 29 },
        "content": ""
      },
      "parent_line_number": 65,
      "fingerprint": "07ff45240fef20d487e940b862e8f5dc_0",
      "old_fingerprint": "2d6b18a6da9a354743b90b706533e887_85",
      "code_extract": "          console.error(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 32,
      "full_filename": "/scan/data/static/codefixes/registerAdminChallenge_4.ts",
      "filename": "data/static/codefixes/registerAdminChallenge_4.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 32,
        "end": 32,
        "column": { "start": 11, "end": 27 }
      },
      "sink": {
        "start": 32,
        "end": 32,
        "column": { "start": 11, "end": 27 },
        "content": ""
      },
      "parent_line_number": 32,
      "fingerprint": "b4f1a587c69e5552079f40de83c4c951_0",
      "old_fingerprint": "c65cd4f24da8401aebd64a13c060cdd4_31",
      "code_extract": "          console.log(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 103,
      "full_filename": "/scan/data/static/codefixes/restfulXssChallenge_1_correct.ts",
      "filename": "data/static/codefixes/restfulXssChallenge_1_correct.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 103,
        "end": 103,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 103,
        "end": 103,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 103,
      "fingerprint": "6d1145d92c2da60d8947252d4ba8e294_0",
      "old_fingerprint": "a8f74cc8e36519590ee220fa066a5cc8_145",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 97,
      "full_filename": "/scan/data/static/codefixes/restfulXssChallenge_2.ts",
      "filename": "data/static/codefixes/restfulXssChallenge_2.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 97,
        "end": 97,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 97,
        "end": 97,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 97,
      "fingerprint": "399620e49cbbe252f581da423857603c_0",
      "old_fingerprint": "f768c47c7a856b0d84ec66be297c79b6_137",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 88,
      "full_filename": "/scan/data/static/codefixes/restfulXssChallenge_3.ts",
      "filename": "data/static/codefixes/restfulXssChallenge_3.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 88,
      "fingerprint": "b63244a34e51e1f0e7eabf32f37dcc5b_0",
      "old_fingerprint": "5ac65c6692d8898e2d81fa43175359bf_124",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 54,
      "full_filename": "/scan/data/static/codefixes/restfulXssChallenge_4.ts",
      "filename": "data/static/codefixes/restfulXssChallenge_4.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 54,
      "fingerprint": "b803221515faa777f5461c6d50323159_0",
      "old_fingerprint": "040df16f43052801fc627be826d5a20a_67",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 15,
      "full_filename": "/scan/data/staticData.ts",
      "filename": "data/staticData.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 15, "end": 15, "column": { "start": 9, "end": 75 } },
      "sink": {
        "start": 15,
        "end": 15,
        "column": { "start": 9, "end": 75 },
        "content": ""
      },
      "parent_line_number": 15,
      "fingerprint": "0fb9109eeccd92b64ced2d2f8d73a808_0",
      "old_fingerprint": "2f5d1359d9790ba74ac830092a1a915f_8",
      "code_extract": "        logger.error('Could not parse YAML file: \"' + filePath + '\"', err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 18,
      "full_filename": "/scan/data/staticData.ts",
      "filename": "data/staticData.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 18,
        "end": 18,
        "column": { "start": 18, "end": 73 }
      },
      "sink": {
        "start": 18,
        "end": 18,
        "column": { "start": 18, "end": 73 },
        "content": ""
      },
      "parent_line_number": 18,
      "fingerprint": "0fb9109eeccd92b64ced2d2f8d73a808_1",
      "old_fingerprint": "2f5d1359d9790ba74ac830092a1a915f_12",
      "code_extract": "    .catch(() =\u003e logger.error('Could not open file: \"' + filePath + '\"'))"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 60,
      "full_filename": "/scan/frontend/src/app/Services/basket.service.ts",
      "filename": "frontend/src/app/Services/basket.service.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 60,
      "fingerprint": "9f1ce248015d1c0c26f39c26ee4873fb_0",
      "old_fingerprint": "fdbada4a6ed8819e9d77cd56fc8ebda2_78",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 73,
      "full_filename": "/scan/frontend/src/app/Services/local-backup.service.ts",
      "filename": "frontend/src/app/Services/local-backup.service.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": { "start": 25, "end": 41 }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": { "start": 25, "end": 41 },
        "content": ""
      },
      "parent_line_number": 73,
      "fingerprint": "fd394102e041824dcfab7031d4056131_0",
      "old_fingerprint": "a2d7c6d84198339533f6821d82003b48_97",
      "code_extract": "          }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 74,
      "full_filename": "/scan/frontend/src/app/about/about.component.ts",
      "filename": "frontend/src/app/about/about.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": { "start": 11, "end": 29 }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": { "start": 11, "end": 29 },
        "content": ""
      },
      "parent_line_number": 74,
      "fingerprint": "c634db9a79f620701dce9dcc52289faf_0",
      "old_fingerprint": "fbecf2f5690f61abc6dfc775e60609b4_100",
      "code_extract": "          console.error(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 112,
      "full_filename": "/scan/frontend/src/app/about/about.component.ts",
      "filename": "frontend/src/app/about/about.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 112,
        "end": 112,
        "column": { "start": 11, "end": 29 }
      },
      "sink": {
        "start": 112,
        "end": 112,
        "column": { "start": 11, "end": 29 },
        "content": ""
      },
      "parent_line_number": 112,
      "fingerprint": "c634db9a79f620701dce9dcc52289faf_1",
      "old_fingerprint": "fbecf2f5690f61abc6dfc775e60609b4_158",
      "code_extract": "          console.error(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 70,
      "full_filename": "/scan/frontend/src/app/accounting/accounting.component.ts",
      "filename": "frontend/src/app/accounting/accounting.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 70,
        "end": 70,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 70,
        "end": 70,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 70,
      "fingerprint": "b4693b2404c730fcd69467486e2b6e3b_0",
      "old_fingerprint": "32fd411ac3d125ed689564c94d452b9b_91",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 78,
      "full_filename": "/scan/frontend/src/app/accounting/accounting.component.ts",
      "filename": "frontend/src/app/accounting/accounting.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 78,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 78,
        "end": 78,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 78,
      "fingerprint": "b4693b2404c730fcd69467486e2b6e3b_1",
      "old_fingerprint": "32fd411ac3d125ed689564c94d452b9b_110",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 94,
      "full_filename": "/scan/frontend/src/app/accounting/accounting.component.ts",
      "filename": "frontend/src/app/accounting/accounting.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 94,
        "end": 94,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 94,
        "end": 94,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 94,
      "fingerprint": "b4693b2404c730fcd69467486e2b6e3b_2",
      "old_fingerprint": "32fd411ac3d125ed689564c94d452b9b_132",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 116,
      "full_filename": "/scan/frontend/src/app/accounting/accounting.component.ts",
      "filename": "frontend/src/app/accounting/accounting.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 116,
        "end": 116,
        "column": { "start": 7, "end": 23 }
      },
      "sink": {
        "start": 116,
        "end": 116,
        "column": { "start": 7, "end": 23 },
        "content": ""
      },
      "parent_line_number": 116,
      "fingerprint": "b4693b2404c730fcd69467486e2b6e3b_3",
      "old_fingerprint": "32fd411ac3d125ed689564c94d452b9b_162",
      "code_extract": "      console.log(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 127,
      "full_filename": "/scan/frontend/src/app/accounting/accounting.component.ts",
      "filename": "frontend/src/app/accounting/accounting.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 127,
        "end": 127,
        "column": { "start": 7, "end": 23 }
      },
      "sink": {
        "start": 127,
        "end": 127,
        "column": { "start": 7, "end": 23 },
        "content": ""
      },
      "parent_line_number": 127,
      "fingerprint": "b4693b2404c730fcd69467486e2b6e3b_4",
      "old_fingerprint": "32fd411ac3d125ed689564c94d452b9b_174",
      "code_extract": "      console.log(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 136,
      "full_filename": "/scan/frontend/src/app/accounting/accounting.component.ts",
      "filename": "frontend/src/app/accounting/accounting.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 136,
        "end": 136,
        "column": { "start": 7, "end": 23 }
      },
      "sink": {
        "start": 136,
        "end": 136,
        "column": { "start": 7, "end": 23 },
        "content": ""
      },
      "parent_line_number": 136,
      "fingerprint": "b4693b2404c730fcd69467486e2b6e3b_5",
      "old_fingerprint": "32fd411ac3d125ed689564c94d452b9b_182",
      "code_extract": "      console.log(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 63,
      "full_filename": "/scan/frontend/src/app/address/address.component.ts",
      "filename": "frontend/src/app/address/address.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 63, "end": 63, "column": { "start": 7, "end": 23 } },
      "sink": {
        "start": 63,
        "end": 63,
        "column": { "start": 7, "end": 23 },
        "content": ""
      },
      "parent_line_number": 63,
      "fingerprint": "1b6ce5b4b5d48840a1324d40edeca562_0",
      "old_fingerprint": "6040da3a49dbff3053c72d76e6dbd7ff_81",
      "code_extract": "      console.log(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 93,
      "full_filename": "/scan/frontend/src/app/address/address.component.ts",
      "filename": "frontend/src/app/address/address.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 93, "end": 93, "column": { "start": 7, "end": 23 } },
      "sink": {
        "start": 93,
        "end": 93,
        "column": { "start": 7, "end": 23 },
        "content": ""
      },
      "parent_line_number": 93,
      "fingerprint": "1b6ce5b4b5d48840a1324d40edeca562_1",
      "old_fingerprint": "6040da3a49dbff3053c72d76e6dbd7ff_130",
      "code_extract": "      console.log(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 64,
      "full_filename": "/scan/frontend/src/app/administration/administration.component.ts",
      "filename": "frontend/src/app/administration/administration.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 64, "end": 64, "column": { "start": 7, "end": 30 } },
      "sink": {
        "start": 64,
        "end": 64,
        "column": { "start": 7, "end": 30 },
        "content": ""
      },
      "parent_line_number": 64,
      "fingerprint": "d87562f4ec9f8e4536a8569a3d1641cb_0",
      "old_fingerprint": "123820e4edcad101af872bf9c11aedcf_82",
      "code_extract": "      console.log(this.error)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 79,
      "full_filename": "/scan/frontend/src/app/administration/administration.component.ts",
      "filename": "frontend/src/app/administration/administration.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 79, "end": 79, "column": { "start": 7, "end": 30 } },
      "sink": {
        "start": 79,
        "end": 79,
        "column": { "start": 7, "end": 30 },
        "content": ""
      },
      "parent_line_number": 79,
      "fingerprint": "d87562f4ec9f8e4536a8569a3d1641cb_1",
      "old_fingerprint": "123820e4edcad101af872bf9c11aedcf_112",
      "code_extract": "      console.log(this.error)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 88,
      "full_filename": "/scan/frontend/src/app/administration/administration.component.ts",
      "filename": "frontend/src/app/administration/administration.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 88, "end": 88, "column": { "start": 7, "end": 30 } },
      "sink": {
        "start": 88,
        "end": 88,
        "column": { "start": 7, "end": 30 },
        "content": ""
      },
      "parent_line_number": 88,
      "fingerprint": "d87562f4ec9f8e4536a8569a3d1641cb_2",
      "old_fingerprint": "123820e4edcad101af872bf9c11aedcf_125",
      "code_extract": "      console.log(this.error)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 38,
      "full_filename": "/scan/frontend/src/app/app.guard.ts",
      "filename": "frontend/src/app/app.guard.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 38, "end": 38, "column": { "start": 9, "end": 25 } },
      "sink": {
        "start": 38,
        "end": 38,
        "column": { "start": 9, "end": 25 },
        "content": ""
      },
      "parent_line_number": 38,
      "fingerprint": "b14933aa860382851469472d7bfe2f3b_0",
      "old_fingerprint": "0748b8e7976b48c024d80c97eb89c2fc_46",
      "code_extract": "        console.log(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 84,
      "full_filename": "/scan/frontend/src/app/challenge-solved-notification/challenge-solved-notification.component.ts",
      "filename": "frontend/src/app/challenge-solved-notification/challenge-solved-notification.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": { "start": 27, "end": 43 }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": { "start": 27, "end": 43 },
        "content": ""
      },
      "parent_line_number": 84,
      "fingerprint": "5067336e38f3441f8a61aa08dc39b0c3_0",
      "old_fingerprint": "4d392fb21d64b3124c474bba56c994fc_119",
      "code_extract": "            }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 131,
      "full_filename": "/scan/frontend/src/app/challenge-solved-notification/challenge-solved-notification.component.ts",
      "filename": "frontend/src/app/challenge-solved-notification/challenge-solved-notification.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 131,
        "end": 131,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 131,
        "end": 131,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 131,
      "fingerprint": "5067336e38f3441f8a61aa08dc39b0c3_1",
      "old_fingerprint": "4d392fb21d64b3124c474bba56c994fc_177",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 39,
      "full_filename": "/scan/frontend/src/app/challenge-status-badge/challenge-status-badge.component.ts",
      "filename": "frontend/src/app/challenge-status-badge/challenge-status-badge.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 39,
        "end": 39,
        "column": { "start": 21, "end": 37 }
      },
      "sink": {
        "start": 39,
        "end": 39,
        "column": { "start": 21, "end": 37 },
        "content": ""
      },
      "parent_line_number": 39,
      "fingerprint": "47c4a5cb239b685ed0a33d4a5b1cef42_0",
      "old_fingerprint": "1d3e0f43c1c3d7355b9a63b084439714_48",
      "code_extract": "      }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 59,
      "full_filename": "/scan/frontend/src/app/change-password/change-password.component.ts",
      "filename": "frontend/src/app/change-password/change-password.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 59, "end": 59, "column": { "start": 7, "end": 25 } },
      "sink": {
        "start": 59,
        "end": 59,
        "column": { "start": 7, "end": 25 },
        "content": ""
      },
      "parent_line_number": 59,
      "fingerprint": "fd8cb3f125cf9658133ef55c4863b08f_0",
      "old_fingerprint": "c5e1bd031de6efbedbdb55917ce93bbd_76",
      "code_extract": "      console.log(error)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 80,
      "full_filename": "/scan/frontend/src/app/chatbot/chatbot.component.ts",
      "filename": "frontend/src/app/chatbot/chatbot.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 80, "end": 80, "column": { "start": 7, "end": 23 } },
      "sink": {
        "start": 80,
        "end": 80,
        "column": { "start": 7, "end": 23 },
        "content": ""
      },
      "parent_line_number": 80,
      "fingerprint": "f1708b1ef1eb0e82b116c05928cbda43_0",
      "old_fingerprint": "669dbf6df767ab292827e3e260ffd081_115",
      "code_extract": "      console.log(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 72,
      "full_filename": "/scan/frontend/src/app/code-snippet/code-snippet.component.ts",
      "filename": "frontend/src/app/code-snippet/code-snippet.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 72,
      "fingerprint": "3b964766e441b4293ad295e89da83dae_0",
      "old_fingerprint": "6410ea1b649d67493f2f4a0d885815d2_95",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 176,
      "full_filename": "/scan/frontend/src/app/code-snippet/code-snippet.component.ts",
      "filename": "frontend/src/app/code-snippet/code-snippet.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 176,
        "end": 176,
        "column": { "start": 23, "end": 39 }
      },
      "sink": {
        "start": 176,
        "end": 176,
        "column": { "start": 23, "end": 39 },
        "content": ""
      },
      "parent_line_number": 176,
      "fingerprint": "3b964766e441b4293ad295e89da83dae_1",
      "old_fingerprint": "6410ea1b649d67493f2f4a0d885815d2_196",
      "code_extract": "        }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 186,
      "full_filename": "/scan/frontend/src/app/code-snippet/code-snippet.component.ts",
      "filename": "frontend/src/app/code-snippet/code-snippet.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 186,
        "end": 186,
        "column": { "start": 23, "end": 39 }
      },
      "sink": {
        "start": 186,
        "end": 186,
        "column": { "start": 23, "end": 39 },
        "content": ""
      },
      "parent_line_number": 186,
      "fingerprint": "3b964766e441b4293ad295e89da83dae_2",
      "old_fingerprint": "6410ea1b649d67493f2f4a0d885815d2_201",
      "code_extract": "        }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 75,
      "full_filename": "/scan/frontend/src/app/complaint/complaint.component.ts",
      "filename": "frontend/src/app/complaint/complaint.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 75, "end": 75, "column": { "start": 7, "end": 23 } },
      "sink": {
        "start": 75,
        "end": 75,
        "column": { "start": 7, "end": 23 },
        "content": ""
      },
      "parent_line_number": 75,
      "fingerprint": "0bf9fa0efc54f10600d2f8fb3e177574_0",
      "old_fingerprint": "e07e572784423fc336b66908b21798eb_103",
      "code_extract": "      console.log(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 57,
      "full_filename": "/scan/frontend/src/app/contact/contact.component.ts",
      "filename": "frontend/src/app/contact/contact.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 57, "end": 57, "column": { "start": 7, "end": 23 } },
      "sink": {
        "start": 57,
        "end": 57,
        "column": { "start": 7, "end": 23 },
        "content": ""
      },
      "parent_line_number": 57,
      "fingerprint": "468225772bb4486d75db503b9a666cbb_0",
      "old_fingerprint": "8739d1320d6a7dc893d270c27840ec6d_71",
      "code_extract": "      console.log(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 96,
      "full_filename": "/scan/frontend/src/app/contact/contact.component.ts",
      "filename": "frontend/src/app/contact/contact.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 96, "end": 96, "column": { "start": 7, "end": 23 } },
      "sink": {
        "start": 96,
        "end": 96,
        "column": { "start": 7, "end": 23 },
        "content": ""
      },
      "parent_line_number": 96,
      "fingerprint": "468225772bb4486d75db503b9a666cbb_1",
      "old_fingerprint": "8739d1320d6a7dc893d270c27840ec6d_134",
      "code_extract": "      console.log(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 47,
      "full_filename": "/scan/frontend/src/app/delivery-method/delivery-method.component.ts",
      "filename": "frontend/src/app/delivery-method/delivery-method.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 47,
        "end": 47,
        "column": { "start": 21, "end": 39 }
      },
      "sink": {
        "start": 47,
        "end": 47,
        "column": { "start": 21, "end": 39 },
        "content": ""
      },
      "parent_line_number": 47,
      "fingerprint": "05ab943f2d0803fde333d43b5695d99d_0",
      "old_fingerprint": "735fe251c15d907baa545333f8816a63_57",
      "code_extract": "    }, (error) =\u003e { console.log(error) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 50,
      "full_filename": "/scan/frontend/src/app/delivery-method/delivery-method.component.ts",
      "filename": "frontend/src/app/delivery-method/delivery-method.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 50, "end": 50, "column": { "start": 7, "end": 27 } },
      "sink": {
        "start": 50,
        "end": 50,
        "column": { "start": 7, "end": 27 },
        "content": ""
      },
      "parent_line_number": 50,
      "fingerprint": "05ab943f2d0803fde333d43b5695d99d_1",
      "old_fingerprint": "735fe251c15d907baa545333f8816a63_62",
      "code_extract": "      console.log(methods)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 53,
      "full_filename": "/scan/frontend/src/app/delivery-method/delivery-method.component.ts",
      "filename": "frontend/src/app/delivery-method/delivery-method.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": { "start": 21, "end": 39 }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": { "start": 21, "end": 39 },
        "content": ""
      },
      "parent_line_number": 53,
      "fingerprint": "05ab943f2d0803fde333d43b5695d99d_2",
      "old_fingerprint": "735fe251c15d907baa545333f8816a63_66",
      "code_extract": "    }, (error) =\u003e { console.log(error) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 72,
      "full_filename": "/scan/frontend/src/app/deluxe-user/deluxe-user.component.ts",
      "filename": "frontend/src/app/deluxe-user/deluxe-user.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 72,
      "fingerprint": "2cf750608ee0793001992a0e98897137_0",
      "old_fingerprint": "e5228302d4f7c41e11c99d2b0342a2af_94",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 77,
      "full_filename": "/scan/frontend/src/app/faucet/faucet.component.ts",
      "filename": "frontend/src/app/faucet/faucet.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 77, "end": 77, "column": { "start": 9, "end": 30 } },
      "sink": {
        "start": 77,
        "end": 77,
        "column": { "start": 9, "end": 30 },
        "content": ""
      },
      "parent_line_number": 77,
      "fingerprint": "d57587e37f5d21ac5227c49bf2e9a0ce_0",
      "old_fingerprint": "857cf98e936829a99b3a969b10f62ca5_106",
      "code_extract": "        console.log(response)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 80,
      "full_filename": "/scan/frontend/src/app/faucet/faucet.component.ts",
      "filename": "frontend/src/app/faucet/faucet.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 80, "end": 80, "column": { "start": 9, "end": 29 } },
      "sink": {
        "start": 80,
        "end": 80,
        "column": { "start": 9, "end": 29 },
        "content": ""
      },
      "parent_line_number": 80,
      "fingerprint": "d57587e37f5d21ac5227c49bf2e9a0ce_1",
      "old_fingerprint": "857cf98e936829a99b3a969b10f62ca5_114",
      "code_extract": "        console.error(error)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 98,
      "full_filename": "/scan/frontend/src/app/faucet/faucet.component.ts",
      "filename": "frontend/src/app/faucet/faucet.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 98, "end": 98, "column": { "start": 9, "end": 29 } },
      "sink": {
        "start": 98,
        "end": 98,
        "column": { "start": 9, "end": 29 },
        "content": ""
      },
      "parent_line_number": 98,
      "fingerprint": "d57587e37f5d21ac5227c49bf2e9a0ce_2",
      "old_fingerprint": "857cf98e936829a99b3a969b10f62ca5_139",
      "code_extract": "        console.error(error)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 127,
      "full_filename": "/scan/frontend/src/app/faucet/faucet.component.ts",
      "filename": "frontend/src/app/faucet/faucet.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 127,
        "end": 127,
        "column": { "start": 7, "end": 58 }
      },
      "sink": {
        "start": 127,
        "end": 127,
        "column": { "start": 7, "end": 58 },
        "content": ""
      },
      "parent_line_number": 127,
      "fingerprint": "d57587e37f5d21ac5227c49bf2e9a0ce_3",
      "old_fingerprint": "857cf98e936829a99b3a969b10f62ca5_173",
      "code_extract": "      console.error('Error fetching BEE balance:', error)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 142,
      "full_filename": "/scan/frontend/src/app/faucet/faucet.component.ts",
      "filename": "frontend/src/app/faucet/faucet.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 142,
        "end": 142,
        "column": { "start": 7, "end": 27 }
      },
      "sink": {
        "start": 142,
        "end": 142,
        "column": { "start": 7, "end": 27 },
        "content": ""
      },
      "parent_line_number": 142,
      "fingerprint": "d57587e37f5d21ac5227c49bf2e9a0ce_4",
      "old_fingerprint": "857cf98e936829a99b3a969b10f62ca5_185",
      "code_extract": "      console.log(balance)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 145,
      "full_filename": "/scan/frontend/src/app/faucet/faucet.component.ts",
      "filename": "frontend/src/app/faucet/faucet.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 145,
        "end": 145,
        "column": { "start": 7, "end": 58 }
      },
      "sink": {
        "start": 145,
        "end": 145,
        "column": { "start": 7, "end": 58 },
        "content": ""
      },
      "parent_line_number": 145,
      "fingerprint": "d57587e37f5d21ac5227c49bf2e9a0ce_5",
      "old_fingerprint": "857cf98e936829a99b3a969b10f62ca5_187",
      "code_extract": "      console.error('Error fetching BEE balance:', error)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 200,
      "full_filename": "/scan/frontend/src/app/faucet/faucet.component.ts",
      "filename": "frontend/src/app/faucet/faucet.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 200,
        "end": 200,
        "column": { "start": 7, "end": 43 }
      },
      "sink": {
        "start": 200,
        "end": 200,
        "column": { "start": 7, "end": 43 },
        "content": ""
      },
      "parent_line_number": 200,
      "fingerprint": "d57587e37f5d21ac5227c49bf2e9a0ce_6",
      "old_fingerprint": "857cf98e936829a99b3a969b10f62ca5_204",
      "code_extract": "      console.log('session', this.session)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 203,
      "full_filename": "/scan/frontend/src/app/faucet/faucet.component.ts",
      "filename": "frontend/src/app/faucet/faucet.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 203,
        "end": 203,
        "column": { "start": 7, "end": 23 }
      },
      "sink": {
        "start": 203,
        "end": 203,
        "column": { "start": 7, "end": 23 },
        "content": ""
      },
      "parent_line_number": 203,
      "fingerprint": "d57587e37f5d21ac5227c49bf2e9a0ce_7",
      "old_fingerprint": "857cf98e936829a99b3a969b10f62ca5_206",
      "code_extract": "      console.log(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 238,
      "full_filename": "/scan/frontend/src/app/faucet/faucet.component.ts",
      "filename": "frontend/src/app/faucet/faucet.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 238,
        "end": 238,
        "column": { "start": 7, "end": 61 }
      },
      "sink": {
        "start": 238,
        "end": 238,
        "column": { "start": 7, "end": 61 },
        "content": ""
      },
      "parent_line_number": 238,
      "fingerprint": "d57587e37f5d21ac5227c49bf2e9a0ce_8",
      "old_fingerprint": "857cf98e936829a99b3a969b10f62ca5_216",
      "code_extract": "      console.error('Error extracting BEEs:', error.message)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 273,
      "full_filename": "/scan/frontend/src/app/faucet/faucet.component.ts",
      "filename": "frontend/src/app/faucet/faucet.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 273,
        "end": 273,
        "column": { "start": 7, "end": 31 }
      },
      "sink": {
        "start": 273,
        "end": 273,
        "column": { "start": 7, "end": 31 },
        "content": ""
      },
      "parent_line_number": 273,
      "fingerprint": "d57587e37f5d21ac5227c49bf2e9a0ce_9",
      "old_fingerprint": "857cf98e936829a99b3a969b10f62ca5_221",
      "code_extract": "      console.log(transaction)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 279,
      "full_filename": "/scan/frontend/src/app/faucet/faucet.component.ts",
      "filename": "frontend/src/app/faucet/faucet.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 279,
        "end": 279,
        "column": { "start": 7, "end": 36 }
      },
      "sink": {
        "start": 279,
        "end": 279,
        "column": { "start": 7, "end": 36 },
        "content": ""
      },
      "parent_line_number": 279,
      "fingerprint": "d57587e37f5d21ac5227c49bf2e9a0ce_10",
      "old_fingerprint": "857cf98e936829a99b3a969b10f62ca5_222",
      "code_extract": "      console.log(mintConfirmation)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 293,
      "full_filename": "/scan/frontend/src/app/faucet/faucet.component.ts",
      "filename": "frontend/src/app/faucet/faucet.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 293,
        "end": 293,
        "column": { "start": 15, "end": 35 }
      },
      "sink": {
        "start": 293,
        "end": 293,
        "column": { "start": 15, "end": 35 },
        "content": ""
      },
      "parent_line_number": 293,
      "fingerprint": "d57587e37f5d21ac5227c49bf2e9a0ce_11",
      "old_fingerprint": "857cf98e936829a99b3a969b10f62ca5_223",
      "code_extract": "              console.error(error)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 302,
      "full_filename": "/scan/frontend/src/app/faucet/faucet.component.ts",
      "filename": "frontend/src/app/faucet/faucet.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 302,
        "end": 302,
        "column": { "start": 7, "end": 49 }
      },
      "sink": {
        "start": 302,
        "end": 302,
        "column": { "start": 7, "end": 49 },
        "content": ""
      },
      "parent_line_number": 302,
      "fingerprint": "d57587e37f5d21ac5227c49bf2e9a0ce_12",
      "old_fingerprint": "857cf98e936829a99b3a969b10f62ca5_224",
      "code_extract": "      console.error('Error minting NFT:', error)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 27,
      "full_filename": "/scan/frontend/src/app/last-login-ip/last-login-ip.component.ts",
      "filename": "frontend/src/app/last-login-ip/last-login-ip.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 27, "end": 27, "column": { "start": 7, "end": 23 } },
      "sink": {
        "start": 27,
        "end": 27,
        "column": { "start": 7, "end": 23 },
        "content": ""
      },
      "parent_line_number": 27,
      "fingerprint": "16df30229be39ab877dd3cf6be1de7f6_0",
      "old_fingerprint": "97090dd44d447964fd8aec9553214e76_28",
      "code_extract": "      console.log(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 77,
      "full_filename": "/scan/frontend/src/app/login/login.component.ts",
      "filename": "frontend/src/app/login/login.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": { "start": 11, "end": 101 }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": { "start": 11, "end": 101 },
        "content": ""
      },
      "parent_line_number": 77,
      "fingerprint": "462197418e4f13c71499a9eef49192ab_0",
      "old_fingerprint": "ab10bf9e92bba327666d3d8f60ad17d7_107",
      "code_extract": "          console.log(this.redirectUri + ' is not an authorized redirect URI for this application.')"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 80,
      "full_filename": "/scan/frontend/src/app/login/login.component.ts",
      "filename": "frontend/src/app/login/login.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 80,
        "end": 80,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 80,
        "end": 80,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 80,
      "fingerprint": "462197418e4f13c71499a9eef49192ab_1",
      "old_fingerprint": "ab10bf9e92bba327666d3d8f60ad17d7_116",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 103,
      "full_filename": "/scan/frontend/src/app/navbar/navbar.component.ts",
      "filename": "frontend/src/app/navbar/navbar.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 103,
        "end": 103,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 103,
        "end": 103,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 103,
      "fingerprint": "a0a0225bcf74d98b3595c867d2727b02_0",
      "old_fingerprint": "5aa5e74ffe53372cc2217bacddac535e_146",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 121,
      "full_filename": "/scan/frontend/src/app/navbar/navbar.component.ts",
      "filename": "frontend/src/app/navbar/navbar.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 121,
        "end": 121,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 121,
        "end": 121,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 121,
      "fingerprint": "a0a0225bcf74d98b3595c867d2727b02_1",
      "old_fingerprint": "5aa5e74ffe53372cc2217bacddac535e_167",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 200,
      "full_filename": "/scan/frontend/src/app/navbar/navbar.component.ts",
      "filename": "frontend/src/app/navbar/navbar.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 200,
        "end": 200,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 200,
        "end": 200,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 200,
      "fingerprint": "a0a0225bcf74d98b3595c867d2727b02_2",
      "old_fingerprint": "5aa5e74ffe53372cc2217bacddac535e_205",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 208,
      "full_filename": "/scan/frontend/src/app/navbar/navbar.component.ts",
      "filename": "frontend/src/app/navbar/navbar.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 208,
        "end": 208,
        "column": { "start": 93, "end": 109 }
      },
      "sink": {
        "start": 208,
        "end": 208,
        "column": { "start": 93, "end": 109 },
        "content": ""
      },
      "parent_line_number": 208,
      "fingerprint": "a0a0225bcf74d98b3595c867d2727b02_3",
      "old_fingerprint": "5aa5e74ffe53372cc2217bacddac535e_208",
      "code_extract": "    this.userService.saveLastLoginIp().subscribe((user: any) =\u003e { this.noop() }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 241,
      "full_filename": "/scan/frontend/src/app/navbar/navbar.component.ts",
      "filename": "frontend/src/app/navbar/navbar.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 241,
        "end": 241,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 241,
        "end": 241,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 241,
      "fingerprint": "a0a0225bcf74d98b3595c867d2727b02_4",
      "old_fingerprint": "5aa5e74ffe53372cc2217bacddac535e_217",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 37,
      "full_filename": "/scan/frontend/src/app/nft-unlock/nft-unlock.component.ts",
      "filename": "frontend/src/app/nft-unlock/nft-unlock.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 37, "end": 37, "column": { "start": 9, "end": 29 } },
      "sink": {
        "start": 37,
        "end": 37,
        "column": { "start": 9, "end": 29 },
        "content": ""
      },
      "parent_line_number": 37,
      "fingerprint": "83fc40fca8950aad0132f93aef21e4ce_0",
      "old_fingerprint": "65201a2fead35d9f4733a952a6c01068_41",
      "code_extract": "        console.error(error)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 51,
      "full_filename": "/scan/frontend/src/app/oauth/oauth.component.ts",
      "filename": "frontend/src/app/oauth/oauth.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 51, "end": 51, "column": { "start": 5, "end": 23 } },
      "sink": {
        "start": 51,
        "end": 51,
        "column": { "start": 5, "end": 23 },
        "content": ""
      },
      "parent_line_number": 51,
      "fingerprint": "06e20cad342cb5aadb8dce7486a12246_0",
      "old_fingerprint": "75ebb455fa491686e7ae3177a3e72f53_63",
      "code_extract": "    console.log(error)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 72,
      "full_filename": "/scan/frontend/src/app/order-completion/order-completion.component.ts",
      "filename": "frontend/src/app/order-completion/order-completion.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": { "start": 23, "end": 39 }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": { "start": 23, "end": 39 },
        "content": ""
      },
      "parent_line_number": 72,
      "fingerprint": "fecf65b6d3b5ec83dfc04c9d3b2fcd12_0",
      "old_fingerprint": "a5e85343f1832dc43974c0d6f3f65394_96",
      "code_extract": "        }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 75,
      "full_filename": "/scan/frontend/src/app/order-completion/order-completion.component.ts",
      "filename": "frontend/src/app/order-completion/order-completion.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": { "start": 25, "end": 43 }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": { "start": 25, "end": 43 },
        "content": ""
      },
      "parent_line_number": 75,
      "fingerprint": "fecf65b6d3b5ec83dfc04c9d3b2fcd12_1",
      "old_fingerprint": "a5e85343f1832dc43974c0d6f3f65394_102",
      "code_extract": "        }, (error) =\u003e { console.log(error) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 76,
      "full_filename": "/scan/frontend/src/app/order-completion/order-completion.component.ts",
      "filename": "frontend/src/app/order-completion/order-completion.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 76,
        "end": 76,
        "column": { "start": 21, "end": 37 }
      },
      "sink": {
        "start": 76,
        "end": 76,
        "column": { "start": 21, "end": 37 },
        "content": ""
      },
      "parent_line_number": 76,
      "fingerprint": "fecf65b6d3b5ec83dfc04c9d3b2fcd12_2",
      "old_fingerprint": "a5e85343f1832dc43974c0d6f3f65394_104",
      "code_extract": "      }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 77,
      "full_filename": "/scan/frontend/src/app/order-completion/order-completion.component.ts",
      "filename": "frontend/src/app/order-completion/order-completion.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 77,
      "fingerprint": "fecf65b6d3b5ec83dfc04c9d3b2fcd12_3",
      "old_fingerprint": "a5e85343f1832dc43974c0d6f3f65394_109",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 79,
      "full_filename": "/scan/frontend/src/app/order-history/order-history.component.ts",
      "filename": "frontend/src/app/order-history/order-history.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 79,
        "end": 79,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 79,
        "end": 79,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 79,
      "fingerprint": "c3d3fb15f8fd9e0243f0509d648f1b02_0",
      "old_fingerprint": "f69a63af933736071a7d2763c557d30a_113",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 99,
      "full_filename": "/scan/frontend/src/app/order-history/order-history.component.ts",
      "filename": "frontend/src/app/order-history/order-history.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 99,
        "end": 99,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 99,
        "end": 99,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 99,
      "fingerprint": "c3d3fb15f8fd9e0243f0509d648f1b02_1",
      "old_fingerprint": "f69a63af933736071a7d2763c557d30a_141",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 43,
      "full_filename": "/scan/frontend/src/app/order-summary/order-summary.component.ts",
      "filename": "frontend/src/app/order-summary/order-summary.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 43,
        "end": 43,
        "column": { "start": 21, "end": 39 }
      },
      "sink": {
        "start": 43,
        "end": 43,
        "column": { "start": 21, "end": 39 },
        "content": ""
      },
      "parent_line_number": 43,
      "fingerprint": "00d772206271285744a0fcc77d875f5e_0",
      "old_fingerprint": "a8a7c9923db8c2d76b5644d64af99865_50",
      "code_extract": "    }, (error) =\u003e { console.log(error) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 49,
      "full_filename": "/scan/frontend/src/app/order-summary/order-summary.component.ts",
      "filename": "frontend/src/app/order-summary/order-summary.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 49,
        "end": 49,
        "column": { "start": 21, "end": 37 }
      },
      "sink": {
        "start": 49,
        "end": 49,
        "column": { "start": 21, "end": 37 },
        "content": ""
      },
      "parent_line_number": 49,
      "fingerprint": "00d772206271285744a0fcc77d875f5e_1",
      "old_fingerprint": "a8a7c9923db8c2d76b5644d64af99865_60",
      "code_extract": "      }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 76,
      "full_filename": "/scan/frontend/src/app/order-summary/order-summary.component.ts",
      "filename": "frontend/src/app/order-summary/order-summary.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 76, "end": 76, "column": { "start": 7, "end": 23 } },
      "sink": {
        "start": 76,
        "end": 76,
        "column": { "start": 7, "end": 23 },
        "content": ""
      },
      "parent_line_number": 76,
      "fingerprint": "00d772206271285744a0fcc77d875f5e_2",
      "old_fingerprint": "a8a7c9923db8c2d76b5644d64af99865_105",
      "code_extract": "      console.log(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 70,
      "full_filename": "/scan/frontend/src/app/payment-method/payment-method.component.ts",
      "filename": "frontend/src/app/payment-method/payment-method.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 70,
        "end": 70,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 70,
        "end": 70,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 70,
      "fingerprint": "bf09f635bcc095fcc8680ca6308a9aae_0",
      "old_fingerprint": "f63c53487bf4aa84496cc95231cdd49f_90",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 96,
      "full_filename": "/scan/frontend/src/app/payment-method/payment-method.component.ts",
      "filename": "frontend/src/app/payment-method/payment-method.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 96,
        "end": 96,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 96,
        "end": 96,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 96,
      "fingerprint": "bf09f635bcc095fcc8680ca6308a9aae_1",
      "old_fingerprint": "f63c53487bf4aa84496cc95231cdd49f_136",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 94,
      "full_filename": "/scan/frontend/src/app/payment/payment.component.ts",
      "filename": "frontend/src/app/payment/payment.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 94,
        "end": 94,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 94,
        "end": 94,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 94,
      "fingerprint": "a335c349ff2f941ac9fbb32494aefa38_0",
      "old_fingerprint": "5c10eadde790a08dea11180c46bc7c21_131",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 110,
      "full_filename": "/scan/frontend/src/app/payment/payment.component.ts",
      "filename": "frontend/src/app/payment/payment.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 110,
        "end": 110,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 110,
        "end": 110,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 110,
      "fingerprint": "a335c349ff2f941ac9fbb32494aefa38_1",
      "old_fingerprint": "5c10eadde790a08dea11180c46bc7c21_151",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 121,
      "full_filename": "/scan/frontend/src/app/payment/payment.component.ts",
      "filename": "frontend/src/app/payment/payment.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 121,
        "end": 121,
        "column": { "start": 23, "end": 39 }
      },
      "sink": {
        "start": 121,
        "end": 121,
        "column": { "start": 23, "end": 39 },
        "content": ""
      },
      "parent_line_number": 121,
      "fingerprint": "a335c349ff2f941ac9fbb32494aefa38_2",
      "old_fingerprint": "5c10eadde790a08dea11180c46bc7c21_168",
      "code_extract": "        }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 130,
      "full_filename": "/scan/frontend/src/app/payment/payment.component.ts",
      "filename": "frontend/src/app/payment/payment.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 130,
        "end": 130,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 130,
        "end": 130,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 130,
      "fingerprint": "a335c349ff2f941ac9fbb32494aefa38_3",
      "old_fingerprint": "5c10eadde790a08dea11180c46bc7c21_176",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 195,
      "full_filename": "/scan/frontend/src/app/payment/payment.component.ts",
      "filename": "frontend/src/app/payment/payment.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 195,
        "end": 195,
        "column": { "start": 9, "end": 25 }
      },
      "sink": {
        "start": 195,
        "end": 195,
        "column": { "start": 9, "end": 25 },
        "content": ""
      },
      "parent_line_number": 195,
      "fingerprint": "a335c349ff2f941ac9fbb32494aefa38_4",
      "old_fingerprint": "5c10eadde790a08dea11180c46bc7c21_203",
      "code_extract": "        console.log(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 203,
      "full_filename": "/scan/frontend/src/app/payment/payment.component.ts",
      "filename": "frontend/src/app/payment/payment.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 203,
        "end": 203,
        "column": { "start": 21, "end": 37 }
      },
      "sink": {
        "start": 203,
        "end": 203,
        "column": { "start": 21, "end": 37 },
        "content": ""
      },
      "parent_line_number": 203,
      "fingerprint": "a335c349ff2f941ac9fbb32494aefa38_5",
      "old_fingerprint": "5c10eadde790a08dea11180c46bc7c21_207",
      "code_extract": "      }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 48,
      "full_filename": "/scan/frontend/src/app/photo-wall/photo-wall.component.ts",
      "filename": "frontend/src/app/photo-wall/photo-wall.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 48, "end": 48, "column": { "start": 7, "end": 23 } },
      "sink": {
        "start": 48,
        "end": 48,
        "column": { "start": 7, "end": 23 },
        "content": ""
      },
      "parent_line_number": 48,
      "fingerprint": "9233e463dbeceaa97affc9fb04947372_0",
      "old_fingerprint": "79add57c5a346e7f0026fd2d808223e9_58",
      "code_extract": "      console.log(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 67,
      "full_filename": "/scan/frontend/src/app/photo-wall/photo-wall.component.ts",
      "filename": "frontend/src/app/photo-wall/photo-wall.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 67, "end": 67, "column": { "start": 7, "end": 23 } },
      "sink": {
        "start": 67,
        "end": 67,
        "column": { "start": 7, "end": 23 },
        "content": ""
      },
      "parent_line_number": 67,
      "fingerprint": "9233e463dbeceaa97affc9fb04947372_1",
      "old_fingerprint": "79add57c5a346e7f0026fd2d808223e9_88",
      "code_extract": "      console.log(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 97,
      "full_filename": "/scan/frontend/src/app/photo-wall/photo-wall.component.ts",
      "filename": "frontend/src/app/photo-wall/photo-wall.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 97, "end": 97, "column": { "start": 7, "end": 23 } },
      "sink": {
        "start": 97,
        "end": 97,
        "column": { "start": 7, "end": 23 },
        "content": ""
      },
      "parent_line_number": 97,
      "fingerprint": "9233e463dbeceaa97affc9fb04947372_2",
      "old_fingerprint": "79add57c5a346e7f0026fd2d808223e9_138",
      "code_extract": "      console.log(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 37,
      "full_filename": "/scan/frontend/src/app/privacy-policy/privacy-policy.component.ts",
      "filename": "frontend/src/app/privacy-policy/privacy-policy.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 37,
      "fingerprint": "9c09f933978c0cd0f1de28b7a23fd098_0",
      "old_fingerprint": "98fa731f1eb675ea4d6b811c335ebab2_42",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 55,
      "full_filename": "/scan/frontend/src/app/product-details/product-details.component.ts",
      "filename": "frontend/src/app/product-details/product-details.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 55,
      "fingerprint": "efcbdd405be4defc6afd5acb4ce739e0_0",
      "old_fingerprint": "d477cbf1da82386a13558377752672c1_70",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 70,
      "full_filename": "/scan/frontend/src/app/product-details/product-details.component.ts",
      "filename": "frontend/src/app/product-details/product-details.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 70,
        "end": 70,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 70,
        "end": 70,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 70,
      "fingerprint": "efcbdd405be4defc6afd5acb4ce739e0_1",
      "old_fingerprint": "d477cbf1da82386a13558377752672c1_92",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 86,
      "full_filename": "/scan/frontend/src/app/product-details/product-details.component.ts",
      "filename": "frontend/src/app/product-details/product-details.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 86, "end": 86, "column": { "start": 7, "end": 41 } },
      "sink": {
        "start": 86,
        "end": 86,
        "column": { "start": 7, "end": 41 },
        "content": ""
      },
      "parent_line_number": 86,
      "fingerprint": "efcbdd405be4defc6afd5acb4ce739e0_2",
      "old_fingerprint": "d477cbf1da82386a13558377752672c1_122",
      "code_extract": "      console.log('Liked ' + review._id)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 46,
      "full_filename": "/scan/frontend/src/app/product-review-edit/product-review-edit.component.ts",
      "filename": "frontend/src/app/product-review-edit/product-review-edit.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 46, "end": 46, "column": { "start": 7, "end": 23 } },
      "sink": {
        "start": 46,
        "end": 46,
        "column": { "start": 7, "end": 23 },
        "content": ""
      },
      "parent_line_number": 46,
      "fingerprint": "d75f3fcd25bc8e20a7ce3aaab587b3f4_0",
      "old_fingerprint": "ce2230f63227d8a5ddf66bf92365533f_54",
      "code_extract": "      console.log(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 51,
      "full_filename": "/scan/frontend/src/app/purchase-basket/purchase-basket.component.ts",
      "filename": "frontend/src/app/purchase-basket/purchase-basket.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 51,
        "end": 51,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 51,
        "end": 51,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 51,
      "fingerprint": "2f1375d742b8c96d926b8c30cd0fe122_0",
      "old_fingerprint": "b8f37c19fa5d59d67c026c2afc61a038_65",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 67,
      "full_filename": "/scan/frontend/src/app/purchase-basket/purchase-basket.component.ts",
      "filename": "frontend/src/app/purchase-basket/purchase-basket.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 67,
      "fingerprint": "2f1375d742b8c96d926b8c30cd0fe122_1",
      "old_fingerprint": "b8f37c19fa5d59d67c026c2afc61a038_87",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 74,
      "full_filename": "/scan/frontend/src/app/purchase-basket/purchase-basket.component.ts",
      "filename": "frontend/src/app/purchase-basket/purchase-basket.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 74,
      "fingerprint": "2f1375d742b8c96d926b8c30cd0fe122_2",
      "old_fingerprint": "b8f37c19fa5d59d67c026c2afc61a038_99",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 94,
      "full_filename": "/scan/frontend/src/app/purchase-basket/purchase-basket.component.ts",
      "filename": "frontend/src/app/purchase-basket/purchase-basket.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 94, "end": 94, "column": { "start": 9, "end": 25 } },
      "sink": {
        "start": 94,
        "end": 94,
        "column": { "start": 9, "end": 25 },
        "content": ""
      },
      "parent_line_number": 94,
      "fingerprint": "2f1375d742b8c96d926b8c30cd0fe122_3",
      "old_fingerprint": "b8f37c19fa5d59d67c026c2afc61a038_133",
      "code_extract": "        console.log(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 96,
      "full_filename": "/scan/frontend/src/app/purchase-basket/purchase-basket.component.ts",
      "filename": "frontend/src/app/purchase-basket/purchase-basket.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 96,
        "end": 96,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 96,
        "end": 96,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 96,
      "fingerprint": "2f1375d742b8c96d926b8c30cd0fe122_4",
      "old_fingerprint": "b8f37c19fa5d59d67c026c2afc61a038_135",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 59,
      "full_filename": "/scan/frontend/src/app/recycle/recycle.component.ts",
      "filename": "frontend/src/app/recycle/recycle.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 59,
      "fingerprint": "d23429dee88ff981f4cb09e845f9ace2_0",
      "old_fingerprint": "196d2bbc8c3f4834e8f45e386cc3f660_77",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 73,
      "full_filename": "/scan/frontend/src/app/recycle/recycle.component.ts",
      "filename": "frontend/src/app/recycle/recycle.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 73,
      "fingerprint": "d23429dee88ff981f4cb09e845f9ace2_1",
      "old_fingerprint": "196d2bbc8c3f4834e8f45e386cc3f660_98",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 103,
      "full_filename": "/scan/frontend/src/app/recycle/recycle.component.ts",
      "filename": "frontend/src/app/recycle/recycle.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 103,
        "end": 103,
        "column": { "start": 7, "end": 23 }
      },
      "sink": {
        "start": 103,
        "end": 103,
        "column": { "start": 7, "end": 23 },
        "content": ""
      },
      "parent_line_number": 103,
      "fingerprint": "d23429dee88ff981f4cb09e845f9ace2_2",
      "old_fingerprint": "196d2bbc8c3f4834e8f45e386cc3f660_147",
      "code_extract": "      console.log(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 111,
      "full_filename": "/scan/frontend/src/app/recycle/recycle.component.ts",
      "filename": "frontend/src/app/recycle/recycle.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 111,
        "end": 111,
        "column": { "start": 7, "end": 25 }
      },
      "sink": {
        "start": 111,
        "end": 111,
        "column": { "start": 7, "end": 25 },
        "content": ""
      },
      "parent_line_number": 111,
      "fingerprint": "d23429dee88ff981f4cb09e845f9ace2_3",
      "old_fingerprint": "196d2bbc8c3f4834e8f45e386cc3f660_155",
      "code_extract": "      console.log(error)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 64,
      "full_filename": "/scan/frontend/src/app/register/register.component.ts",
      "filename": "frontend/src/app/register/register.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 64,
      "fingerprint": "316a21b2164ef4534eb1b962e2380f40_0",
      "old_fingerprint": "45cb2d4fa01d2116e3078e781627764d_83",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 88,
      "full_filename": "/scan/frontend/src/app/register/register.component.ts",
      "filename": "frontend/src/app/register/register.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 88, "end": 88, "column": { "start": 7, "end": 23 } },
      "sink": {
        "start": 88,
        "end": 88,
        "column": { "start": 7, "end": 23 },
        "content": ""
      },
      "parent_line_number": 88,
      "fingerprint": "316a21b2164ef4534eb1b962e2380f40_1",
      "old_fingerprint": "45cb2d4fa01d2116e3078e781627764d_126",
      "code_extract": "      console.log(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 128,
      "full_filename": "/scan/frontend/src/app/search-result/search-result.component.ts",
      "filename": "frontend/src/app/search-result/search-result.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 128,
        "end": 128,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 128,
        "end": 128,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 128,
      "fingerprint": "5da3963cd25e7c2a1d4f667f670e76f7_0",
      "old_fingerprint": "eacaca156bb7ee0c039114197bb9ead6_175",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 176,
      "full_filename": "/scan/frontend/src/app/search-result/search-result.component.ts",
      "filename": "frontend/src/app/search-result/search-result.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 176,
        "end": 176,
        "column": { "start": 5, "end": 74 }
      },
      "sink": {
        "start": 176,
        "end": 176,
        "column": { "start": 5, "end": 74 },
        "content": ""
      },
      "parent_line_number": 176,
      "fingerprint": "5da3963cd25e7c2a1d4f667f670e76f7_1",
      "old_fingerprint": "eacaca156bb7ee0c039114197bb9ead6_197",
      "code_extract": "    console.log(`Starting instructions for challenge \"${challengeName}\"`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 211,
      "full_filename": "/scan/frontend/src/app/search-result/search-result.component.ts",
      "filename": "frontend/src/app/search-result/search-result.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 211,
        "end": 211,
        "column": { "start": 29, "end": 45 }
      },
      "sink": {
        "start": 211,
        "end": 211,
        "column": { "start": 29, "end": 45 },
        "content": ""
      },
      "parent_line_number": 211,
      "fingerprint": "5da3963cd25e7c2a1d4f667f670e76f7_2",
      "old_fingerprint": "eacaca156bb7ee0c039114197bb9ead6_209",
      "code_extract": "              }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 214,
      "full_filename": "/scan/frontend/src/app/search-result/search-result.component.ts",
      "filename": "frontend/src/app/search-result/search-result.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 214,
        "end": 214,
        "column": { "start": 15, "end": 31 }
      },
      "sink": {
        "start": 214,
        "end": 214,
        "column": { "start": 15, "end": 31 },
        "content": ""
      },
      "parent_line_number": 214,
      "fingerprint": "5da3963cd25e7c2a1d4f667f670e76f7_3",
      "old_fingerprint": "eacaca156bb7ee0c039114197bb9ead6_210",
      "code_extract": "              console.log(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 216,
      "full_filename": "/scan/frontend/src/app/search-result/search-result.component.ts",
      "filename": "frontend/src/app/search-result/search-result.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 216,
        "end": 216,
        "column": { "start": 25, "end": 41 }
      },
      "sink": {
        "start": 216,
        "end": 216,
        "column": { "start": 25, "end": 41 },
        "content": ""
      },
      "parent_line_number": 216,
      "fingerprint": "5da3963cd25e7c2a1d4f667f670e76f7_4",
      "old_fingerprint": "eacaca156bb7ee0c039114197bb9ead6_211",
      "code_extract": "          }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 230,
      "full_filename": "/scan/frontend/src/app/search-result/search-result.component.ts",
      "filename": "frontend/src/app/search-result/search-result.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 230,
        "end": 230,
        "column": { "start": 25, "end": 41 }
      },
      "sink": {
        "start": 230,
        "end": 230,
        "column": { "start": 25, "end": 41 },
        "content": ""
      },
      "parent_line_number": 230,
      "fingerprint": "5da3963cd25e7c2a1d4f667f670e76f7_5",
      "old_fingerprint": "eacaca156bb7ee0c039114197bb9ead6_213",
      "code_extract": "          }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 233,
      "full_filename": "/scan/frontend/src/app/search-result/search-result.component.ts",
      "filename": "frontend/src/app/search-result/search-result.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 233,
        "end": 233,
        "column": { "start": 11, "end": 27 }
      },
      "sink": {
        "start": 233,
        "end": 233,
        "column": { "start": 11, "end": 27 },
        "content": ""
      },
      "parent_line_number": 233,
      "fingerprint": "5da3963cd25e7c2a1d4f667f670e76f7_6",
      "old_fingerprint": "eacaca156bb7ee0c039114197bb9ead6_214",
      "code_extract": "          console.log(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 236,
      "full_filename": "/scan/frontend/src/app/search-result/search-result.component.ts",
      "filename": "frontend/src/app/search-result/search-result.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 236,
        "end": 236,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 236,
        "end": 236,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 236,
      "fingerprint": "5da3963cd25e7c2a1d4f667f670e76f7_7",
      "old_fingerprint": "eacaca156bb7ee0c039114197bb9ead6_215",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 47,
      "full_filename": "/scan/frontend/src/app/server-started-notification/server-started-notification.component.ts",
      "filename": "frontend/src/app/server-started-notification/server-started-notification.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 47,
        "end": 47,
        "column": { "start": 13, "end": 31 }
      },
      "sink": {
        "start": 47,
        "end": 47,
        "column": { "start": 13, "end": 31 },
        "content": ""
      },
      "parent_line_number": 47,
      "fingerprint": "def2939e9d3b0bc2910f37da9bbd538c_0",
      "old_fingerprint": "98ac5ab3dcbdcb1ea4fa96ffe77048e9_56",
      "code_extract": "            console.log(error)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 58,
      "full_filename": "/scan/frontend/src/app/server-started-notification/server-started-notification.component.ts",
      "filename": "frontend/src/app/server-started-notification/server-started-notification.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": { "start": 13, "end": 31 }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": { "start": 13, "end": 31 },
        "content": ""
      },
      "parent_line_number": 58,
      "fingerprint": "def2939e9d3b0bc2910f37da9bbd538c_1",
      "old_fingerprint": "98ac5ab3dcbdcb1ea4fa96ffe77048e9_75",
      "code_extract": "            console.log(error)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 64,
      "full_filename": "/scan/frontend/src/app/server-started-notification/server-started-notification.component.ts",
      "filename": "frontend/src/app/server-started-notification/server-started-notification.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": { "start": 13, "end": 31 }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": { "start": 13, "end": 31 },
        "content": ""
      },
      "parent_line_number": 64,
      "fingerprint": "def2939e9d3b0bc2910f37da9bbd538c_2",
      "old_fingerprint": "98ac5ab3dcbdcb1ea4fa96ffe77048e9_84",
      "code_extract": "            console.log(error)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 54,
      "full_filename": "/scan/frontend/src/app/sidenav/sidenav.component.ts",
      "filename": "frontend/src/app/sidenav/sidenav.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 54,
      "fingerprint": "8f7904df868680bda37dd1ec16c84193_0",
      "old_fingerprint": "87f5daac85690b25a53a8ae5d55d82ee_68",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 85,
      "full_filename": "/scan/frontend/src/app/sidenav/sidenav.component.ts",
      "filename": "frontend/src/app/sidenav/sidenav.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": { "start": 93, "end": 109 }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": { "start": 93, "end": 109 },
        "content": ""
      },
      "parent_line_number": 85,
      "fingerprint": "8f7904df868680bda37dd1ec16c84193_1",
      "old_fingerprint": "87f5daac85690b25a53a8ae5d55d82ee_120",
      "code_extract": "    this.userService.saveLastLoginIp().subscribe((user: any) =\u003e { this.noop() }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 110,
      "full_filename": "/scan/frontend/src/app/sidenav/sidenav.component.ts",
      "filename": "frontend/src/app/sidenav/sidenav.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 110,
        "end": 110,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 110,
        "end": 110,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 110,
      "fingerprint": "8f7904df868680bda37dd1ec16c84193_2",
      "old_fingerprint": "87f5daac85690b25a53a8ae5d55d82ee_153",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 116,
      "full_filename": "/scan/frontend/src/app/sidenav/sidenav.component.ts",
      "filename": "frontend/src/app/sidenav/sidenav.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 116,
        "end": 116,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 116,
        "end": 116,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 116,
      "fingerprint": "8f7904df868680bda37dd1ec16c84193_3",
      "old_fingerprint": "87f5daac85690b25a53a8ae5d55d82ee_161",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 134,
      "full_filename": "/scan/frontend/src/app/sidenav/sidenav.component.ts",
      "filename": "frontend/src/app/sidenav/sidenav.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 134,
        "end": 134,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 134,
        "end": 134,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 134,
      "fingerprint": "8f7904df868680bda37dd1ec16c84193_4",
      "old_fingerprint": "87f5daac85690b25a53a8ae5d55d82ee_179",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 34,
      "full_filename": "/scan/frontend/src/app/token-sale/token-sale.component.ts",
      "filename": "frontend/src/app/token-sale/token-sale.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 34,
        "end": 34,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 34,
        "end": 34,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 34,
      "fingerprint": "6c245db688d2051444e5e3a4e2615478_0",
      "old_fingerprint": "fcc8e24c4ff3b0d2d0d96885232da596_37",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 32,
      "full_filename": "/scan/frontend/src/app/user-details/user-details.component.ts",
      "filename": "frontend/src/app/user-details/user-details.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 32,
        "end": 32,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 32,
        "end": 32,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 32,
      "fingerprint": "01e35a4b51c17a57c6f0d1266ea78a4c_0",
      "old_fingerprint": "4a65291b865190102b87adf25c79ad4f_32",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 132,
      "full_filename": "/scan/frontend/src/app/wallet-web3/wallet-web3.component.ts",
      "filename": "frontend/src/app/wallet-web3/wallet-web3.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 132,
        "end": 132,
        "column": { "start": 11, "end": 31 }
      },
      "sink": {
        "start": 132,
        "end": 132,
        "column": { "start": 11, "end": 31 },
        "content": ""
      },
      "parent_line_number": 132,
      "fingerprint": "05a7724541dd970d7fc422703bb6f3f2_0",
      "old_fingerprint": "a1742ae29333892435217413c7c89553_178",
      "code_extract": "          console.error(error)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 168,
      "full_filename": "/scan/frontend/src/app/wallet-web3/wallet-web3.component.ts",
      "filename": "frontend/src/app/wallet-web3/wallet-web3.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 168,
        "end": 168,
        "column": { "start": 7, "end": 23 }
      },
      "sink": {
        "start": 168,
        "end": 168,
        "column": { "start": 7, "end": 23 },
        "content": ""
      },
      "parent_line_number": 168,
      "fingerprint": "05a7724541dd970d7fc422703bb6f3f2_1",
      "old_fingerprint": "a1742ae29333892435217413c7c89553_192",
      "code_extract": "      console.log(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 34,
      "full_filename": "/scan/frontend/src/app/wallet/wallet.component.ts",
      "filename": "frontend/src/app/wallet/wallet.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 34, "end": 34, "column": { "start": 7, "end": 23 } },
      "sink": {
        "start": 34,
        "end": 34,
        "column": { "start": 7, "end": 23 },
        "content": ""
      },
      "parent_line_number": 34,
      "fingerprint": "a79beedecdd9756234687684b1ad1eb8_0",
      "old_fingerprint": "d51c97884a04cee106bf06a586dd1089_36",
      "code_extract": "      console.log(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 107,
      "full_filename": "/scan/frontend/src/app/web3-sandbox/web3-sandbox.component.ts",
      "filename": "frontend/src/app/web3-sandbox/web3-sandbox.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 107,
        "end": 107,
        "column": { "start": 9, "end": 35 }
      },
      "sink": {
        "start": 107,
        "end": 107,
        "column": { "start": 9, "end": 35 },
        "content": ""
      },
      "parent_line_number": 107,
      "fingerprint": "299ca45e71bdd91e56ec45e6e40a76d7_0",
      "old_fingerprint": "f20188123494b03425edda0aad6a16c3_149",
      "code_extract": "        console.log(output.errors)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 111,
      "full_filename": "/scan/frontend/src/app/web3-sandbox/web3-sandbox.component.ts",
      "filename": "frontend/src/app/web3-sandbox/web3-sandbox.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 111,
        "end": 111,
        "column": { "start": 9, "end": 38 }
      },
      "sink": {
        "start": 111,
        "end": 111,
        "column": { "start": 9, "end": 38 },
        "content": ""
      },
      "parent_line_number": 111,
      "fingerprint": "299ca45e71bdd91e56ec45e6e40a76d7_1",
      "old_fingerprint": "f20188123494b03425edda0aad6a16c3_154",
      "code_extract": "        console.log('output', output)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 117,
      "full_filename": "/scan/frontend/src/app/web3-sandbox/web3-sandbox.component.ts",
      "filename": "frontend/src/app/web3-sandbox/web3-sandbox.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 117,
        "end": 117,
        "column": { "start": 7, "end": 57 }
      },
      "sink": {
        "start": 117,
        "end": 117,
        "column": { "start": 7, "end": 57 },
        "content": ""
      },
      "parent_line_number": 117,
      "fingerprint": "299ca45e71bdd91e56ec45e6e40a76d7_2",
      "old_fingerprint": "f20188123494b03425edda0aad6a16c3_163",
      "code_extract": "      console.error('Error compiling contracts:', error)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 172,
      "full_filename": "/scan/frontend/src/app/web3-sandbox/web3-sandbox.component.ts",
      "filename": "frontend/src/app/web3-sandbox/web3-sandbox.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 172,
        "end": 172,
        "column": { "start": 7, "end": 42 }
      },
      "sink": {
        "start": 172,
        "end": 172,
        "column": { "start": 7, "end": 42 },
        "content": ""
      },
      "parent_line_number": 172,
      "fingerprint": "299ca45e71bdd91e56ec45e6e40a76d7_3",
      "old_fingerprint": "f20188123494b03425edda0aad6a16c3_194",
      "code_extract": "      console.log(this.contractFunctions)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 174,
      "full_filename": "/scan/frontend/src/app/web3-sandbox/web3-sandbox.component.ts",
      "filename": "frontend/src/app/web3-sandbox/web3-sandbox.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 174,
        "end": 174,
        "column": { "start": 7, "end": 56 }
      },
      "sink": {
        "start": 174,
        "end": 174,
        "column": { "start": 7, "end": 56 },
        "content": ""
      },
      "parent_line_number": 174,
      "fingerprint": "299ca45e71bdd91e56ec45e6e40a76d7_4",
      "old_fingerprint": "f20188123494b03425edda0aad6a16c3_195",
      "code_extract": "      console.error('Error deploying contract:', error)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 225,
      "full_filename": "/scan/frontend/src/app/web3-sandbox/web3-sandbox.component.ts",
      "filename": "frontend/src/app/web3-sandbox/web3-sandbox.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 225,
        "end": 225,
        "column": { "start": 7, "end": 31 }
      },
      "sink": {
        "start": 225,
        "end": 225,
        "column": { "start": 7, "end": 31 },
        "content": ""
      },
      "parent_line_number": 225,
      "fingerprint": "299ca45e71bdd91e56ec45e6e40a76d7_5",
      "old_fingerprint": "f20188123494b03425edda0aad6a16c3_212",
      "code_extract": "      console.log(transaction)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 243,
      "full_filename": "/scan/frontend/src/app/web3-sandbox/web3-sandbox.component.ts",
      "filename": "frontend/src/app/web3-sandbox/web3-sandbox.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 243,
        "end": 243,
        "column": { "start": 9, "end": 38 }
      },
      "sink": {
        "start": 243,
        "end": 243,
        "column": { "start": 9, "end": 38 },
        "content": ""
      },
      "parent_line_number": 243,
      "fingerprint": "299ca45e71bdd91e56ec45e6e40a76d7_6",
      "old_fingerprint": "f20188123494b03425edda0aad6a16c3_218",
      "code_extract": "        console.log(func.outputValue)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 245,
      "full_filename": "/scan/frontend/src/app/web3-sandbox/web3-sandbox.component.ts",
      "filename": "frontend/src/app/web3-sandbox/web3-sandbox.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 245,
        "end": 245,
        "column": { "start": 7, "end": 43 }
      },
      "sink": {
        "start": 245,
        "end": 245,
        "column": { "start": 7, "end": 43 },
        "content": ""
      },
      "parent_line_number": 245,
      "fingerprint": "299ca45e71bdd91e56ec45e6e40a76d7_7",
      "old_fingerprint": "f20188123494b03425edda0aad6a16c3_219",
      "code_extract": "      console.log('Invoked:', transaction)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 247,
      "full_filename": "/scan/frontend/src/app/web3-sandbox/web3-sandbox.component.ts",
      "filename": "frontend/src/app/web3-sandbox/web3-sandbox.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 247,
        "end": 247,
        "column": { "start": 7, "end": 54 }
      },
      "sink": {
        "start": 247,
        "end": 247,
        "column": { "start": 7, "end": 54 },
        "content": ""
      },
      "parent_line_number": 247,
      "fingerprint": "299ca45e71bdd91e56ec45e6e40a76d7_8",
      "old_fingerprint": "f20188123494b03425edda0aad6a16c3_220",
      "code_extract": "      console.error('Error invoking function', error)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 310,
      "full_filename": "/scan/frontend/src/app/web3-sandbox/web3-sandbox.component.ts",
      "filename": "frontend/src/app/web3-sandbox/web3-sandbox.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 310,
        "end": 310,
        "column": { "start": 7, "end": 43 }
      },
      "sink": {
        "start": 310,
        "end": 310,
        "column": { "start": 7, "end": 43 },
        "content": ""
      },
      "parent_line_number": 310,
      "fingerprint": "299ca45e71bdd91e56ec45e6e40a76d7_9",
      "old_fingerprint": "f20188123494b03425edda0aad6a16c3_225",
      "code_extract": "      console.log('session', this.session)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 48,
      "full_filename": "/scan/frontend/src/app/welcome-banner/welcome-banner.component.ts",
      "filename": "frontend/src/app/welcome-banner/welcome-banner.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 48,
        "end": 48,
        "column": { "start": 19, "end": 35 }
      },
      "sink": {
        "start": 48,
        "end": 48,
        "column": { "start": 19, "end": 35 },
        "content": ""
      },
      "parent_line_number": 48,
      "fingerprint": "36718d28401e4f0331d66239e08d787c_0",
      "old_fingerprint": "6e157bf00f941ab422919c637fe63273_59",
      "code_extract": "    }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 38,
      "full_filename": "/scan/frontend/src/app/welcome/welcome.component.ts",
      "filename": "frontend/src/app/welcome/welcome.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 38,
        "end": 38,
        "column": { "start": 21, "end": 37 }
      },
      "sink": {
        "start": 38,
        "end": 38,
        "column": { "start": 21, "end": 37 },
        "content": ""
      },
      "parent_line_number": 38,
      "fingerprint": "91a1f80d54ae7965b530b213fe3102bc_0",
      "old_fingerprint": "40dc5d1cfd4c4d26857fab02ac9e055b_44",
      "code_extract": "      }, (err) =\u003e { console.log(err) })"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 111,
      "full_filename": "/scan/frontend/src/hacking-instructor/helpers/helpers.ts",
      "filename": "frontend/src/hacking-instructor/helpers/helpers.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 111,
        "end": 111,
        "column": { "start": 7, "end": 80 }
      },
      "sink": {
        "start": 111,
        "end": 111,
        "column": { "start": 7, "end": 80 },
        "content": ""
      },
      "parent_line_number": 111,
      "fingerprint": "6ac582de3bd2e8eb7c6e53b50e269d59_0",
      "old_fingerprint": "656320ce26cdce635339c2a27e723b07_157",
      "code_extract": "      console.warn(`Could not find Element with selector \"${elementSelector}\"`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 192,
      "full_filename": "/scan/frontend/src/hacking-instructor/index.ts",
      "filename": "frontend/src/hacking-instructor/index.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 192,
        "end": 192,
        "column": { "start": 7, "end": 76 }
      },
      "sink": {
        "start": 192,
        "end": 192,
        "column": { "start": 7, "end": 76 },
        "content": ""
      },
      "parent_line_number": 192,
      "fingerprint": "0d9252cb69df2647b3a6afb5b29079f1_0",
      "old_fingerprint": "b795729200731a1cce0a5c90b73c3b39_202",
      "code_extract": "      console.warn(`Could not find Element with fixture \"${hint.fixture}\"`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 152,
      "full_filename": "/scan/frontend/src/main.ts",
      "filename": "frontend/src/main.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 152,
        "end": 152,
        "column": { "start": 26, "end": 42 }
      },
      "sink": {
        "start": 152,
        "end": 152,
        "column": { "start": 26, "end": 42 },
        "content": ""
      },
      "parent_line_number": 152,
      "fingerprint": "6fad641e2bdab9ded43e926065a6cd22_0",
      "old_fingerprint": "28cf44947f1015afdd4296f5ef34e1df_189",
      "code_extract": "  .catch((err: Error) =\u003e console.log(err))"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 58,
      "full_filename": "/scan/lib/accuracy.ts",
      "filename": "lib/accuracy.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": { "start": 3, "end": 278 }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": { "start": 3, "end": 278 },
        "content": ""
      },
      "parent_line_number": 58,
      "fingerprint": "8c0a7f555cbcff28edf59a649861e286_0",
      "old_fingerprint": "0b421bdc419775d241fc76542013f0cd_72",
      "code_extract": "  logger.info(`Accuracy for '${phase === 'fix it' ? 'Fix It' : 'Find It'}' phase of coding challenge ${colors.cyan(challengeKey)}: ${accuracy \u003e 0.5 ? colors.green(accuracy.toString()) : (accuracy \u003e 0.25 ? colors.yellow(accuracy.toString()) : colors.red(accuracy.toString()))}`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 77,
      "full_filename": "/scan/lib/antiCheat.ts",
      "filename": "lib/antiCheat.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": { "start": 3, "end": 660 }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": { "start": 3, "end": 660 },
        "content": ""
      },
      "parent_line_number": 77,
      "fingerprint": "42b8fff9bf5f1af1dd48c21f07ec284b_0",
      "old_fingerprint": "ceddd60b90670ce1fa1f9244c17c160f_108",
      "code_extract": "  logger.info(`Cheat score for ${areCoupled(challenge, previous().challenge) ? 'coupled ' : (isTrivial(challenge) ? 'trivial ' : '')}${challenge.tutorialOrder ? 'tutorial ' : ''}${colors.cyan(challenge.key)} solved in ${Math.round(minutesSincePreviousSolve)}min (expected ~${minutesExpectedToSolve}min) with${config.get('challenges.showHints') ? '' : 'out'} hints allowed${percentPrecedingInteraction \u003e -1 ? (' and ' + percentPrecedingInteraction * 100 + '% expected preceding URL interaction') : ''}: ${cheatScore \u003c 0.33 ? colors.green(cheatScore.toString()) : (cheatScore \u003c 0.66 ? colors.yellow(cheatScore.toString()) : colors.red(cheatScore.toString()))}`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 102,
      "full_filename": "/scan/lib/antiCheat.ts",
      "filename": "lib/antiCheat.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 102,
        "end": 102,
        "column": { "start": 3, "end": 440 }
      },
      "sink": {
        "start": 102,
        "end": 102,
        "column": { "start": 3, "end": 440 },
        "content": ""
      },
      "parent_line_number": 102,
      "fingerprint": "42b8fff9bf5f1af1dd48c21f07ec284b_1",
      "old_fingerprint": "ceddd60b90670ce1fa1f9244c17c160f_144",
      "code_extract": "  logger.info(`Cheat score for \"Find it\" phase of ${challenge.key === 'scoreBoardChallenge' \u0026\u0026 config.get('hackingInstructor.isEnabled') ? 'tutorial ' : ''}${colors.cyan(challenge.key)} solved in ${Math.round(minutesSincePreviousSolve)}min (expected ~${minutesExpectedToSolve}min): ${cheatScore \u003c 0.33 ? colors.green(cheatScore.toString()) : (cheatScore \u003c 0.66 ? colors.yellow(cheatScore.toString()) : colors.red(cheatScore.toString()))}`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 117,
      "full_filename": "/scan/lib/antiCheat.ts",
      "filename": "lib/antiCheat.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 117,
        "end": 117,
        "column": { "start": 3, "end": 333 }
      },
      "sink": {
        "start": 117,
        "end": 117,
        "column": { "start": 3, "end": 333 },
        "content": ""
      },
      "parent_line_number": 117,
      "fingerprint": "42b8fff9bf5f1af1dd48c21f07ec284b_2",
      "old_fingerprint": "ceddd60b90670ce1fa1f9244c17c160f_164",
      "code_extract": "  logger.info(`Cheat score for \"Fix it\" phase of ${colors.cyan(challenge.key)} solved in ${Math.round(minutesSincePreviousSolve)}min (expected ~${minutesExpectedToSolve}min): ${cheatScore \u003c 0.33 ? colors.green(cheatScore.toString()) : (cheatScore \u003c 0.66 ? colors.yellow(cheatScore.toString()) : colors.red(cheatScore.toString()))}`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 30,
      "full_filename": "/scan/lib/challengeUtils.ts",
      "filename": "lib/challengeUtils.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 30,
        "end": 30,
        "column": { "start": 5, "end": 180 }
      },
      "sink": {
        "start": 30,
        "end": 30,
        "column": { "start": 5, "end": 180 },
        "content": ""
      },
      "parent_line_number": 30,
      "fingerprint": "af87f04b5989f7a4c9694cf6e5bdaf15_0",
      "old_fingerprint": "d3c57600abef8e61b976da5f49e847ee_29",
      "code_extract": "    logger.info(`${isRestore ? colors.grey('Restored') : colors.green('Solved')} ${solvedChallenge.difficulty}-star ${colors.cyan(solvedChallenge.key)} (${solvedChallenge.name})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 36,
      "full_filename": "/scan/lib/challengeUtils.ts",
      "filename": "lib/challengeUtils.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 36,
        "end": 36,
        "column": { "start": 11, "end": 99 }
      },
      "sink": {
        "start": 36,
        "end": 36,
        "column": { "start": 11, "end": 99 },
        "content": ""
      },
      "parent_line_number": 36,
      "fingerprint": "af87f04b5989f7a4c9694cf6e5bdaf15_1",
      "old_fingerprint": "d3c57600abef8e61b976da5f49e847ee_38",
      "code_extract": "          logger.error('Webhook notification failed: ' + colors.red(utils.getErrorMessage(error)))"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 83,
      "full_filename": "/scan/lib/challengeUtils.ts",
      "filename": "lib/challengeUtils.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 83, "end": 83, "column": { "start": 3, "end": 63 } },
      "sink": {
        "start": 83,
        "end": 83,
        "column": { "start": 3, "end": 63 },
        "content": ""
      },
      "parent_line_number": 83,
      "fingerprint": "af87f04b5989f7a4c9694cf6e5bdaf15_2",
      "old_fingerprint": "d3c57600abef8e61b976da5f49e847ee_117",
      "code_extract": "  logger.warn('Missing challenge with name: ' + challengeName)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 92,
      "full_filename": "/scan/lib/challengeUtils.ts",
      "filename": "lib/challengeUtils.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 92, "end": 92, "column": { "start": 3, "end": 59 } },
      "sink": {
        "start": 92,
        "end": 92,
        "column": { "start": 3, "end": 59 },
        "content": ""
      },
      "parent_line_number": 92,
      "fingerprint": "af87f04b5989f7a4c9694cf6e5bdaf15_3",
      "old_fingerprint": "d3c57600abef8e61b976da5f49e847ee_128",
      "code_extract": "  logger.warn('Missing challenge with id: ' + challengeId)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 98,
      "full_filename": "/scan/lib/challengeUtils.ts",
      "filename": "lib/challengeUtils.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 98,
        "end": 98,
        "column": { "start": 3, "end": 179 }
      },
      "sink": {
        "start": 98,
        "end": 98,
        "column": { "start": 3, "end": 179 },
        "content": ""
      },
      "parent_line_number": 98,
      "fingerprint": "af87f04b5989f7a4c9694cf6e5bdaf15_4",
      "old_fingerprint": "d3c57600abef8e61b976da5f49e847ee_140",
      "code_extract": "  logger.info(`${isRestore ? colors.grey('Restored') : colors.green('Solved')} 'Find It' phase of coding challenge ${colors.cyan(solvedChallenge.key)} (${solvedChallenge.name})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 110,
      "full_filename": "/scan/lib/challengeUtils.ts",
      "filename": "lib/challengeUtils.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 110,
        "end": 110,
        "column": { "start": 3, "end": 178 }
      },
      "sink": {
        "start": 110,
        "end": 110,
        "column": { "start": 3, "end": 178 },
        "content": ""
      },
      "parent_line_number": 110,
      "fingerprint": "af87f04b5989f7a4c9694cf6e5bdaf15_5",
      "old_fingerprint": "d3c57600abef8e61b976da5f49e847ee_152",
      "code_extract": "  logger.info(`${isRestore ? colors.grey('Restored') : colors.green('Solved')} 'Fix It' phase of coding challenge ${colors.cyan(solvedChallenge.key)} (${solvedChallenge.name})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 38,
      "full_filename": "/scan/lib/codingChallenges.ts",
      "filename": "lib/codingChallenges.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 38,
        "end": 38,
        "column": { "start": 9, "end": 172 }
      },
      "sink": {
        "start": 38,
        "end": 38,
        "column": { "start": 9, "end": 172 },
        "content": ""
      },
      "parent_line_number": 38,
      "fingerprint": "ec2e0c3e74007c09d397f9fe2e30fe44_0",
      "old_fingerprint": "0b57884bda1c8a7c0d4b2ab409b7028b_45",
      "code_extract": "        logger.warn(`File ${currPath} could not be read. it might have been moved or deleted. If coding challenges are contained in the file, they will not be available.`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 18,
      "full_filename": "/scan/lib/startup/cleanupFtpFolder.ts",
      "filename": "lib/startup/cleanupFtpFolder.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 18, "end": 18, "column": { "start": 5, "end": 89 } },
      "sink": {
        "start": 18,
        "end": 18,
        "column": { "start": 5, "end": 89 },
        "content": ""
      },
      "parent_line_number": 18,
      "fingerprint": "2675f9a83f26f018e0b4ce9c85e7962f_0",
      "old_fingerprint": "c5b8253cb580ae991a34b70b53e3ea80_13",
      "code_extract": "    logger.warn('Error listing PDF files in /ftp folder: ' + utils.getErrorMessage(err))"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 32,
      "full_filename": "/scan/lib/startup/restoreOverwrittenFilesWithOriginals.ts",
      "filename": "lib/startup/restoreOverwrittenFilesWithOriginals.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 32,
        "end": 32,
        "column": { "start": 5, "end": 103 }
      },
      "sink": {
        "start": 32,
        "end": 32,
        "column": { "start": 5, "end": 103 },
        "content": ""
      },
      "parent_line_number": 32,
      "fingerprint": "d9967d065cbf0d2ae0627b6c1077c132_0",
      "old_fingerprint": "d028564b37fb6a8e05eb4a667ed51996_30",
      "code_extract": "    logger.warn('Error listing JSON files in /data/static/i18n folder: ' + utils.getErrorMessage(err))"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 17,
      "full_filename": "/scan/lib/startup/validateChatBot.ts",
      "filename": "lib/startup/validateChatBot.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 17,
        "end": 17,
        "column": { "start": 5, "end": 161 }
      },
      "sink": {
        "start": 17,
        "end": 17,
        "column": { "start": 5, "end": 161 },
        "content": ""
      },
      "parent_line_number": 17,
      "fingerprint": "44789e5257122444666de6e3f9858d5a_0",
      "old_fingerprint": "4e8173640547b0cb8b6f0582d720d9b7_10",
      "code_extract": "    logger.info(`Chatbot training data ${colors.bold(utils.extractFilename(config.get('application.chatBot.trainingData')))} validated (${colors.green('OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 19,
      "full_filename": "/scan/lib/startup/validateChatBot.ts",
      "filename": "lib/startup/validateChatBot.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 19,
        "end": 19,
        "column": { "start": 5, "end": 163 }
      },
      "sink": {
        "start": 19,
        "end": 19,
        "column": { "start": 5, "end": 163 },
        "content": ""
      },
      "parent_line_number": 19,
      "fingerprint": "44789e5257122444666de6e3f9858d5a_1",
      "old_fingerprint": "4e8173640547b0cb8b6f0582d720d9b7_17",
      "code_extract": "    logger.warn(`Chatbot training data ${colors.bold(utils.extractFilename(config.get('application.chatBot.trainingData')))} validated (${colors.red('NOT OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 20,
      "full_filename": "/scan/lib/startup/validateChatBot.ts",
      "filename": "lib/startup/validateChatBot.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 20,
        "end": 20,
        "column": { "start": 5, "end": 160 }
      },
      "sink": {
        "start": 20,
        "end": 20,
        "column": { "start": 5, "end": 160 },
        "content": ""
      },
      "parent_line_number": 20,
      "fingerprint": "44789e5257122444666de6e3f9858d5a_2",
      "old_fingerprint": "4e8173640547b0cb8b6f0582d720d9b7_18",
      "code_extract": "    logger.warn(`Visit ${colors.yellow('https://pwning.owasp-juice.shop/companion-guide/latest/part5/chatbot.html')} for the training data schema definition.`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 22,
      "full_filename": "/scan/lib/startup/validateChatBot.ts",
      "filename": "lib/startup/validateChatBot.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 22, "end": 22, "column": { "start": 7, "end": 71 } },
      "sink": {
        "start": 22,
        "end": 22,
        "column": { "start": 7, "end": 71 },
        "content": ""
      },
      "parent_line_number": 22,
      "fingerprint": "44789e5257122444666de6e3f9858d5a_3",
      "old_fingerprint": "4e8173640547b0cb8b6f0582d720d9b7_21",
      "code_extract": "      logger.error(colors.red('Exiting due to configuration errors!'))"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 33,
      "full_filename": "/scan/lib/startup/validateChatBot.ts",
      "filename": "lib/startup/validateChatBot.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 33,
        "end": 33,
        "column": { "start": 5, "end": 113 }
      },
      "sink": {
        "start": 33,
        "end": 33,
        "column": { "start": 5, "end": 113 },
        "content": ""
      },
      "parent_line_number": 33,
      "fingerprint": "44789e5257122444666de6e3f9858d5a_4",
      "old_fingerprint": "4e8173640547b0cb8b6f0582d720d9b7_35",
      "code_extract": "    logger.warn(`Intent ${colors.italic(intent)} is missing in chatbot training data (${colors.red('NOT OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 37,
      "full_filename": "/scan/lib/startup/validateChatBot.ts",
      "filename": "lib/startup/validateChatBot.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": { "start": 7, "end": 180 }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": { "start": 7, "end": 180 },
        "content": ""
      },
      "parent_line_number": 37,
      "fingerprint": "44789e5257122444666de6e3f9858d5a_5",
      "old_fingerprint": "4e8173640547b0cb8b6f0582d720d9b7_43",
      "code_extract": "      logger.warn(`Answer with ${colors.italic('function')} action and handler ${colors.italic(handler)} is missing for intent ${colors.italic(intent)} (${colors.red('NOT OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 44,
      "full_filename": "/scan/lib/startup/validateConfig.ts",
      "filename": "lib/startup/validateConfig.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 44,
        "end": 44,
        "column": { "start": 5, "end": 117 }
      },
      "sink": {
        "start": 44,
        "end": 44,
        "column": { "start": 5, "end": 117 },
        "content": ""
      },
      "parent_line_number": 44,
      "fingerprint": "8008abf2970450d205beac61e17dfa21_0",
      "old_fingerprint": "49b30af810219ce88d5277b1454f8060_51",
      "code_extract": "    logger.info(`Configuration ${colors.bold(process.env.NODE_ENV ?? 'default')} validated (${colors.green('OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 46,
      "full_filename": "/scan/lib/startup/validateConfig.ts",
      "filename": "lib/startup/validateConfig.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 46,
        "end": 46,
        "column": { "start": 5, "end": 119 }
      },
      "sink": {
        "start": 46,
        "end": 46,
        "column": { "start": 5, "end": 119 },
        "content": ""
      },
      "parent_line_number": 46,
      "fingerprint": "8008abf2970450d205beac61e17dfa21_1",
      "old_fingerprint": "49b30af810219ce88d5277b1454f8060_53",
      "code_extract": "    logger.warn(`Configuration ${colors.bold(process.env.NODE_ENV ?? 'default')} validated (${colors.red('NOT OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 47,
      "full_filename": "/scan/lib/startup/validateConfig.ts",
      "filename": "lib/startup/validateConfig.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 47,
        "end": 47,
        "column": { "start": 5, "end": 191 }
      },
      "sink": {
        "start": 47,
        "end": 47,
        "column": { "start": 5, "end": 191 },
        "content": ""
      },
      "parent_line_number": 47,
      "fingerprint": "8008abf2970450d205beac61e17dfa21_2",
      "old_fingerprint": "49b30af810219ce88d5277b1454f8060_55",
      "code_extract": "    logger.warn(`Visit ${colors.yellow('https://pwning.owasp-juice.shop/companion-guide/latest/part4/customization.html#_yaml_configuration_file')} for the configuration schema definition.`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 49,
      "full_filename": "/scan/lib/startup/validateConfig.ts",
      "filename": "lib/startup/validateConfig.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 49, "end": 49, "column": { "start": 7, "end": 71 } },
      "sink": {
        "start": 49,
        "end": 49,
        "column": { "start": 7, "end": 71 },
        "content": ""
      },
      "parent_line_number": 49,
      "fingerprint": "8008abf2970450d205beac61e17dfa21_3",
      "old_fingerprint": "49b30af810219ce88d5277b1454f8060_61",
      "code_extract": "      logger.error(colors.red('Exiting due to configuration errors!'))"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 60,
      "full_filename": "/scan/lib/startup/validateConfig.ts",
      "filename": "lib/startup/validateConfig.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": { "start": 5, "end": 112 }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": { "start": 5, "end": 112 },
        "content": ""
      },
      "parent_line_number": 60,
      "fingerprint": "8008abf2970450d205beac61e17dfa21_4",
      "old_fingerprint": "49b30af810219ce88d5277b1454f8060_79",
      "code_extract": "    logger.warn(`Config schema validation failed with ${schemaErrors.length} errors (${colors.red('NOT OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 62,
      "full_filename": "/scan/lib/startup/validateConfig.ts",
      "filename": "lib/startup/validateConfig.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 62, "end": 62, "column": { "start": 7, "end": 96 } },
      "sink": {
        "start": 62,
        "end": 62,
        "column": { "start": 7, "end": 96 },
        "content": ""
      },
      "parent_line_number": 62,
      "fingerprint": "8008abf2970450d205beac61e17dfa21_5",
      "old_fingerprint": "49b30af810219ce88d5277b1454f8060_80",
      "code_extract": "      logger.warn(`${path}:${colors.red(message.substr(message.indexOf(path) + path.length))}`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 72,
      "full_filename": "/scan/lib/startup/validateConfig.ts",
      "filename": "lib/startup/validateConfig.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": { "start": 5, "end": 124 }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": { "start": 5, "end": 124 },
        "content": ""
      },
      "parent_line_number": 72,
      "fingerprint": "8008abf2970450d205beac61e17dfa21_6",
      "old_fingerprint": "49b30af810219ce88d5277b1454f8060_93",
      "code_extract": "    logger.warn(`Only ${products.length} products are configured but at least four are required (${colors.red('NOT OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 84,
      "full_filename": "/scan/lib/startup/validateConfig.ts",
      "filename": "lib/startup/validateConfig.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": { "start": 7, "end": 118 }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": { "start": 7, "end": 118 },
        "content": ""
      },
      "parent_line_number": 84,
      "fingerprint": "8008abf2970450d205beac61e17dfa21_7",
      "old_fingerprint": "49b30af810219ce88d5277b1454f8060_118",
      "code_extract": "      logger.warn(`No product is configured as ${colors.italic(name)} but one is required (${colors.red('NOT OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 87,
      "full_filename": "/scan/lib/startup/validateConfig.ts",
      "filename": "lib/startup/validateConfig.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": { "start": 7, "end": 148 }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": { "start": 7, "end": 148 },
        "content": ""
      },
      "parent_line_number": 87,
      "fingerprint": "8008abf2970450d205beac61e17dfa21_8",
      "old_fingerprint": "49b30af810219ce88d5277b1454f8060_123",
      "code_extract": "      logger.warn(`${matchingProducts.length} products are configured as ${colors.italic(name)} but only one is allowed (${colors.red('NOT OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 101,
      "full_filename": "/scan/lib/startup/validateConfig.ts",
      "filename": "lib/startup/validateConfig.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 101,
        "end": 101,
        "column": { "start": 7, "end": 194 }
      },
      "sink": {
        "start": 101,
        "end": 101,
        "column": { "start": 7, "end": 194 },
        "content": ""
      },
      "parent_line_number": 101,
      "fingerprint": "8008abf2970450d205beac61e17dfa21_9",
      "old_fingerprint": "49b30af810219ce88d5277b1454f8060_143",
      "code_extract": "      logger.warn(`Product ${colors.italic(matchingProducts[0].name)} configured as ${colors.italic(name)} does't contain necessary ${colors.italic(`${extra.name}`)} (${colors.red('NOT OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 114,
      "full_filename": "/scan/lib/startup/validateConfig.ts",
      "filename": "lib/startup/validateConfig.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 114,
        "end": 114,
        "column": { "start": 7, "end": 213 }
      },
      "sink": {
        "start": 114,
        "end": 114,
        "column": { "start": 7, "end": 213 },
        "content": ""
      },
      "parent_line_number": 114,
      "fingerprint": "8008abf2970450d205beac61e17dfa21_10",
      "old_fingerprint": "49b30af810219ce88d5277b1454f8060_159",
      "code_extract": "      logger.warn(`Product ${colors.italic(product.name)} is used as ${appliedSpecials.map(({ name }) =\u003e `${colors.italic(name)}`).join(' and ')} but can only be used for one challenge (${colors.red('NOT OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 124,
      "full_filename": "/scan/lib/startup/validateConfig.ts",
      "filename": "lib/startup/validateConfig.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 124,
        "end": 124,
        "column": { "start": 5, "end": 123 }
      },
      "sink": {
        "start": 124,
        "end": 124,
        "column": { "start": 5, "end": 123 },
        "content": ""
      },
      "parent_line_number": 124,
      "fingerprint": "8008abf2970450d205beac61e17dfa21_11",
      "old_fingerprint": "49b30af810219ce88d5277b1454f8060_171",
      "code_extract": "    logger.warn(`Only ${memories.length} memories are configured but at least two are required (${colors.red('NOT OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 135,
      "full_filename": "/scan/lib/startup/validateConfig.ts",
      "filename": "lib/startup/validateConfig.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 135,
        "end": 135,
        "column": { "start": 7, "end": 117 }
      },
      "sink": {
        "start": 135,
        "end": 135,
        "column": { "start": 7, "end": 117 },
        "content": ""
      },
      "parent_line_number": 135,
      "fingerprint": "8008abf2970450d205beac61e17dfa21_12",
      "old_fingerprint": "49b30af810219ce88d5277b1454f8060_181",
      "code_extract": "      logger.warn(`No memory is configured as ${colors.italic(name)} but one is required (${colors.red('NOT OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 138,
      "full_filename": "/scan/lib/startup/validateConfig.ts",
      "filename": "lib/startup/validateConfig.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 138,
        "end": 138,
        "column": { "start": 7, "end": 148 }
      },
      "sink": {
        "start": 138,
        "end": 138,
        "column": { "start": 7, "end": 148 },
        "content": ""
      },
      "parent_line_number": 138,
      "fingerprint": "8008abf2970450d205beac61e17dfa21_13",
      "old_fingerprint": "49b30af810219ce88d5277b1454f8060_183",
      "code_extract": "      logger.warn(`${matchingMemories.length} memories are configured as ${colors.italic(name)} but only one is allowed (${colors.red('NOT OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 150,
      "full_filename": "/scan/lib/startup/validateConfig.ts",
      "filename": "lib/startup/validateConfig.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 150,
        "end": 150,
        "column": { "start": 7, "end": 213 }
      },
      "sink": {
        "start": 150,
        "end": 150,
        "column": { "start": 7, "end": 213 },
        "content": ""
      },
      "parent_line_number": 150,
      "fingerprint": "8008abf2970450d205beac61e17dfa21_14",
      "old_fingerprint": "49b30af810219ce88d5277b1454f8060_188",
      "code_extract": "      logger.warn(`Memory configured as ${colors.italic(name)} must belong to user ${colors.italic(user)} but was linked to ${colors.italic(matchingMemories[0].user ?? 'unknown')} user (${colors.red('NOT OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 162,
      "full_filename": "/scan/lib/startup/validateConfig.ts",
      "filename": "lib/startup/validateConfig.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 162,
        "end": 162,
        "column": { "start": 7, "end": 214 }
      },
      "sink": {
        "start": 162,
        "end": 162,
        "column": { "start": 7, "end": 214 },
        "content": ""
      },
      "parent_line_number": 162,
      "fingerprint": "8008abf2970450d205beac61e17dfa21_15",
      "old_fingerprint": "49b30af810219ce88d5277b1454f8060_191",
      "code_extract": "      logger.warn(`Memory ${colors.italic(memory.caption)} is used as ${appliedSpecials.map(({ name }) =\u003e `${colors.italic(name)}`).join(' and ')} but can only be used for one challenge (${colors.red('NOT OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 172,
      "full_filename": "/scan/lib/startup/validateConfig.ts",
      "filename": "lib/startup/validateConfig.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 172,
        "end": 172,
        "column": { "start": 5, "end": 118 }
      },
      "sink": {
        "start": 172,
        "end": 172,
        "column": { "start": 5, "end": 118 },
        "content": ""
      },
      "parent_line_number": 172,
      "fingerprint": "8008abf2970450d205beac61e17dfa21_16",
      "old_fingerprint": "49b30af810219ce88d5277b1454f8060_193",
      "code_extract": "    logger.warn(`Restricted tutorial mode is enabled while Hacking Instructor is disabled (${colors.red('NOT OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 176,
      "full_filename": "/scan/lib/startup/validateConfig.ts",
      "filename": "lib/startup/validateConfig.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 176,
        "end": 176,
        "column": { "start": 5, "end": 117 }
      },
      "sink": {
        "start": 176,
        "end": 176,
        "column": { "start": 5, "end": 117 },
        "content": ""
      },
      "parent_line_number": 176,
      "fingerprint": "8008abf2970450d205beac61e17dfa21_17",
      "old_fingerprint": "49b30af810219ce88d5277b1454f8060_198",
      "code_extract": "    logger.warn(`CTF flags are enabled while challenge solved notifications are disabled (${colors.red('NOT OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 180,
      "full_filename": "/scan/lib/startup/validateConfig.ts",
      "filename": "lib/startup/validateConfig.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 180,
        "end": 180,
        "column": { "start": 5, "end": 117 }
      },
      "sink": {
        "start": 180,
        "end": 180,
        "column": { "start": 5, "end": 117 },
        "content": ""
      },
      "parent_line_number": 180,
      "fingerprint": "8008abf2970450d205beac61e17dfa21_18",
      "old_fingerprint": "49b30af810219ce88d5277b1454f8060_199",
      "code_extract": "    logger.warn(`CTF country mappings for FBCTF are enabled while CTF flags are disabled (${colors.red('NOT OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 18,
      "full_filename": "/scan/lib/startup/validateDependencies.ts",
      "filename": "lib/startup/validateDependencies.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 18,
        "end": 18,
        "column": { "start": 5, "end": 172 }
      },
      "sink": {
        "start": 18,
        "end": 18,
        "column": { "start": 5, "end": 172 },
        "content": ""
      },
      "parent_line_number": 18,
      "fingerprint": "5b898d003bb88729614a36acc0e9ecdc_0",
      "old_fingerprint": "91b1bc3eff37332cb72fe36d0940d36a_11",
      "code_extract": "    logger.warn(`Dependencies in ${colors.bold(packageDir + '/package.json')} could not be checked due to \"${utils.getErrorMessage(err)}\" error (${colors.red('NOT OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 22,
      "full_filename": "/scan/lib/startup/validateDependencies.ts",
      "filename": "lib/startup/validateDependencies.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 22,
        "end": 22,
        "column": { "start": 5, "end": 122 }
      },
      "sink": {
        "start": 22,
        "end": 22,
        "column": { "start": 5, "end": 122 },
        "content": ""
      },
      "parent_line_number": 22,
      "fingerprint": "5b898d003bb88729614a36acc0e9ecdc_1",
      "old_fingerprint": "91b1bc3eff37332cb72fe36d0940d36a_23",
      "code_extract": "    logger.info(`All dependencies in ${colors.bold(packageDir + '/package.json')} are satisfied (${colors.green('OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 24,
      "full_filename": "/scan/lib/startup/validateDependencies.ts",
      "filename": "lib/startup/validateDependencies.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 24,
        "end": 24,
        "column": { "start": 5, "end": 132 }
      },
      "sink": {
        "start": 24,
        "end": 24,
        "column": { "start": 5, "end": 132 },
        "content": ""
      },
      "parent_line_number": 24,
      "fingerprint": "5b898d003bb88729614a36acc0e9ecdc_2",
      "old_fingerprint": "91b1bc3eff37332cb72fe36d0940d36a_25",
      "code_extract": "    logger.warn(`Dependencies in ${colors.bold(packageDir + '/package.json')} are not rightly satisfied (${colors.red('NOT OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 27,
      "full_filename": "/scan/lib/startup/validateDependencies.ts",
      "filename": "lib/startup/validateDependencies.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 27, "end": 27, "column": { "start": 7, "end": 23 } },
      "sink": {
        "start": 27,
        "end": 27,
        "column": { "start": 7, "end": 23 },
        "content": ""
      },
      "parent_line_number": 27,
      "fingerprint": "5b898d003bb88729614a36acc0e9ecdc_3",
      "old_fingerprint": "91b1bc3eff37332cb72fe36d0940d36a_27",
      "code_extract": "      logger.warn(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 32,
      "full_filename": "/scan/lib/startup/validateDependencies.ts",
      "filename": "lib/startup/validateDependencies.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 32, "end": 32, "column": { "start": 5, "end": 73 } },
      "sink": {
        "start": 32,
        "end": 32,
        "column": { "start": 5, "end": 73 },
        "content": ""
      },
      "parent_line_number": 32,
      "fingerprint": "5b898d003bb88729614a36acc0e9ecdc_4",
      "old_fingerprint": "91b1bc3eff37332cb72fe36d0940d36a_33",
      "code_extract": "    logger.error(colors.red('Exiting due to unsatisfied dependencies!'))"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 41,
      "full_filename": "/scan/lib/startup/validatePreconditions.ts",
      "filename": "lib/startup/validatePreconditions.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 41, "end": 41, "column": { "start": 5, "end": 73 } },
      "sink": {
        "start": 41,
        "end": 41,
        "column": { "start": 5, "end": 73 },
        "content": ""
      },
      "parent_line_number": 41,
      "fingerprint": "5c01336b8dba6e659ec32b986bbf0cbd_0",
      "old_fingerprint": "466c32090ef18052165b9fea31f7a51f_49",
      "code_extract": "    logger.error(colors.red('Exiting due to unsatisfied precondition!'))"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 51,
      "full_filename": "/scan/lib/startup/validatePreconditions.ts",
      "filename": "lib/startup/validatePreconditions.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 51,
        "end": 51,
        "column": { "start": 5, "end": 124 }
      },
      "sink": {
        "start": 51,
        "end": 51,
        "column": { "start": 5, "end": 124 },
        "content": ""
      },
      "parent_line_number": 51,
      "fingerprint": "5c01336b8dba6e659ec32b986bbf0cbd_1",
      "old_fingerprint": "466c32090ef18052165b9fea31f7a51f_64",
      "code_extract": "    logger.warn(`Invalid Node.js version range ${colors.bold(supportedVersion)} in package.json (${colors.red('NOT OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 55,
      "full_filename": "/scan/lib/startup/validatePreconditions.ts",
      "filename": "lib/startup/validatePreconditions.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": { "start": 5, "end": 159 }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": { "start": 5, "end": 159 },
        "content": ""
      },
      "parent_line_number": 55,
      "fingerprint": "5c01336b8dba6e659ec32b986bbf0cbd_2",
      "old_fingerprint": "466c32090ef18052165b9fea31f7a51f_69",
      "code_extract": "    logger.warn(`Detected Node version ${colors.bold(runningVersion)} is not in the supported version range of ${supportedVersion} (${colors.red('NOT OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 58,
      "full_filename": "/scan/lib/startup/validatePreconditions.ts",
      "filename": "lib/startup/validatePreconditions.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 58, "end": 58, "column": { "start": 3, "end": 97 } },
      "sink": {
        "start": 58,
        "end": 58,
        "column": { "start": 3, "end": 97 },
        "content": ""
      },
      "parent_line_number": 58,
      "fingerprint": "5c01336b8dba6e659ec32b986bbf0cbd_3",
      "old_fingerprint": "466c32090ef18052165b9fea31f7a51f_73",
      "code_extract": "  logger.info(`Detected Node.js version ${colors.bold(runningVersion)} (${colors.green('OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 65,
      "full_filename": "/scan/lib/startup/validatePreconditions.ts",
      "filename": "lib/startup/validatePreconditions.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": { "start": 5, "end": 151 }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": { "start": 5, "end": 151 },
        "content": ""
      },
      "parent_line_number": 65,
      "fingerprint": "5c01336b8dba6e659ec32b986bbf0cbd_4",
      "old_fingerprint": "466c32090ef18052165b9fea31f7a51f_86",
      "code_extract": "    logger.warn(`Detected OS ${colors.bold(runningOS)} is not in the list of supported platforms ${supportedOS.toString()} (${colors.red('NOT OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 68,
      "full_filename": "/scan/lib/startup/validatePreconditions.ts",
      "filename": "lib/startup/validatePreconditions.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 68, "end": 68, "column": { "start": 3, "end": 79 } },
      "sink": {
        "start": 68,
        "end": 68,
        "column": { "start": 3, "end": 79 },
        "content": ""
      },
      "parent_line_number": 68,
      "fingerprint": "5c01336b8dba6e659ec32b986bbf0cbd_5",
      "old_fingerprint": "466c32090ef18052165b9fea31f7a51f_89",
      "code_extract": "  logger.info(`Detected OS ${colors.bold(runningOS)} (${colors.green('OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 75,
      "full_filename": "/scan/lib/startup/validatePreconditions.ts",
      "filename": "lib/startup/validatePreconditions.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": { "start": 5, "end": 160 }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": { "start": 5, "end": 160 },
        "content": ""
      },
      "parent_line_number": 75,
      "fingerprint": "5c01336b8dba6e659ec32b986bbf0cbd_6",
      "old_fingerprint": "466c32090ef18052165b9fea31f7a51f_101",
      "code_extract": "    logger.warn(`Detected CPU ${colors.bold(runningArch)} is not in the list of supported architectures ${supportedArch.toString()} (${colors.red('NOT OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 78,
      "full_filename": "/scan/lib/startup/validatePreconditions.ts",
      "filename": "lib/startup/validatePreconditions.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 78, "end": 78, "column": { "start": 3, "end": 82 } },
      "sink": {
        "start": 78,
        "end": 78,
        "column": { "start": 3, "end": 82 },
        "content": ""
      },
      "parent_line_number": 78,
      "fingerprint": "5c01336b8dba6e659ec32b986bbf0cbd_7",
      "old_fingerprint": "466c32090ef18052165b9fea31f7a51f_111",
      "code_extract": "  logger.info(`Detected CPU ${colors.bold(runningArch)} (${colors.green('OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 85,
      "full_filename": "/scan/lib/startup/validatePreconditions.ts",
      "filename": "lib/startup/validatePreconditions.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 85, "end": 85, "column": { "start": 7, "end": 88 } },
      "sink": {
        "start": 85,
        "end": 85,
        "column": { "start": 7, "end": 88 },
        "content": ""
      },
      "parent_line_number": 85,
      "fingerprint": "5c01336b8dba6e659ec32b986bbf0cbd_8",
      "old_fingerprint": "466c32090ef18052165b9fea31f7a51f_121",
      "code_extract": "      logger.info(`Domain ${colors.bold(domain)} is reachable (${colors.green('OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 89,
      "full_filename": "/scan/lib/startup/validatePreconditions.ts",
      "filename": "lib/startup/validatePreconditions.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": { "start": 7, "end": 123 }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": { "start": 7, "end": 123 },
        "content": ""
      },
      "parent_line_number": 89,
      "fingerprint": "5c01336b8dba6e659ec32b986bbf0cbd_9",
      "old_fingerprint": "466c32090ef18052165b9fea31f7a51f_127",
      "code_extract": "      logger.warn(`Domain ${colors.bold(domain)} is not reachable (${colors.yellow('NOT OK')} in a future major release)`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 92,
      "full_filename": "/scan/lib/startup/validatePreconditions.ts",
      "filename": "lib/startup/validatePreconditions.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 92,
        "end": 92,
        "column": { "start": 9, "end": 119 }
      },
      "sink": {
        "start": 92,
        "end": 92,
        "column": { "start": 9, "end": 119 },
        "content": ""
      },
      "parent_line_number": 92,
      "fingerprint": "5c01336b8dba6e659ec32b986bbf0cbd_10",
      "old_fingerprint": "466c32090ef18052165b9fea31f7a51f_129",
      "code_extract": "        logger.warn(`${colors.italic(dependency)} will not work as intended without access to ${colors.bold(domain)}`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 106,
      "full_filename": "/scan/lib/startup/validatePreconditions.ts",
      "filename": "lib/startup/validatePreconditions.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 106,
        "end": 106,
        "column": { "start": 11, "end": 98 }
      },
      "sink": {
        "start": 106,
        "end": 106,
        "column": { "start": 11, "end": 98 },
        "content": ""
      },
      "parent_line_number": 106,
      "fingerprint": "5c01336b8dba6e659ec32b986bbf0cbd_11",
      "old_fingerprint": "466c32090ef18052165b9fea31f7a51f_148",
      "code_extract": "          logger.warn(`Port ${colors.bold(port.toString())} is in use (${colors.red('NOT OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 109,
      "full_filename": "/scan/lib/startup/validatePreconditions.ts",
      "filename": "lib/startup/validatePreconditions.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 109,
        "end": 109,
        "column": { "start": 11, "end": 99 }
      },
      "sink": {
        "start": 109,
        "end": 109,
        "column": { "start": 11, "end": 99 },
        "content": ""
      },
      "parent_line_number": 109,
      "fingerprint": "5c01336b8dba6e659ec32b986bbf0cbd_12",
      "old_fingerprint": "466c32090ef18052165b9fea31f7a51f_150",
      "code_extract": "          logger.info(`Port ${colors.bold(port.toString())} is available (${colors.green('OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 121,
      "full_filename": "/scan/lib/startup/validatePreconditions.ts",
      "filename": "lib/startup/validatePreconditions.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 121,
        "end": 121,
        "column": { "start": 5, "end": 93 }
      },
      "sink": {
        "start": 121,
        "end": 121,
        "column": { "start": 5, "end": 93 },
        "content": ""
      },
      "parent_line_number": 121,
      "fingerprint": "5c01336b8dba6e659ec32b986bbf0cbd_13",
      "old_fingerprint": "466c32090ef18052165b9fea31f7a51f_169",
      "code_extract": "    logger.info(`Required file ${colors.bold(fileName)} is present (${colors.green('OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 124,
      "full_filename": "/scan/lib/startup/validatePreconditions.ts",
      "filename": "lib/startup/validatePreconditions.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 124,
        "end": 124,
        "column": { "start": 5, "end": 95 }
      },
      "sink": {
        "start": 124,
        "end": 124,
        "column": { "start": 5, "end": 95 },
        "content": ""
      },
      "parent_line_number": 124,
      "fingerprint": "5c01336b8dba6e659ec32b986bbf0cbd_14",
      "old_fingerprint": "466c32090ef18052165b9fea31f7a51f_170",
      "code_extract": "    logger.warn(`Required file ${colors.bold(fileName)} is missing (${colors.red('NOT OK')})`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 126,
      "full_filename": "/scan/lib/utils.ts",
      "filename": "lib/utils.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 126,
        "end": 126,
        "column": { "start": 5, "end": 81 }
      },
      "sink": {
        "start": 126,
        "end": 126,
        "column": { "start": 5, "end": 81 },
        "content": ""
      },
      "parent_line_number": 126,
      "fingerprint": "bcc7ff473822fc3fbb0658fd73b00a4f_0",
      "old_fingerprint": "ed8e5d98dc17777ac33c93cde7ca56c7_172",
      "code_extract": "    logger.warn('Failed to download ' + url + ' (' + getErrorMessage(err) + ')')"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 38,
      "full_filename": "/scan/lib/webhook.ts",
      "filename": "lib/webhook.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 38,
        "end": 38,
        "column": { "start": 3, "end": 192 }
      },
      "sink": {
        "start": 38,
        "end": 38,
        "column": { "start": 3, "end": 192 },
        "content": ""
      },
      "parent_line_number": 38,
      "fingerprint": "ee827b35b1f5654cb196376138796ac4_0",
      "old_fingerprint": "b45cdaf017eb5bca76b8fd456e4e2dcf_47",
      "code_extract": "  logger.info(`Webhook ${colors.bold(webhook)} notified about ${colors.cyan(challenge.key)} being solved: ${res.ok ? colors.green(res.status.toString()) : colors.red(res.status.toString())}`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 182,
      "full_filename": "/scan/routes/order.ts",
      "filename": "routes/order.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 182,
        "end": 182,
        "column": { "start": 5, "end": 26 }
      },
      "sink": {
        "start": 182,
        "end": 182,
        "column": { "start": 5, "end": 26 },
        "content": ""
      },
      "parent_line_number": 182,
      "fingerprint": "3745cdc8e9025d11a9d0ee877d0cbdb8_0",
      "old_fingerprint": "940007431b7b85e32c9b7aa83e4c5425_200",
      "code_extract": "    console.log(discount)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 45,
      "full_filename": "/scan/routes/profileImageFileUpload.ts",
      "filename": "routes/profileImageFileUpload.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 45, "end": 45, "column": { "start": 7, "end": 95 } },
      "sink": {
        "start": 45,
        "end": 45,
        "column": { "start": 7, "end": 95 },
        "content": ""
      },
      "parent_line_number": 45,
      "fingerprint": "b733d86b55e7b3ea612fb3f215de2db9_0",
      "old_fingerprint": "0bbe5260cf6b1ef087ae35bfe381885a_52",
      "code_extract": "      logger.warn('Error writing file: ' + (err instanceof Error ? err.message : String(err)))"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 36,
      "full_filename": "/scan/routes/profileImageUrlUpload.ts",
      "filename": "routes/profileImageUrlUpload.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 36,
        "end": 36,
        "column": { "start": 13, "end": 123 }
      },
      "sink": {
        "start": 36,
        "end": 36,
        "column": { "start": 13, "end": 123 },
        "content": ""
      },
      "parent_line_number": 36,
      "fingerprint": "6271fa8901ddca3980112579be1215b7_0",
      "old_fingerprint": "41a8e483720e73cb8d5e5bf41d02a1b4_39",
      "code_extract": "            logger.warn(`Error retrieving user profile image: ${utils.getErrorMessage(error)}; using image link directly`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 9,
      "full_filename": "/scan/rsn/rsn-update.ts",
      "filename": "rsn/rsn-update.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 9, "end": 9, "column": { "start": 5, "end": 104 } },
      "sink": {
        "start": 9,
        "end": 9,
        "column": { "start": 5, "end": 104 },
        "content": ""
      },
      "parent_line_number": 9,
      "fingerprint": "65466e159533b983b45555bfc31a1ab7_0",
      "old_fingerprint": "1a517f4f6f23c9a02940c17c352b424e_0",
      "code_extract": "    console.log(`${colors.bold('All file diffs have been locked!')} Commit changed cache.json to git.`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 12,
      "full_filename": "/scan/rsn/rsn-update.ts",
      "filename": "rsn/rsn-update.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 12, "end": 12, "column": { "start": 5, "end": 21 } },
      "sink": {
        "start": 12,
        "end": 12,
        "column": { "start": 5, "end": 21 },
        "content": ""
      },
      "parent_line_number": 12,
      "fingerprint": "65466e159533b983b45555bfc31a1ab7_1",
      "old_fingerprint": "1a517f4f6f23c9a02940c17c352b424e_3",
      "code_extract": "    console.log(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 11,
      "full_filename": "/scan/rsn/rsn-verbose.ts",
      "filename": "rsn/rsn-verbose.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 11,
        "end": 11,
        "column": { "start": 7, "end": 119 }
      },
      "sink": {
        "start": 11,
        "end": 11,
        "column": { "start": 7, "end": 119 },
        "content": ""
      },
      "parent_line_number": 11,
      "fingerprint": "5a76fb8dc6e39328de2d03f62248b4a9_0",
      "old_fingerprint": "c05513ed1dad210240ab5bed52e33eae_2",
      "code_extract": "      console.log(`${colors.green(colors.bold('No new file diffs recognized since last lock!'))} No action required.`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 13,
      "full_filename": "/scan/rsn/rsn-verbose.ts",
      "filename": "rsn/rsn-verbose.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 13,
        "end": 13,
        "column": { "start": 7, "end": 191 }
      },
      "sink": {
        "start": 13,
        "end": 13,
        "column": { "start": 7, "end": 191 },
        "content": ""
      },
      "parent_line_number": 13,
      "fingerprint": "5a76fb8dc6e39328de2d03f62248b4a9_1",
      "old_fingerprint": "c05513ed1dad210240ab5bed52e33eae_6",
      "code_extract": "      console.log(`${colors.red(colors.bold('New file diffs recognized since last lock!'))} Double-check and amend listed files and lock new state with ${colors.bold('npm run rsn:update')}`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 14,
      "full_filename": "/scan/rsn/rsn-verbose.ts",
      "filename": "rsn/rsn-verbose.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 14,
        "end": 14,
        "column": { "start": 7, "end": 183 }
      },
      "sink": {
        "start": 14,
        "end": 14,
        "column": { "start": 7, "end": 183 },
        "content": ""
      },
      "parent_line_number": 14,
      "fingerprint": "5a76fb8dc6e39328de2d03f62248b4a9_2",
      "old_fingerprint": "c05513ed1dad210240ab5bed52e33eae_7",
      "code_extract": "      console.log(`Be aware that diffs for the ${filesWithDiff.length} affected files below contain ${colors.bold('all changes')} including locked \u0026 cached ones! Compare carefully!`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 22,
      "full_filename": "/scan/rsn/rsn-verbose.ts",
      "filename": "rsn/rsn-verbose.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 22, "end": 22, "column": { "start": 5, "end": 21 } },
      "sink": {
        "start": 22,
        "end": 22,
        "column": { "start": 5, "end": 21 },
        "content": ""
      },
      "parent_line_number": 22,
      "fingerprint": "5a76fb8dc6e39328de2d03f62248b4a9_3",
      "old_fingerprint": "c05513ed1dad210240ab5bed52e33eae_22",
      "code_extract": "    console.log(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 11,
      "full_filename": "/scan/rsn/rsn.ts",
      "filename": "rsn/rsn.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 11,
        "end": 11,
        "column": { "start": 7, "end": 119 }
      },
      "sink": {
        "start": 11,
        "end": 11,
        "column": { "start": 7, "end": 119 },
        "content": ""
      },
      "parent_line_number": 11,
      "fingerprint": "b9f4eb3b0b71eb1106d5536674331dda_0",
      "old_fingerprint": "ecebdd84a21f437e89acdf442ad22de2_1",
      "code_extract": "      console.log(`${colors.green(colors.bold('No new file diffs recognized since last lock!'))} No action required.`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 13,
      "full_filename": "/scan/rsn/rsn.ts",
      "filename": "rsn/rsn.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 13,
        "end": 13,
        "column": { "start": 7, "end": 191 }
      },
      "sink": {
        "start": 13,
        "end": 13,
        "column": { "start": 7, "end": 191 },
        "content": ""
      },
      "parent_line_number": 13,
      "fingerprint": "b9f4eb3b0b71eb1106d5536674331dda_1",
      "old_fingerprint": "ecebdd84a21f437e89acdf442ad22de2_4",
      "code_extract": "      console.log(`${colors.red(colors.bold('New file diffs recognized since last lock!'))} Double-check and amend listed files and lock new state with ${colors.bold('npm run rsn:update')}`)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 19,
      "full_filename": "/scan/rsn/rsn.ts",
      "filename": "rsn/rsn.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 19, "end": 19, "column": { "start": 5, "end": 21 } },
      "sink": {
        "start": 19,
        "end": 19,
        "column": { "start": 5, "end": 21 },
        "content": ""
      },
      "parent_line_number": 19,
      "fingerprint": "b9f4eb3b0b71eb1106d5536674331dda_2",
      "old_fingerprint": "ecebdd84a21f437e89acdf442ad22de2_16",
      "code_extract": "    console.log(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 100,
      "full_filename": "/scan/rsn/rsnUtil.ts",
      "filename": "rsn/rsnUtil.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 100,
        "end": 100,
        "column": { "start": 9, "end": 25 }
      },
      "sink": {
        "start": 100,
        "end": 100,
        "column": { "start": 9, "end": 25 },
        "content": ""
      },
      "parent_line_number": 100,
      "fingerprint": "727ba8a3319fa521fdcfbffdd6989f60_0",
      "old_fingerprint": "df2ad29c62f6c7b1d2a43f53ce7d3b98_142",
      "code_extract": "        console.log(err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 111,
      "full_filename": "/scan/rsn/rsnUtil.ts",
      "filename": "rsn/rsnUtil.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 111,
        "end": 111,
        "column": { "start": 3, "end": 40 }
      },
      "sink": {
        "start": 111,
        "end": 111,
        "column": { "start": 3, "end": 40 },
        "content": ""
      },
      "parent_line_number": 111,
      "fingerprint": "727ba8a3319fa521fdcfbffdd6989f60_1",
      "old_fingerprint": "df2ad29c62f6c7b1d2a43f53ce7d3b98_156",
      "code_extract": "  console.log(colors.bold(file + '\\n'))"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 115,
      "full_filename": "/scan/rsn/rsnUtil.ts",
      "filename": "rsn/rsnUtil.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 115,
        "end": 115,
        "column": { "start": 9, "end": 38 }
      },
      "sink": {
        "start": 115,
        "end": 115,
        "column": { "start": 9, "end": 38 },
        "content": ""
      },
      "parent_line_number": 115,
      "fingerprint": "727ba8a3319fa521fdcfbffdd6989f60_2",
      "old_fingerprint": "df2ad29c62f6c7b1d2a43f53ce7d3b98_160",
      "code_extract": "        console.log(colors.red(line))"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 117,
      "full_filename": "/scan/rsn/rsnUtil.ts",
      "filename": "rsn/rsnUtil.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 117,
        "end": 117,
        "column": { "start": 9, "end": 40 }
      },
      "sink": {
        "start": 117,
        "end": 117,
        "column": { "start": 9, "end": 40 },
        "content": ""
      },
      "parent_line_number": 117,
      "fingerprint": "727ba8a3319fa521fdcfbffdd6989f60_3",
      "old_fingerprint": "df2ad29c62f6c7b1d2a43f53ce7d3b98_165",
      "code_extract": "        console.log(colors.green(line))"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 119,
      "full_filename": "/scan/rsn/rsnUtil.ts",
      "filename": "rsn/rsnUtil.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 119,
        "end": 119,
        "column": { "start": 9, "end": 26 }
      },
      "sink": {
        "start": 119,
        "end": 119,
        "column": { "start": 9, "end": 26 },
        "content": ""
      },
      "parent_line_number": 119,
      "fingerprint": "727ba8a3319fa521fdcfbffdd6989f60_4",
      "old_fingerprint": "df2ad29c62f6c7b1d2a43f53ce7d3b98_166",
      "code_extract": "        console.log(line)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 135,
      "full_filename": "/scan/rsn/rsnUtil.ts",
      "filename": "rsn/rsnUtil.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 135,
        "end": 135,
        "column": { "start": 9, "end": 37 }
      },
      "sink": {
        "start": 135,
        "end": 135,
        "column": { "start": 9, "end": 37 },
        "content": ""
      },
      "parent_line_number": 135,
      "fingerprint": "727ba8a3319fa521fdcfbffdd6989f60_5",
      "old_fingerprint": "df2ad29c62f6c7b1d2a43f53ce7d3b98_180",
      "code_extract": "        console.log(colors.red(key))"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 139,
      "full_filename": "/scan/rsn/rsnUtil.ts",
      "filename": "rsn/rsnUtil.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 139,
        "end": 139,
        "column": { "start": 9, "end": 37 }
      },
      "sink": {
        "start": 139,
        "end": 139,
        "column": { "start": 9, "end": 37 },
        "content": ""
      },
      "parent_line_number": 139,
      "fingerprint": "727ba8a3319fa521fdcfbffdd6989f60_6",
      "old_fingerprint": "df2ad29c62f6c7b1d2a43f53ce7d3b98_184",
      "code_extract": "        console.log(colors.red(key))"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 143,
      "full_filename": "/scan/rsn/rsnUtil.ts",
      "filename": "rsn/rsnUtil.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 143,
        "end": 143,
        "column": { "start": 7, "end": 35 }
      },
      "sink": {
        "start": 143,
        "end": 143,
        "column": { "start": 7, "end": 35 },
        "content": ""
      },
      "parent_line_number": 143,
      "fingerprint": "727ba8a3319fa521fdcfbffdd6989f60_7",
      "old_fingerprint": "df2ad29c62f6c7b1d2a43f53ce7d3b98_186",
      "code_extract": "      console.log(colors.red(key))"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 154,
      "full_filename": "/scan/server.ts",
      "filename": "server.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 154,
        "end": 154,
        "column": { "start": 7, "end": 69 }
      },
      "sink": {
        "start": 154,
        "end": 154,
        "column": { "start": 7, "end": 69 },
        "content": ""
      },
      "parent_line_number": 154,
      "fingerprint": "602478eb7d16a5a0e5086caf562308ec_0",
      "old_fingerprint": "29e200b602fcad758dba61cb3959aada_190",
      "code_extract": "      console.error('Error in timed startup function: ' + name, err)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger_leak",
      "title": "Leakage of information in logger message",
      "description": "## Description\n\nInformation leakage through logger messages can compromise sensitive data. This vulnerability arises when dynamic data or variables, which may contain sensitive information, are included in log messages.\n\n## Remediations\n\n- **Do not** include sensitive data directly in logger messages. This can lead to the exposure of such data in log files, which might be accessible to unauthorized individuals.\n  ```javascript\n  logger.info(`Results: ${data}`) // unsafe\n  ```\n- **Do** use logging levels appropriately to control the verbosity of log output and minimize the risk of leaking sensitive information in production environments.",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger_leak",
      "line_number": 500,
      "full_filename": "/scan/server.ts",
      "filename": "server.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 500,
        "end": 500,
        "column": { "start": 11, "end": 27 }
      },
      "sink": {
        "start": 500,
        "end": 500,
        "column": { "start": 11, "end": 27 },
        "content": ""
      },
      "parent_line_number": 500,
      "fingerprint": "602478eb7d16a5a0e5086caf562308ec_1",
      "old_fingerprint": "29e200b602fcad758dba61cb3959aada_226",
      "code_extract": "          console.log(err)"
    }
  ],
  "medium": [
    {
      "cwe_ids": ["693"],
      "id": "javascript_express_helmet_missing",
      "title": "Missing Helmet configuration on HTTP headers",
      "description": "## Description\n\nHelmet can help protect your app from some well-known web vulnerabilities by setting HTTP headers appropriately. Failing to configure Helmet for HTTP headers leaves your application vulnerable to several web attacks.\n\n## Remediations\n\n- **Do** use Helmet middleware to secure your app by adding it to your application's middleware.\n  ```javascript\n  const helmet = require(\"helmet\");\n  app.use(helmet());\n  ```\n\n## References\n\n- [Express Security Best Practices: Use Helmet](https://expressjs.com/en/advanced/best-practice-security.html#use-helmet)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_helmet_missing",
      "line_number": 8,
      "full_filename": "/scan/data/static/codefixes/accessLogDisclosureChallenge_1_correct.ts",
      "filename": "data/static/codefixes/accessLogDisclosureChallenge_1_correct.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 8, "end": 8, "column": { "start": 13, "end": 22 } },
      "sink": {
        "start": 8,
        "end": 8,
        "column": { "start": 13, "end": 22 },
        "content": ""
      },
      "parent_line_number": 8,
      "fingerprint": "eccbf193f2fe41e920ee2ae689d830b0_0",
      "old_fingerprint": "4c882aa2af0fde20e1f7a59ecf8b0692_0",
      "code_extract": "const app = express()"
    },
    {
      "cwe_ids": ["693"],
      "id": "javascript_express_helmet_missing",
      "title": "Missing Helmet configuration on HTTP headers",
      "description": "## Description\n\nHelmet can help protect your app from some well-known web vulnerabilities by setting HTTP headers appropriately. Failing to configure Helmet for HTTP headers leaves your application vulnerable to several web attacks.\n\n## Remediations\n\n- **Do** use Helmet middleware to secure your app by adding it to your application's middleware.\n  ```javascript\n  const helmet = require(\"helmet\");\n  app.use(helmet());\n  ```\n\n## References\n\n- [Express Security Best Practices: Use Helmet](https://expressjs.com/en/advanced/best-practice-security.html#use-helmet)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_helmet_missing",
      "line_number": 22,
      "full_filename": "/scan/data/static/codefixes/accessLogDisclosureChallenge_2.ts",
      "filename": "data/static/codefixes/accessLogDisclosureChallenge_2.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 22,
        "end": 22,
        "column": { "start": 13, "end": 22 }
      },
      "sink": {
        "start": 22,
        "end": 22,
        "column": { "start": 13, "end": 22 },
        "content": ""
      },
      "parent_line_number": 22,
      "fingerprint": "8b3e16c0744e98c161918ee9db9a2716_0",
      "old_fingerprint": "b0f4b4fb3bc68d8053634f1418a5134a_2",
      "code_extract": "const app = express()"
    },
    {
      "cwe_ids": ["693"],
      "id": "javascript_express_helmet_missing",
      "title": "Missing Helmet configuration on HTTP headers",
      "description": "## Description\n\nHelmet can help protect your app from some well-known web vulnerabilities by setting HTTP headers appropriately. Failing to configure Helmet for HTTP headers leaves your application vulnerable to several web attacks.\n\n## Remediations\n\n- **Do** use Helmet middleware to secure your app by adding it to your application's middleware.\n  ```javascript\n  const helmet = require(\"helmet\");\n  app.use(helmet());\n  ```\n\n## References\n\n- [Express Security Best Practices: Use Helmet](https://expressjs.com/en/advanced/best-practice-security.html#use-helmet)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_helmet_missing",
      "line_number": 13,
      "full_filename": "/scan/data/static/codefixes/directoryListingChallenge_3.ts",
      "filename": "data/static/codefixes/directoryListingChallenge_3.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 13,
        "end": 13,
        "column": { "start": 11, "end": 20 }
      },
      "sink": {
        "start": 13,
        "end": 13,
        "column": { "start": 11, "end": 20 },
        "content": ""
      },
      "parent_line_number": 13,
      "fingerprint": "efd10e07c236f30c5d224116142636e6_0",
      "old_fingerprint": "17a588f802c485080445d566ce797fb7_1",
      "code_extract": "    app = express()"
    },
    {
      "cwe_ids": ["693"],
      "id": "javascript_express_jwt_not_revoked",
      "title": "Missing revoke method on JWT",
      "description": "## Description\n\nFailing to implement a revoke method for JSON Web Tokens (JWTs) can lead to security vulnerabilities, especially when the tokens contain sensitive information. In order to maintain the integrity and confidentiality of any data contained within JWTs, it is best practice caching policy to always revoke them.\n\n## Remediations\n\n- **Do** ensure JWTs are short-lived by implementing a method to revoke them. This reduces the risk of unauthorized access to sensitive information.\n  ```javascript\n  expressjwt({\n    ...\n    isRevoked: this.customRevokeCall(),\n    ...\n  })\n  ```\n\n## References\n\n- [ExpressJWT documentation on revoking tokens](https://github.com/auth0/express-jwt#revoked-tokens)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_jwt_not_revoked",
      "line_number": 54,
      "full_filename": "/scan/lib/insecurity.ts",
      "filename": "lib/insecurity.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": { "start": 35, "end": 77 }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": { "start": 35, "end": 77 },
        "content": ""
      },
      "parent_line_number": 54,
      "fingerprint": "d5aa377b45e8572a3f1634b5411f5973_0",
      "old_fingerprint": "02224af06e73a4b9b6ac7c1bed03aed3_0",
      "code_extract": "export const isAuthorized = () =\u003e expressJwt(({ secret: publicKey }) as any)"
    },
    {
      "cwe_ids": ["693"],
      "id": "javascript_express_jwt_not_revoked",
      "title": "Missing revoke method on JWT",
      "description": "## Description\n\nFailing to implement a revoke method for JSON Web Tokens (JWTs) can lead to security vulnerabilities, especially when the tokens contain sensitive information. In order to maintain the integrity and confidentiality of any data contained within JWTs, it is best practice caching policy to always revoke them.\n\n## Remediations\n\n- **Do** ensure JWTs are short-lived by implementing a method to revoke them. This reduces the risk of unauthorized access to sensitive information.\n  ```javascript\n  expressjwt({\n    ...\n    isRevoked: this.customRevokeCall(),\n    ...\n  })\n  ```\n\n## References\n\n- [ExpressJWT documentation on revoking tokens](https://github.com/auth0/express-jwt#revoked-tokens)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_jwt_not_revoked",
      "line_number": 55,
      "full_filename": "/scan/lib/insecurity.ts",
      "filename": "lib/insecurity.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": { "start": 30, "end": 79 }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": { "start": 30, "end": 79 },
        "content": ""
      },
      "parent_line_number": 55,
      "fingerprint": "d5aa377b45e8572a3f1634b5411f5973_1",
      "old_fingerprint": "02224af06e73a4b9b6ac7c1bed03aed3_1",
      "code_extract": "export const denyAll = () =\u003e expressJwt({ secret: '' + Math.random() } as any)"
    },
    {
      "cwe_ids": ["601"],
      "id": "javascript_express_open_redirect",
      "title": "Unsanitized user input in redirect",
      "description": "## Description\n\nUsing unsanitized user input for redirection can expose your application to phishing attacks. This vulnerability occurs when user input directly influences the destination of a redirect without proper validation, making it easier for attackers to redirect users to malicious sites.\n\n## Remediations\n\n- **Do not** use unsanitized user input to construct URLs for redirection. This can lead to security vulnerabilities where attackers could exploit the redirect to lead users to malicious sites.\n- **Do** validate user input by employing a safe list or a mapping strategy for constructing URLs. This ensures that only pre-approved destinations are used for redirects, significantly reducing the risk of phishing attacks.\n  ```javascript\n  var map = {\n    \"1\": \"/planes\",\n    \"2\": \"/trains\",\n    \"3\": \"/automobiles\",\n  }\n\n  res.redirect(map[req.body.transport])\n  ```\n\n## References\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_open_redirect",
      "line_number": 19,
      "full_filename": "/scan/routes/redirect.ts",
      "filename": "routes/redirect.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 19, "end": 19, "column": { "start": 7, "end": 26 } },
      "sink": {
        "start": 19,
        "end": 19,
        "column": { "start": 7, "end": 26 },
        "content": ""
      },
      "parent_line_number": 19,
      "fingerprint": "f351c85327733db80d3dc0c23cf794bf_0",
      "old_fingerprint": "623323f0cc9fb08fc13be6eae846e585_0",
      "code_extract": "      res.redirect(toUrl)"
    },
    {
      "cwe_ids": ["693"],
      "id": "javascript_express_reduce_fingerprint",
      "title": "Missing server configuration to reduce server fingerprinting",
      "description": "## Description\n\nReducing server fingerprinting enhances security by making it harder for attackers to identify the software your server is running. Server fingerprinting involves analyzing the unique responses of server software to specific requests, which can reveal information about the server's software and version. While not a direct security vulnerability, minimizing this information leakage is a proactive step to obscure details that could be used in targeted attacks.\n\n## Remediations\n\n- **Do** disable the `X-Powered-By` header in Express.js applications to prevent revealing the server's technology stack. Use the `app.disable()` method to achieve this.\n  ```javascript\n  app.disable('x-powered-by');\n  ```\n\n## References\n\n- [Express Security Best Practices](https://expressjs.com/en/advanced/best-practice-security.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_reduce_fingerprint",
      "line_number": 8,
      "full_filename": "/scan/data/static/codefixes/accessLogDisclosureChallenge_1_correct.ts",
      "filename": "data/static/codefixes/accessLogDisclosureChallenge_1_correct.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 8, "end": 8, "column": { "start": 13, "end": 22 } },
      "sink": {
        "start": 8,
        "end": 8,
        "column": { "start": 13, "end": 22 },
        "content": ""
      },
      "parent_line_number": 8,
      "fingerprint": "28319c25c70d029f1b2e1248b4f392ad_0",
      "old_fingerprint": "74ecf244423e9f7ea5115a8588353ab3_0",
      "code_extract": "const app = express()"
    },
    {
      "cwe_ids": ["693"],
      "id": "javascript_express_reduce_fingerprint",
      "title": "Missing server configuration to reduce server fingerprinting",
      "description": "## Description\n\nReducing server fingerprinting enhances security by making it harder for attackers to identify the software your server is running. Server fingerprinting involves analyzing the unique responses of server software to specific requests, which can reveal information about the server's software and version. While not a direct security vulnerability, minimizing this information leakage is a proactive step to obscure details that could be used in targeted attacks.\n\n## Remediations\n\n- **Do** disable the `X-Powered-By` header in Express.js applications to prevent revealing the server's technology stack. Use the `app.disable()` method to achieve this.\n  ```javascript\n  app.disable('x-powered-by');\n  ```\n\n## References\n\n- [Express Security Best Practices](https://expressjs.com/en/advanced/best-practice-security.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_reduce_fingerprint",
      "line_number": 22,
      "full_filename": "/scan/data/static/codefixes/accessLogDisclosureChallenge_2.ts",
      "filename": "data/static/codefixes/accessLogDisclosureChallenge_2.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 22,
        "end": 22,
        "column": { "start": 13, "end": 22 }
      },
      "sink": {
        "start": 22,
        "end": 22,
        "column": { "start": 13, "end": 22 },
        "content": ""
      },
      "parent_line_number": 22,
      "fingerprint": "1003e94d97526871aacf0e391c5a3a33_0",
      "old_fingerprint": "2269aba7e6444ba3455e7aa3ee8dc336_2",
      "code_extract": "const app = express()"
    },
    {
      "cwe_ids": ["693"],
      "id": "javascript_express_reduce_fingerprint",
      "title": "Missing server configuration to reduce server fingerprinting",
      "description": "## Description\n\nReducing server fingerprinting enhances security by making it harder for attackers to identify the software your server is running. Server fingerprinting involves analyzing the unique responses of server software to specific requests, which can reveal information about the server's software and version. While not a direct security vulnerability, minimizing this information leakage is a proactive step to obscure details that could be used in targeted attacks.\n\n## Remediations\n\n- **Do** disable the `X-Powered-By` header in Express.js applications to prevent revealing the server's technology stack. Use the `app.disable()` method to achieve this.\n  ```javascript\n  app.disable('x-powered-by');\n  ```\n\n## References\n\n- [Express Security Best Practices](https://expressjs.com/en/advanced/best-practice-security.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_express_reduce_fingerprint",
      "line_number": 13,
      "full_filename": "/scan/data/static/codefixes/directoryListingChallenge_3.ts",
      "filename": "data/static/codefixes/directoryListingChallenge_3.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 13,
        "end": 13,
        "column": { "start": 11, "end": 20 }
      },
      "sink": {
        "start": 13,
        "end": 13,
        "column": { "start": 11, "end": 20 },
        "content": ""
      },
      "parent_line_number": 13,
      "fingerprint": "d63673c7a1f5ccdf3fc52874d16b862b_0",
      "old_fingerprint": "ef1f610b5d1d0e41e2ae136bc7ab2132_1",
      "code_extract": "    app = express()"
    },
    {
      "cwe_ids": ["1333"],
      "id": "javascript_lang_dynamic_regex",
      "title": "Unsanitized dynamic input in regular expression",
      "description": "## Description\n\nCreating regular expressions from dynamic input can lead to a vulnerability known as Regular Expression Denial of Service (ReDoS). This issue arises because some regular expressions can be processed with exponential time complexity. When attackers exploit this, it can significantly drain CPU resources, effectively causing a denial of service.\n\n## Remediations\n\n- **Do** validate all dynamic and user-supplied input against a strict safelist of allowed characters before using it in regular expressions. This step helps prevent attackers from injecting malicious patterns.\n- **Do** restrict the length of input that can be processed. Limiting input size is a straightforward way to mitigate many ReDoS vulnerabilities.\n- **Do** implement timeouts for regular expression evaluation to avoid excessive resource consumption. This can be achieved using JavaScript environments or libraries that allow setting execution time limits.\n- **Do** simplify complex regular expressions to reduce the risk of catastrophic backtracking. Breaking down expressions into simpler parts makes them safer and more manageable.\n- **Do not** directly concatenate user input into regular expressions. This practice can introduce unsafe patterns and lead to vulnerabilities.\n  ```javascript\n  var dynamicRegex = new RegExp('^' + userInput); // unsafe\n  ```\n\n## References\n\n- [OWASP Regular expression Denial of Service - ReDoS](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_dynamic_regex",
      "line_number": 76,
      "full_filename": "/scan/lib/codingChallenges.ts",
      "filename": "lib/codingChallenges.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 76, "end": 76, "column": { "start": 9, "end": 67 } },
      "sink": {
        "start": 76,
        "end": 76,
        "column": { "start": 9, "end": 67 },
        "content": ""
      },
      "parent_line_number": 76,
      "fingerprint": "b1383ae4397a0603f1d7d1985685c117_0",
      "old_fingerprint": "eee10c4971af801bfdb8772911550c43_0",
      "code_extract": "    if (new RegExp(`vuln-code-snippet vuln-line.*${challengeKey}`).exec(lines[i]) != null) {"
    },
    {
      "cwe_ids": ["1333"],
      "id": "javascript_lang_dynamic_regex",
      "title": "Unsanitized dynamic input in regular expression",
      "description": "## Description\n\nCreating regular expressions from dynamic input can lead to a vulnerability known as Regular Expression Denial of Service (ReDoS). This issue arises because some regular expressions can be processed with exponential time complexity. When attackers exploit this, it can significantly drain CPU resources, effectively causing a denial of service.\n\n## Remediations\n\n- **Do** validate all dynamic and user-supplied input against a strict safelist of allowed characters before using it in regular expressions. This step helps prevent attackers from injecting malicious patterns.\n- **Do** restrict the length of input that can be processed. Limiting input size is a straightforward way to mitigate many ReDoS vulnerabilities.\n- **Do** implement timeouts for regular expression evaluation to avoid excessive resource consumption. This can be achieved using JavaScript environments or libraries that allow setting execution time limits.\n- **Do** simplify complex regular expressions to reduce the risk of catastrophic backtracking. Breaking down expressions into simpler parts makes them safer and more manageable.\n- **Do not** directly concatenate user input into regular expressions. This practice can introduce unsafe patterns and lead to vulnerabilities.\n  ```javascript\n  var dynamicRegex = new RegExp('^' + userInput); // unsafe\n  ```\n\n## References\n\n- [OWASP Regular expression Denial of Service - ReDoS](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_dynamic_regex",
      "line_number": 78,
      "full_filename": "/scan/lib/codingChallenges.ts",
      "filename": "lib/codingChallenges.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 78,
        "column": { "start": 16, "end": 77 }
      },
      "sink": {
        "start": 78,
        "end": 78,
        "column": { "start": 16, "end": 77 },
        "content": ""
      },
      "parent_line_number": 78,
      "fingerprint": "b1383ae4397a0603f1d7d1985685c117_1",
      "old_fingerprint": "eee10c4971af801bfdb8772911550c43_1",
      "code_extract": "    } else if (new RegExp(`vuln-code-snippet neutral-line.*${challengeKey}`).exec(lines[i]) != null) {"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger",
      "title": "Leakage of sensitive information in logger message",
      "description": "## Description\n\nSensitive information leakage through logger messages can compromise user privacy and security. This vulnerability occurs when sensitive data, such as personal identifiable information (PII), is included in log messages, making it accessible to unauthorized individuals.\n\n## Remediations\n\n- **Do not** include sensitive data in logger messages. This can lead to unintended exposure of private information.\n  ```javascript\n  logger.info(`User is: ${user.email}`) // unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers to reference users in log messages. This approach maintains user privacy while still allowing for effective logging.\n  ```javascript\n  logger.info(`User is: ${user.uuid}`)\n  ```\n## References\n\n- [OWASP Logging Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger",
      "line_number": 116,
      "full_filename": "/scan/frontend/src/app/faucet/faucet.component.ts",
      "filename": "frontend/src/app/faucet/faucet.component.ts",
      "data_type": {
        "category_uuid": "cef587dd-76db-430b-9e18-7b031e1a193b",
        "name": "Physical Address"
      },
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 114,
        "end": 114,
        "column": { "start": 33, "end": 50 }
      },
      "sink": {
        "start": 116,
        "end": 116,
        "column": { "start": 7, "end": 36 },
        "content": ""
      },
      "parent_line_number": 116,
      "fingerprint": "c44141692e5287b9db7db0edad5e66ca_0",
      "old_fingerprint": "f1b6b154588d6a569b4005568da8195f_0",
      "code_extract": "      console.log(balanceBigNumber)"
    },
    {
      "cwe_ids": ["532"],
      "id": "javascript_lang_logger",
      "title": "Leakage of sensitive information in logger message",
      "description": "## Description\n\nSensitive information leakage through logger messages can compromise user privacy and security. This vulnerability occurs when sensitive data, such as personal identifiable information (PII), is included in log messages, making it accessible to unauthorized individuals.\n\n## Remediations\n\n- **Do not** include sensitive data in logger messages. This can lead to unintended exposure of private information.\n  ```javascript\n  logger.info(`User is: ${user.email}`) // unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers to reference users in log messages. This approach maintains user privacy while still allowing for effective logging.\n  ```javascript\n  logger.info(`User is: ${user.uuid}`)\n  ```\n## References\n\n- [OWASP Logging Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_logger",
      "line_number": 221,
      "full_filename": "/scan/frontend/src/app/faucet/faucet.component.ts",
      "filename": "frontend/src/app/faucet/faucet.component.ts",
      "data_type": {
        "category_uuid": "cef587dd-76db-430b-9e18-7b031e1a193b",
        "name": "Physical Address"
      },
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 215,
        "end": 215,
        "column": { "start": 33, "end": 50 }
      },
      "sink": {
        "start": 221,
        "end": 221,
        "column": { "start": 7, "end": 65 },
        "content": ""
      },
      "parent_line_number": 221,
      "fingerprint": "c44141692e5287b9db7db0edad5e66ca_1",
      "old_fingerprint": "f1b6b154588d6a569b4005568da8195f_1",
      "code_extract": "      console.log('ETH balance:', balanceEth, typeof balanceEth)"
    },
    {
      "cwe_ids": ["208"],
      "id": "javascript_lang_observable_timing",
      "title": "Observable Timing Discrepancy",
      "description": "## Description\n\nObservable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.\n\n## Remediations\n\n- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.\n- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.\n- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.\n  ```javascript\n    if (apiToken === \"zDE9ET!TDq2uZx2oM!FD2\") { // unsafe\n      ...\n    }\n  ```\n- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.\n\n## References\n\n- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_observable_timing",
      "line_number": 28,
      "full_filename": "/scan/data/static/codefixes/loginAdminChallenge_1.ts",
      "filename": "data/static/codefixes/loginAdminChallenge_1.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 28,
        "end": 28,
        "column": { "start": 31, "end": 58 }
      },
      "sink": {
        "start": 28,
        "end": 28,
        "column": { "start": 31, "end": 58 },
        "content": ""
      },
      "parent_line_number": 28,
      "fingerprint": "ddce43a74e03835cc5176d883fa5147c_0",
      "old_fingerprint": "8c72f7aa26c496aa7c5dc86b379e1379_6",
      "code_extract": "+        if (user.data?.id \u0026\u0026 user.data.totpSecret !== '') {"
    },
    {
      "cwe_ids": ["208"],
      "id": "javascript_lang_observable_timing",
      "title": "Observable Timing Discrepancy",
      "description": "## Description\n\nObservable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.\n\n## Remediations\n\n- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.\n- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.\n- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.\n  ```javascript\n    if (apiToken === \"zDE9ET!TDq2uZx2oM!FD2\") { // unsafe\n      ...\n    }\n  ```\n- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.\n\n## References\n\n- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_observable_timing",
      "line_number": 27,
      "full_filename": "/scan/data/static/codefixes/loginAdminChallenge_2.ts",
      "filename": "data/static/codefixes/loginAdminChallenge_2.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 27,
        "end": 27,
        "column": { "start": 30, "end": 57 }
      },
      "sink": {
        "start": 27,
        "end": 27,
        "column": { "start": 30, "end": 57 },
        "content": ""
      },
      "parent_line_number": 27,
      "fingerprint": "5e0da817764d3f03af9364abb217f48c_0",
      "old_fingerprint": "7fa8c00b5b6f20bbcccf82095757a8c3_4",
      "code_extract": "        if (user.data?.id \u0026\u0026 user.data.totpSecret !== '') {"
    },
    {
      "cwe_ids": ["208"],
      "id": "javascript_lang_observable_timing",
      "title": "Observable Timing Discrepancy",
      "description": "## Description\n\nObservable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.\n\n## Remediations\n\n- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.\n- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.\n- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.\n  ```javascript\n    if (apiToken === \"zDE9ET!TDq2uZx2oM!FD2\") { // unsafe\n      ...\n    }\n  ```\n- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.\n\n## References\n\n- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_observable_timing",
      "line_number": 25,
      "full_filename": "/scan/data/static/codefixes/loginBenderChallenge_1.ts",
      "filename": "data/static/codefixes/loginBenderChallenge_1.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 25,
        "end": 25,
        "column": { "start": 30, "end": 57 }
      },
      "sink": {
        "start": 25,
        "end": 25,
        "column": { "start": 30, "end": 57 },
        "content": ""
      },
      "parent_line_number": 25,
      "fingerprint": "b329a3b5b9ab5d5f0f132c8c44f91071_0",
      "old_fingerprint": "fa9244135ca00de0ef3b04528f5aae79_2",
      "code_extract": "        if (user.data?.id \u0026\u0026 user.data.totpSecret !== '') {"
    },
    {
      "cwe_ids": ["208"],
      "id": "javascript_lang_observable_timing",
      "title": "Observable Timing Discrepancy",
      "description": "## Description\n\nObservable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.\n\n## Remediations\n\n- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.\n- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.\n- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.\n  ```javascript\n    if (apiToken === \"zDE9ET!TDq2uZx2oM!FD2\") { // unsafe\n      ...\n    }\n  ```\n- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.\n\n## References\n\n- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_observable_timing",
      "line_number": 23,
      "full_filename": "/scan/data/static/codefixes/loginBenderChallenge_3.ts",
      "filename": "data/static/codefixes/loginBenderChallenge_3.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 23,
        "end": 23,
        "column": { "start": 30, "end": 57 }
      },
      "sink": {
        "start": 23,
        "end": 23,
        "column": { "start": 30, "end": 57 },
        "content": ""
      },
      "parent_line_number": 23,
      "fingerprint": "5c0be5357927e85fc8cd03a2efa06eb1_0",
      "old_fingerprint": "b398463623356618d6594fd7d98aaee7_0",
      "code_extract": "        if (user.data?.id \u0026\u0026 user.data.totpSecret !== '') {"
    },
    {
      "cwe_ids": ["208"],
      "id": "javascript_lang_observable_timing",
      "title": "Observable Timing Discrepancy",
      "description": "## Description\n\nObservable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.\n\n## Remediations\n\n- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.\n- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.\n- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.\n  ```javascript\n    if (apiToken === \"zDE9ET!TDq2uZx2oM!FD2\") { // unsafe\n      ...\n    }\n  ```\n- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.\n\n## References\n\n- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_observable_timing",
      "line_number": 28,
      "full_filename": "/scan/data/static/codefixes/loginBenderChallenge_4.ts",
      "filename": "data/static/codefixes/loginBenderChallenge_4.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 28,
        "end": 28,
        "column": { "start": 30, "end": 57 }
      },
      "sink": {
        "start": 28,
        "end": 28,
        "column": { "start": 30, "end": 57 },
        "content": ""
      },
      "parent_line_number": 28,
      "fingerprint": "f2f8302695eb708410bda145fd6efbac_0",
      "old_fingerprint": "25d5551416bef7a789b0083071dc6620_5",
      "code_extract": "        if (user.data?.id \u0026\u0026 user.data.totpSecret !== '') {"
    },
    {
      "cwe_ids": ["208"],
      "id": "javascript_lang_observable_timing",
      "title": "Observable Timing Discrepancy",
      "description": "## Description\n\nObservable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.\n\n## Remediations\n\n- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.\n- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.\n- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.\n  ```javascript\n    if (apiToken === \"zDE9ET!TDq2uZx2oM!FD2\") { // unsafe\n      ...\n    }\n  ```\n- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.\n\n## References\n\n- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_observable_timing",
      "line_number": 24,
      "full_filename": "/scan/data/static/codefixes/loginJimChallenge_1_correct.ts",
      "filename": "data/static/codefixes/loginJimChallenge_1_correct.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 24,
        "end": 24,
        "column": { "start": 30, "end": 57 }
      },
      "sink": {
        "start": 24,
        "end": 24,
        "column": { "start": 30, "end": 57 },
        "content": ""
      },
      "parent_line_number": 24,
      "fingerprint": "f8192230416fc3abc5fa408aa5270b77_0",
      "old_fingerprint": "047e08423a276d4ac3369d6046332546_1",
      "code_extract": "        if (user.data?.id \u0026\u0026 user.data.totpSecret !== '') {"
    },
    {
      "cwe_ids": ["208"],
      "id": "javascript_lang_observable_timing",
      "title": "Observable Timing Discrepancy",
      "description": "## Description\n\nObservable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.\n\n## Remediations\n\n- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.\n- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.\n- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.\n  ```javascript\n    if (apiToken === \"zDE9ET!TDq2uZx2oM!FD2\") { // unsafe\n      ...\n    }\n  ```\n- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.\n\n## References\n\n- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_observable_timing",
      "line_number": 27,
      "full_filename": "/scan/data/static/codefixes/loginJimChallenge_2.ts",
      "filename": "data/static/codefixes/loginJimChallenge_2.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 27,
        "end": 27,
        "column": { "start": 30, "end": 57 }
      },
      "sink": {
        "start": 27,
        "end": 27,
        "column": { "start": 30, "end": 57 },
        "content": ""
      },
      "parent_line_number": 27,
      "fingerprint": "efffa8a04606868bf214043807bcce15_0",
      "old_fingerprint": "3fc9ec8c6507879d4dff1d2d9f55700e_3",
      "code_extract": "        if (user.data?.id \u0026\u0026 user.data.totpSecret !== '') {"
    },
    {
      "cwe_ids": ["208"],
      "id": "javascript_lang_observable_timing",
      "title": "Observable Timing Discrepancy",
      "description": "## Description\n\nObservable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.\n\n## Remediations\n\n- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.\n- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.\n- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.\n  ```javascript\n    if (apiToken === \"zDE9ET!TDq2uZx2oM!FD2\") { // unsafe\n      ...\n    }\n  ```\n- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.\n\n## References\n\n- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_observable_timing",
      "line_number": 34,
      "full_filename": "/scan/data/static/codefixes/loginJimChallenge_4.ts",
      "filename": "data/static/codefixes/loginJimChallenge_4.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 34,
        "end": 34,
        "column": { "start": 31, "end": 58 }
      },
      "sink": {
        "start": 34,
        "end": 34,
        "column": { "start": 31, "end": 58 },
        "content": ""
      },
      "parent_line_number": 34,
      "fingerprint": "e29c9c01dd359d4a4f313fd27eceb380_0",
      "old_fingerprint": "3c4fc791c56bdfe56da83300278f570e_7",
      "code_extract": "         if (user.data?.id \u0026\u0026 user.data.totpSecret !== '') {"
    },
    {
      "cwe_ids": ["208"],
      "id": "javascript_lang_observable_timing",
      "title": "Observable Timing Discrepancy",
      "description": "## Description\n\nObservable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.\n\n## Remediations\n\n- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.\n- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.\n- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.\n  ```javascript\n    if (apiToken === \"zDE9ET!TDq2uZx2oM!FD2\") { // unsafe\n      ...\n    }\n  ```\n- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.\n\n## References\n\n- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_observable_timing",
      "line_number": 87,
      "full_filename": "/scan/frontend/src/app/change-password/change-password.component.ts",
      "filename": "frontend/src/app/change-password/change-password.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 87, "end": 87, "column": { "start": 9, "end": 36 } },
      "sink": {
        "start": 87,
        "end": 87,
        "column": { "start": 9, "end": 36 },
        "content": ""
      },
      "parent_line_number": 87,
      "fingerprint": "1d311dd87187433d76469f878c149afb_0",
      "old_fingerprint": "9019cf8930a7be1b7dfbbe642494308b_12",
      "code_extract": "    if (password !== passwordRepeat) {"
    },
    {
      "cwe_ids": ["208"],
      "id": "javascript_lang_observable_timing",
      "title": "Observable Timing Discrepancy",
      "description": "## Description\n\nObservable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.\n\n## Remediations\n\n- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.\n- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.\n- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.\n  ```javascript\n    if (apiToken === \"zDE9ET!TDq2uZx2oM!FD2\") { // unsafe\n      ...\n    }\n  ```\n- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.\n\n## References\n\n- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_observable_timing",
      "line_number": 130,
      "full_filename": "/scan/frontend/src/app/forgot-password/forgot-password.component.ts",
      "filename": "frontend/src/app/forgot-password/forgot-password.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 130,
        "end": 130,
        "column": { "start": 9, "end": 36 }
      },
      "sink": {
        "start": 130,
        "end": 130,
        "column": { "start": 9, "end": 36 },
        "content": ""
      },
      "parent_line_number": 130,
      "fingerprint": "8bea3e98a9aa99c090f545cfab18ea05_0",
      "old_fingerprint": "9979cfa067f25fe4198593948a3ef3a2_17",
      "code_extract": "    if (password !== passwordRepeat) {"
    },
    {
      "cwe_ids": ["208"],
      "id": "javascript_lang_observable_timing",
      "title": "Observable Timing Discrepancy",
      "description": "## Description\n\nObservable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.\n\n## Remediations\n\n- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.\n- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.\n- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.\n  ```javascript\n    if (apiToken === \"zDE9ET!TDq2uZx2oM!FD2\") { // unsafe\n      ...\n    }\n  ```\n- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.\n\n## References\n\n- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_observable_timing",
      "line_number": 106,
      "full_filename": "/scan/frontend/src/app/register/register.component.ts",
      "filename": "frontend/src/app/register/register.component.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 106,
        "end": 106,
        "column": { "start": 9, "end": 36 }
      },
      "sink": {
        "start": 106,
        "end": 106,
        "column": { "start": 9, "end": 36 },
        "content": ""
      },
      "parent_line_number": 106,
      "fingerprint": "22c71da8e7a35dd1e1e3bd03b4fc99f2_0",
      "old_fingerprint": "a731a757a31e05b560b908e8454f93df_14",
      "code_extract": "    if (password !== passwordRepeat) {"
    },
    {
      "cwe_ids": ["208"],
      "id": "javascript_lang_observable_timing",
      "title": "Observable Timing Discrepancy",
      "description": "## Description\n\nObservable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.\n\n## Remediations\n\n- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.\n- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.\n- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.\n  ```javascript\n    if (apiToken === \"zDE9ET!TDq2uZx2oM!FD2\") { // unsafe\n      ...\n    }\n  ```\n- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.\n\n## References\n\n- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_observable_timing",
      "line_number": 255,
      "full_filename": "/scan/frontend/src/hacking-instructor/helpers/helpers.ts",
      "filename": "frontend/src/hacking-instructor/helpers/helpers.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 255,
        "end": 255,
        "column": { "start": 11, "end": 48 }
      },
      "sink": {
        "start": 255,
        "end": 255,
        "column": { "start": 11, "end": 48 },
        "content": ""
      },
      "parent_line_number": 255,
      "fingerprint": "0a9fc6a91f03fe2bc9ede0de2e9d87cf_0",
      "old_fingerprint": "26490faa4af0d79fb2b8aaf7a3455b54_20",
      "code_extract": "      if (window.location.hash === expectedHash) {"
    },
    {
      "cwe_ids": ["208"],
      "id": "javascript_lang_observable_timing",
      "title": "Observable Timing Discrepancy",
      "description": "## Description\n\nObservable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.\n\n## Remediations\n\n- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.\n- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.\n- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.\n  ```javascript\n    if (apiToken === \"zDE9ET!TDq2uZx2oM!FD2\") { // unsafe\n      ...\n    }\n  ```\n- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.\n\n## References\n\n- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_observable_timing",
      "line_number": 169,
      "full_filename": "/scan/lib/insecurity.ts",
      "filename": "lib/insecurity.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 169,
        "end": 169,
        "column": { "start": 90, "end": 164 }
      },
      "sink": {
        "start": 169,
        "end": 169,
        "column": { "start": 90, "end": 164 },
        "content": ""
      },
      "parent_line_number": 169,
      "fingerprint": "86871ecafb473c930b61161f8026e00f_0",
      "old_fingerprint": "d46bfcdd20b1cd36eca20fd55ccec3a6_19",
      "code_extract": "  return decodedToken?.data?.role === roles.deluxe \u0026\u0026 decodedToken?.data?.deluxeToken \u0026\u0026 decodedToken?.data?.deluxeToken === deluxeToken(decodedToken?.data?.email)"
    },
    {
      "cwe_ids": ["208"],
      "id": "javascript_lang_observable_timing",
      "title": "Observable Timing Discrepancy",
      "description": "## Description\n\nObservable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.\n\n## Remediations\n\n- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.\n- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.\n- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.\n  ```javascript\n    if (apiToken === \"zDE9ET!TDq2uZx2oM!FD2\") { // unsafe\n      ...\n    }\n  ```\n- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.\n\n## References\n\n- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_observable_timing",
      "line_number": 72,
      "full_filename": "/scan/routes/2fa.ts",
      "filename": "routes/2fa.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 72, "end": 72, "column": { "start": 9, "end": 31 } },
      "sink": {
        "start": 72,
        "end": 72,
        "column": { "start": 9, "end": 31 },
        "content": ""
      },
      "parent_line_number": 72,
      "fingerprint": "d81ef3141d58e8551b76596b89a290d1_0",
      "old_fingerprint": "e1521b0ffd12964dfada8826ae45f5f4_11",
      "code_extract": "    if (user.totpSecret === '') {"
    },
    {
      "cwe_ids": ["208"],
      "id": "javascript_lang_observable_timing",
      "title": "Observable Timing Discrepancy",
      "description": "## Description\n\nObservable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.\n\n## Remediations\n\n- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.\n- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.\n- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.\n  ```javascript\n    if (apiToken === \"zDE9ET!TDq2uZx2oM!FD2\") { // unsafe\n      ...\n    }\n  ```\n- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.\n\n## References\n\n- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_observable_timing",
      "line_number": 113,
      "full_filename": "/scan/routes/2fa.ts",
      "filename": "routes/2fa.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 113,
        "end": 113,
        "column": { "start": 9, "end": 50 }
      },
      "sink": {
        "start": 113,
        "end": 113,
        "column": { "start": 9, "end": 50 },
        "content": ""
      },
      "parent_line_number": 113,
      "fingerprint": "d81ef3141d58e8551b76596b89a290d1_1",
      "old_fingerprint": "e1521b0ffd12964dfada8826ae45f5f4_15",
      "code_extract": "    if (user.password !== security.hash(password)) {"
    },
    {
      "cwe_ids": ["208"],
      "id": "javascript_lang_observable_timing",
      "title": "Observable Timing Discrepancy",
      "description": "## Description\n\nObservable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.\n\n## Remediations\n\n- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.\n- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.\n- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.\n  ```javascript\n    if (apiToken === \"zDE9ET!TDq2uZx2oM!FD2\") { // unsafe\n      ...\n    }\n  ```\n- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.\n\n## References\n\n- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_observable_timing",
      "line_number": 117,
      "full_filename": "/scan/routes/2fa.ts",
      "filename": "routes/2fa.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 117,
        "end": 117,
        "column": { "start": 9, "end": 31 }
      },
      "sink": {
        "start": 117,
        "end": 117,
        "column": { "start": 9, "end": 31 },
        "content": ""
      },
      "parent_line_number": 117,
      "fingerprint": "d81ef3141d58e8551b76596b89a290d1_2",
      "old_fingerprint": "e1521b0ffd12964dfada8826ae45f5f4_16",
      "code_extract": "    if (user.totpSecret !== '') {"
    },
    {
      "cwe_ids": ["208"],
      "id": "javascript_lang_observable_timing",
      "title": "Observable Timing Discrepancy",
      "description": "## Description\n\nObservable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.\n\n## Remediations\n\n- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.\n- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.\n- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.\n  ```javascript\n    if (apiToken === \"zDE9ET!TDq2uZx2oM!FD2\") { // unsafe\n      ...\n    }\n  ```\n- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.\n\n## References\n\n- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_observable_timing",
      "line_number": 158,
      "full_filename": "/scan/routes/2fa.ts",
      "filename": "routes/2fa.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 158,
        "end": 158,
        "column": { "start": 9, "end": 50 }
      },
      "sink": {
        "start": 158,
        "end": 158,
        "column": { "start": 9, "end": 50 },
        "content": ""
      },
      "parent_line_number": 158,
      "fingerprint": "d81ef3141d58e8551b76596b89a290d1_3",
      "old_fingerprint": "e1521b0ffd12964dfada8826ae45f5f4_18",
      "code_extract": "    if (user.password !== security.hash(password)) {"
    },
    {
      "cwe_ids": ["208"],
      "id": "javascript_lang_observable_timing",
      "title": "Observable Timing Discrepancy",
      "description": "## Description\n\nObservable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.\n\n## Remediations\n\n- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.\n- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.\n- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.\n  ```javascript\n    if (apiToken === \"zDE9ET!TDq2uZx2oM!FD2\") { // unsafe\n      ...\n    }\n  ```\n- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.\n\n## References\n\n- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_observable_timing",
      "line_number": 39,
      "full_filename": "/scan/routes/changePassword.ts",
      "filename": "routes/changePassword.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 39,
        "end": 39,
        "column": { "start": 28, "end": 89 }
      },
      "sink": {
        "start": 39,
        "end": 39,
        "column": { "start": 28, "end": 89 },
        "content": ""
      },
      "parent_line_number": 39,
      "fingerprint": "24e131a07d49a212d37417b226761e7e_0",
      "old_fingerprint": "d3d9d273b968ee58d052727331f22393_9",
      "code_extract": "    if (currentPassword \u0026\u0026 security.hash(currentPassword) !== loggedInUser.data.password) {"
    },
    {
      "cwe_ids": ["208"],
      "id": "javascript_lang_observable_timing",
      "title": "Observable Timing Discrepancy",
      "description": "## Description\n\nObservable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.\n\n## Remediations\n\n- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.\n- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.\n- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.\n  ```javascript\n    if (apiToken === \"zDE9ET!TDq2uZx2oM!FD2\") { // unsafe\n      ...\n    }\n  ```\n- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.\n\n## References\n\n- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_observable_timing",
      "line_number": 54,
      "full_filename": "/scan/routes/changePassword.ts",
      "filename": "routes/changePassword.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": { "start": 52, "end": 99 }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": { "start": 52, "end": 99 },
        "content": ""
      },
      "parent_line_number": 54,
      "fingerprint": "24e131a07d49a212d37417b226761e7e_1",
      "old_fingerprint": "d3d9d273b968ee58d052727331f22393_10",
      "code_extract": "        () =\u003e user.id === 3 \u0026\u0026 !currentPassword \u0026\u0026 user.password === security.hash('slurmCl4ssic')"
    },
    {
      "cwe_ids": ["208"],
      "id": "javascript_lang_observable_timing",
      "title": "Observable Timing Discrepancy",
      "description": "## Description\n\nObservable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.\n\n## Remediations\n\n- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.\n- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.\n- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.\n  ```javascript\n    if (apiToken === \"zDE9ET!TDq2uZx2oM!FD2\") { // unsafe\n      ...\n    }\n  ```\n- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.\n\n## References\n\n- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_observable_timing",
      "line_number": 100,
      "full_filename": "/scan/routes/dataExport.ts",
      "filename": "routes/dataExport.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 100,
        "end": 100,
        "column": { "start": 83, "end": 124 }
      },
      "sink": {
        "start": 100,
        "end": 100,
        "column": { "start": 83, "end": 124 },
        "content": ""
      },
      "parent_line_number": 100,
      "fingerprint": "7d11d6fe20df3420d971b5fdddce370c_0",
      "old_fingerprint": "ab567bbee5647c8ba8567f06e79743fc_13",
      "code_extract": "            challengeUtils.solveIf(challenges.dataExportChallenge, () =\u003e { return order.orderId.split('-')[0] !== emailHash })"
    },
    {
      "cwe_ids": ["208"],
      "id": "javascript_lang_observable_timing",
      "title": "Observable Timing Discrepancy",
      "description": "## Description\n\nObservable Timing Discrepancy occurs when the time it takes for certain operations to complete can be measured and observed by attackers. This vulnerability is particularly concerning when operations involve sensitive information, such as password checks or secret comparisons. If attackers can analyze how long these operations take, they might be able to deduce confidential details, putting your data at risk.\n\n## Remediations\n\n- **Do** implement algorithms that process sensitive information in constant time. This approach helps prevent attackers from guessing secrets based on the duration of operations.\n- **Do** use built-in security features and cryptographic libraries that offer functions safe from timing attacks for comparing secret values.\n- **Do not** use direct string comparisons for sensitive information, as this can lead to early termination of the function if a mismatch is found, revealing timing information.\n  ```javascript\n    if (apiToken === \"zDE9ET!TDq2uZx2oM!FD2\") { // unsafe\n      ...\n    }\n  ```\n- **Do not** design application logic that changes execution paths in a manner that could introduce timing discrepancies based on user input or secret values.\n\n## References\n\n- [OWASP Guide to Cryptography](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [MDN Web Docs on SubtleCrypto API](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_observable_timing",
      "line_number": 37,
      "full_filename": "/scan/routes/login.ts",
      "filename": "routes/login.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": { "start": 30, "end": 57 }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": { "start": 30, "end": 57 },
        "content": ""
      },
      "parent_line_number": 37,
      "fingerprint": "d1bc10543b48b63f88106e770ff22029_0",
      "old_fingerprint": "da63cb765d453f011e79244eb8c51b65_8",
      "code_extract": "        if (user.data?.id \u0026\u0026 user.data.totpSecret !== '') {"
    },
    {
      "cwe_ids": ["328"],
      "id": "javascript_lang_weak_hash_md5",
      "title": "Usage of weak hashing library (MD5)",
      "description": "## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing or security purposes. It is no longer considered secure for cryptographic applications.\n- **Do** opt for stronger hashing algorithms like SHA-256 for enhanced security.\n  ```javascript\n  const crypto = require(\"crypto\");\n\n  const key = \"secret key\";\n  const hash = crypto.createHmac(\"sha256\", key).update(user.password).digest('hex');\n  ```\n\n## References\n\n- [NodeJS Crypto Module](https://nodejs.org/api/crypto.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_weak_hash_md5",
      "line_number": 78,
      "full_filename": "/scan/Gruntfile.js",
      "filename": "Gruntfile.js",
      "category_groups": ["PII", "Personal Data"],
      "source": { "start": 78, "end": 78, "column": { "start": 7, "end": 25 } },
      "sink": {
        "start": 78,
        "end": 78,
        "column": { "start": 7, "end": 25 },
        "content": ""
      },
      "parent_line_number": 78,
      "fingerprint": "21fa322fb6bf051a5864e6b1e84c7d36_0",
      "old_fingerprint": "42e5ae6672b38872971cbf1b718bf7da_1",
      "code_extract": "      md5.update(buffer)"
    },
    {
      "cwe_ids": ["328"],
      "id": "javascript_lang_weak_hash_md5",
      "title": "Usage of weak hashing library (MD5)",
      "description": "## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing or security purposes. It is no longer considered secure for cryptographic applications.\n- **Do** opt for stronger hashing algorithms like SHA-256 for enhanced security.\n  ```javascript\n  const crypto = require(\"crypto\");\n\n  const key = \"secret key\";\n  const hash = crypto.createHmac(\"sha256\", key).update(user.password).digest('hex');\n  ```\n\n## References\n\n- [NodeJS Crypto Module](https://nodejs.org/api/crypto.html)",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_weak_hash_md5",
      "line_number": 43,
      "full_filename": "/scan/lib/insecurity.ts",
      "filename": "lib/insecurity.ts",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 43,
        "end": 43,
        "column": { "start": 39, "end": 76 }
      },
      "sink": {
        "start": 43,
        "end": 43,
        "column": { "start": 39, "end": 76 },
        "content": ""
      },
      "parent_line_number": 43,
      "fingerprint": "42a76a8c10a52b38c1b8729a2f211830_0",
      "old_fingerprint": "4ccacc995033084c6f5507b5be80102d_0",
      "code_extract": "export const hash = (data: string) =\u003e crypto.createHash('md5').update(data).digest('hex')"
    }
  ]
}

{"critical":[{"cwe_ids":["78"],"id":"javascript_lang_dynamic_os_command","title":"Unsanitized dynamic input in OS command","description":"## Description\n\nIncorporating unsanitized dynamic input directly into operating system commands poses a significant security risk. This practice could give attackers the opportunity to execute harmful commands on your system.\n\n## Remediations\n\n- **Do** use static, hardcoded values in command strings - wherever possible - to avoid relying on dynamic data.\n  ```javascript\n  let filePattern = \"*.js\";\n  cp.exec(`cp ${filePattern} destinationFolder`, (error, stdout, stderr) =\u003e {});\n  ```\n- **Do** sanitize any dynamic input used in OS commands to ensure it does not contain malicious code. This can be achieved by validating and escaping the input.\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_os_command_injection","line_number":20,"full_filename":"/scan/test_vuln.js","filename":"test_vuln.js","source":{"start":20,"end":22,"column":{"start":5,"end":7}},"sink":{"start":20,"end":22,"column":{"start":5,"end":7},"content":""},"parent_line_number":20,"fingerprint":"a15877223715018ff0b40de8ae5380b1_0","old_fingerprint":"ec1c3345f35bcc9098841452c68286a9_0","code_extract":"    exec(`ping ${host}`, (error, stdout, stderr) =\u003e { // Command injection\n        res.send(stdout);\n    });"},{"cwe_ids":["798"],"id":"javascript_lang_hardcoded_secret","title":"Usage of hard-coded secret","description":"## Description\n\nStoring secrets directly in your code is a security risk. Instead, opt for environment variables or a secret management system to safeguard your secrets.\n\n## Remediations\n\n- **Do not** store plaintext secrets in your code. This exposes sensitive information to unnecessary risk.\n  ```javascript\n    passport.use(new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'my-id-123',\n        clientSecret: 'shh-my-secret',\n        callbackURL: 'http://localhost:3000/auth/example/callback'\n      },\n      function(accessToken, refreshToken, profile, cb) {\n        User.findOrCreate({ exampleId: profile.id }, function (err, user) {\n          return cb(err, user);\n        });\n      }\n    ));\n  ```\n- **Do** use environment variables to store sensitive information such as secrets. This method keeps credentials out of your codebase and makes them easier to manage securely.\n- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.\n\n## References\n\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)\n- [AWS Key Management Service](https://aws.amazon.com/kms/)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_hardcoded_secret","line_number":6,"full_filename":"/scan/test_vuln.js","filename":"test_vuln.js","source":{"start":6,"end":6,"column":{"start":1,"end":39}},"sink":{"start":6,"end":6,"column":{"start":1,"end":39},"content":""},"parent_line_number":6,"fingerprint":"e9148cb3e49ff316df66e00484a16228_0","old_fingerprint":"1bb10df4e0af63244e2b717288ab6256_0","code_extract":"const API_KEY = 'sk-1234567890abcdef';"},{"cwe_ids":["798"],"id":"javascript_lang_hardcoded_secret","title":"Usage of hard-coded secret","description":"## Description\n\nStoring secrets directly in your code is a security risk. Instead, opt for environment variables or a secret management system to safeguard your secrets.\n\n## Remediations\n\n- **Do not** store plaintext secrets in your code. This exposes sensitive information to unnecessary risk.\n  ```javascript\n    passport.use(new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: 'my-id-123',\n        clientSecret: 'shh-my-secret',\n        callbackURL: 'http://localhost:3000/auth/example/callback'\n      },\n      function(accessToken, refreshToken, profile, cb) {\n        User.findOrCreate({ exampleId: profile.id }, function (err, user) {\n          return cb(err, user);\n        });\n      }\n    ));\n  ```\n- **Do** use environment variables to store sensitive information such as secrets. This method keeps credentials out of your codebase and makes them easier to manage securely.\n- **Do** consider implementing a key-management system to securely handle secrets and other sensitive information. This approach provides enhanced security measures for managing and accessing credentials.\n\n## References\n\n- [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password)\n- [Google Cloud Key Management Service](https://cloud.google.com/kms/docs)\n- [AWS Key Management Service](https://aws.amazon.com/kms/)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_hardcoded_secret","line_number":7,"full_filename":"/scan/test_vuln.js","filename":"test_vuln.js","source":{"start":7,"end":7,"column":{"start":1,"end":32}},"sink":{"start":7,"end":7,"column":{"start":1,"end":32},"content":""},"parent_line_number":7,"fingerprint":"e9148cb3e49ff316df66e00484a16228_1","old_fingerprint":"1bb10df4e0af63244e2b717288ab6256_1","code_extract":"const DB_PASSWORD = 'admin123';"},{"cwe_ids":["78"],"id":"javascript_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nExecuting operating system commands with unsanitized user input can lead to command injection vulnerabilities. This occurs when attackers manipulate the input to execute unauthorized commands, potentially gaining control over the system.\n\n## Remediations\n\n- **Do not** directly use user input in OS command execution. This can open up the system to command injection attacks.\n- **Do** use static or predefined values for command parameters when possible. This reduces the risk of injection and ensures that the command operates within expected parameters.\n  ```javascript\n  let filePattern = \"*.js\"\n\n  if (req.params.graphql) {\n    filePattern = \"*.gql\"\n  }\n\n  cp.exec(`cp ${filePattern} foo`, (error, stdout, stderr) =\u003e {});\n  ```\n- **Do** validate and sanitize all user input used in OS commands. Ensure that the input does not contain malicious characters or command sequences.\n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_os_command_injection","line_number":20,"full_filename":"/scan/test_vuln.js","filename":"test_vuln.js","source":{"start":20,"end":22,"column":{"start":5,"end":7}},"sink":{"start":20,"end":22,"column":{"start":5,"end":7},"content":""},"parent_line_number":20,"fingerprint":"cc39913b65829db5799c3ad743e397e7_0","old_fingerprint":"cd14695873d5c1ed4ccd6d83f7e61d15_0","code_extract":"    exec(`ping ${host}`, (error, stdout, stderr) =\u003e { // Command injection\n        res.send(stdout);\n    });"}],"high":[{"cwe_ids":["79"],"id":"javascript_express_cross_site_scripting","title":"Unsanitized user input in HTTP response (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTTP responses exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in a response. This practice can lead to XSS vulnerabilities.\n  ```javascript\n  res.send(req.body.data); // unsafe\n  ```\n- **Do** sanitize user input before including it in a response. Use library functions or frameworks designed for input sanitization to ensure that user data cannot be interpreted as executable code.\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_cross_site_scripting","line_number":13,"full_filename":"/scan/test_vuln.js","filename":"test_vuln.js","source":{"start":13,"end":13,"column":{"start":5,"end":20}},"sink":{"start":13,"end":13,"column":{"start":5,"end":20},"content":""},"parent_line_number":13,"fingerprint":"e665897cc7ecdef8d764bb2388077790_0","old_fingerprint":"d4734473afab9767a0092e6d6cc58751_0","code_extract":"    res.send(query);"},{"cwe_ids":["79"],"id":"javascript_express_cross_site_scripting","title":"Unsanitized user input in HTTP response (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTTP responses exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in a response. This practice can lead to XSS vulnerabilities.\n  ```javascript\n  res.send(req.body.data); // unsafe\n  ```\n- **Do** sanitize user input before including it in a response. Use library functions or frameworks designed for input sanitization to ensure that user data cannot be interpreted as executable code.\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_cross_site_scripting","line_number":28,"full_filename":"/scan/test_vuln.js","filename":"test_vuln.js","source":{"start":28,"end":28,"column":{"start":5,"end":54}},"sink":{"start":28,"end":28,"column":{"start":5,"end":54},"content":""},"parent_line_number":28,"fingerprint":"e665897cc7ecdef8d764bb2388077790_1","old_fingerprint":"d4734473afab9767a0092e6d6cc58751_1","code_extract":"    res.send(`\u003ch1\u003eSearch results for: ${query}\u003c/h1\u003e`); // XSS"},{"cwe_ids":["79"],"id":"javascript_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```javascript\n  const html = `\u003ch1\u003e${req.params.title}\u003c/h1\u003e` // unsafe\n  ```\n- **Do** use a framework or templating language that automatically handles the encoding and sanitization of user input when constructing HTML. This approach minimizes the risk of XSS attacks.\n- **Do** sanitize user input if you must use HTML strings directly. Utilize libraries designed for input sanitization to ensure that user input does not contain malicious content.\n  ```javascript\n  import sanitizeHtml from 'sanitize-html'\n\n  const sanitizedTitle = sanitizeHtml(req.params.title)\n  const html = `\u003ch1\u003e${sanitizedTitle}\u003c/h1\u003e`\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_raw_html_using_user_input","line_number":28,"full_filename":"/scan/test_vuln.js","filename":"test_vuln.js","source":{"start":28,"end":28,"column":{"start":14,"end":53}},"sink":{"start":28,"end":28,"column":{"start":14,"end":53},"content":""},"parent_line_number":28,"fingerprint":"9be1e223403fc9dcb11396f4579547d6_0","old_fingerprint":"c01c6f8cfbbc130ffdb5d9f969cca529_0","code_extract":"    res.send(`\u003ch1\u003eSearch results for: ${query}\u003c/h1\u003e`); // XSS"}],"medium":[{"cwe_ids":["693"],"id":"javascript_express_helmet_missing","title":"Missing Helmet configuration on HTTP headers","description":"## Description\n\nHelmet can help protect your app from some well-known web vulnerabilities by setting HTTP headers appropriately. Failing to configure Helmet for HTTP headers leaves your application vulnerable to several web attacks.\n\n## Remediations\n\n- **Do** use Helmet middleware to secure your app by adding it to your application's middleware.\n  ```javascript\n  const helmet = require(\"helmet\");\n  app.use(helmet());\n  ```\n\n## References\n\n- [Express Security Best Practices: Use Helmet](https://expressjs.com/en/advanced/best-practice-security.html#use-helmet)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_helmet_missing","line_number":2,"full_filename":"/scan/test_vuln.js","filename":"test_vuln.js","source":{"start":2,"end":2,"column":{"start":13,"end":22}},"sink":{"start":2,"end":2,"column":{"start":13,"end":22},"content":""},"parent_line_number":2,"fingerprint":"7fde4398d401d13a4909acdaa783f38f_0","old_fingerprint":"9a57dd5e497697ec7b6ffecc9aeaaf3d_0","code_extract":"const app = express();"},{"cwe_ids":["693"],"id":"javascript_express_reduce_fingerprint","title":"Missing server configuration to reduce server fingerprinting","description":"## Description\n\nReducing server fingerprinting enhances security by making it harder for attackers to identify the software your server is running. Server fingerprinting involves analyzing the unique responses of server software to specific requests, which can reveal information about the server's software and version. While not a direct security vulnerability, minimizing this information leakage is a proactive step to obscure details that could be used in targeted attacks.\n\n## Remediations\n\n- **Do** disable the `X-Powered-By` header in Express.js applications to prevent revealing the server's technology stack. Use the `app.disable()` method to achieve this.\n  ```javascript\n  app.disable('x-powered-by');\n  ```\n\n## References\n\n- [Express Security Best Practices](https://expressjs.com/en/advanced/best-practice-security.html)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_reduce_fingerprint","line_number":2,"full_filename":"/scan/test_vuln.js","filename":"test_vuln.js","source":{"start":2,"end":2,"column":{"start":13,"end":22}},"sink":{"start":2,"end":2,"column":{"start":13,"end":22},"content":""},"parent_line_number":2,"fingerprint":"c72b79444d58bb2e38b078dcb8dcb120_0","old_fingerprint":"7fe58d3ff41203039a17acffd382199f_0","code_extract":"const app = express();"}]}
